<!DOCTYPE HTML>
<html>
<head>
	<title>QUnit test for objectLib.js</title>
	
	<!--
	<link rel='stylesheet' href='http://code.jquery.com/qunit/qunit-1.16.0.css' />
	<script src='http://code.jquery.com/jquery-1.11.0.min.js'></script>
	<script src='http://code.jquery.com/qunit/qunit-1.16.0.js'></script>
	<script src='http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.7.0/underscore-min.js'></script>
	
	<script>window.jQuery || document.write('<script src='local-source.js'><\/script>')</script>
	-->
	
	<link rel='stylesheet' href='qunit/qunit-2.17.1.css' />
	<script src='qunit/qunit-2.17.1.js'></script>
	<script src='jquery/jquery-2.1.1.min.js'></script>
	<script src='underscore/underscore-min.js'></script>

	<script src='sharedLib.js'></script>
	<script src='coordLib.js'></script>
	<script src='calcLib.js'></script>
    <script src="objectLib.js"></script>
	<script src='json/SAC_DeepSky_Ver81_abbr.js'></script>
	<script src='json/SAC_DeepSky_Ver81_Json.js'></script>
	<script src='json/BortleScale.js'></script>
</head>
<body>
	<div id="qunit"></div>
	<div id="qunit-fixture"></div>
</body>

<script>$(document).ready(function () {
	'use strict';
	var withinRange = MLB.sharedLib.withinRange,
		openClusters = MLB.objectLib.openClusters,
		decodeObjectSize = MLB.objectLib.decodeObjectSize,
		createObjectFieldsString = MLB.objectLib.createObjectFieldsString,
		createObjectDescriptionString = MLB.objectLib.createObjectDescriptionString,
	    getObjectSize = MLB.objectLib.getObjectSize,
		getObjectSizeDeg = MLB.objectLib.getObjectSizeDeg,
		validMagSurB = MLB.objectLib.validMagSurB,
		validRecordToCalcSurfaceBrightness = MLB.objectLib.validRecordToCalcSurfaceBrightness,
		getSurfaceBrightness = MLB.objectLib.getSurfaceBrightness,
		getSurfaceBrightnessAndSizeIfPossible = MLB.objectLib.getSurfaceBrightnessAndSizeIfPossible,
		getDetectionLevelForApertureAndBortle = MLB.objectLib.getDetectionLevelForApertureAndBortle,
		filterObjectCatalog = MLB.objectLib.filterObjectCatalog,
	    convertRomanNumeral = MLB.objectLib.convertRomanNumeral,
	    getConstellation = MLB.objectLib.getConstellation,
	    getCatalogs = MLB.objectLib.getCatalogs,
		getObjectType = MLB.objectLib.getObjectType,
	    getClassificationFrom = MLB.objectLib.getClassificationFrom,
	    getDescription = MLB.objectLib.getDescription,
		findClosestObjects = MLB.objectLib.findClosestObjects;

	QUnit.module('underscore js check');

	QUnit.test('_.find', assert => {
		var expected = 2,
		    result = _.find([1, 2, 3, 4, 5, 6], function (num) { return num % 2 == 0; });
		assert.equal(result, expected, result + ' should be ' + expected);
	});
	
	QUnit.test('_.find of openClusters', assert => {
		var expected = 'Large range',
			result = _.find(openClusters, function (keyValue) { return keyValue.key === '3' ? keyValue.value : false; });
		assert.equal(result.value, expected, result.value + ' should be ' + expected);
	});

	QUnit.test('_.findWhere of openClusters', assert => {
		var expected = 'Large range',
			result = _.findWhere(openClusters, {key: '3'});
		assert.equal(result.value, expected, result.value + ' should be ' + expected);
	});
	
	QUnit.module('object string manipulation');
	
	QUnit.test('decodeObjectSize', assert => {
		var expected = '8.9',
			decimalPoints = 2,
			result = decodeObjectSize('8.9 m', decimalPoints);
			
		assert.equal(result, expected, result + ' should be ' + expected);
		
		expected = '0.5';
		result = decodeObjectSize('30 s', decimalPoints);
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '300';
		result = decodeObjectSize('5 d', decimalPoints);
		assert.equal(result, expected, result + ' should be ' + expected);
	});	
	
	QUnit.test('createObjectFieldsString', assert => {
		var Saguaro81Abbr = MLB.Saguaro81AbbrJson.Saguaro81Abbr,
			expected = 'NGC 7831 | 12.8 | 1.5 m | 0.3 m',
			record = Saguaro81Abbr[0],
			result = createObjectFieldsString(record);
			
		assert.equal(result, expected, result + ' should be ' + expected);
	});	
	
	QUnit.test('createObjectDescriptionString', assert => {
		var Saguaro81Abbr = MLB.Saguaro81AbbrJson.Saguaro81Abbr,
			expected = 'Name: NGC 7831 / IC 1530 Mag: 12.8 SurfBright: 12.3 Size: 1.5 arc-min x 0.3 arc-min Type: Galaxy Con: Andromeda Descr: extremely/excessively faint; very small; much elongated/extended; very faint stars very near',
			record = Saguaro81Abbr[0],
			result = createObjectDescriptionString(record);
			
		assert.equal(result, expected, result + ' should be ' + expected);
	});	
	
	QUnit.module('object sizes');
	
	QUnit.test('getObjectSize', assert => {
		var expected = '8.9 arc-min',
			result = getObjectSize('8.9 m');
			
		assert.equal(result, expected, result + ' should be ' + expected);
		
		expected = '30 arc-sec';
		result = getObjectSize('30 s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '5 degree';
		result = getObjectSize('5 d');
		assert.equal(result, expected, result + ' should be ' + expected);
	});
	
	QUnit.module('Saguaro db');

	QUnit.test('getObjectSizeDeg', assert => {
		var allowableError = 0.0001,
		    expected = 0.1483,
			result = getObjectSizeDeg('8.9 m');

		assert.equal(withinRange(result, expected, allowableError), true, 'The size in deg should be ' + expected + ', is ' + result);

		result = getObjectSizeDeg('8.9 mins');
		assert.equal(withinRange(result, expected, allowableError), true, 'The size in deg should be ' + expected + ', is ' + result);
					
		expected = 0.0083;
		result = getObjectSizeDeg('30 s');
		assert.equal(withinRange(result, expected, allowableError), true, 'The size in deg should be ' + expected + ', is ' + result);

		expected = 5;
		result = getObjectSizeDeg('5 d');
		assert.equal(withinRange(result, expected, allowableError), true, 'The size in deg should be ' + expected + ', is ' + result);
	});
	
	QUnit.test('validMagSurB', assert => {
		var value = 8,
		    expected = true,
		    result = validMagSurB(value)
		
		assert.equal(result, expected, result + ' should be ' + expected);
		
		value = 99.9;
		expected = false;
		result = validMagSurB(value)
		assert.equal(result, expected, result + ' should be ' + expected);

		value = '';
		expected = false;
		result = validMagSurB(value)
		assert.equal(result, expected, result + ' should be ' + expected);
	});
		
	QUnit.test('validRecordToCalcSurfaceBrightness', assert => {
		var record = {SIZE_MAX: '5   s', SIZE_MIN: '', MAG: 8, SUBR: ''},
		    expected = true,
		    result = validRecordToCalcSurfaceBrightness(record);
		
		assert.equal(result, expected, result + ' should be ' + expected);
		
		record = {SIZE_MAX: '5 m', SIZE_MIN: '5 m', MAG: 8, SUBR: 99.9};
		expected = true;
		result = validRecordToCalcSurfaceBrightness(record);
		assert.equal(result, expected, result + ' should be ' + expected);

		record = {SIZE_MAX: '', SIZE_MIN: '', MAG: 8, SUBR: ''};
		expected = false;
		result = validRecordToCalcSurfaceBrightness(record);
		assert.equal(result, expected, result + ' should be ' + expected);
		
		record = {SIZE_MAX: '5 m', SIZE_MIN: '', MAG: 79.9, SUBR: ''};
		expected = false;
		result = validRecordToCalcSurfaceBrightness(record);
		assert.equal(result, expected, result + ' should be ' + expected);
		
		record = {SIZE_MAX: '5 m', SIZE_MIN: '', MAG: '', SUBR: 99.9};
		expected = false;
		result = validRecordToCalcSurfaceBrightness(record);
		assert.equal(result, expected, result + ' should be ' + expected);
	});
	
	QUnit.test('getSurfaceBrightness', assert => {
		var allowableError = 0.01,
			// Saguaro's NGC 1275 but missing SB
		    record = {SIZE_MAX: '2.3 m', SIZE_MIN: '1.6 m', MAG: 11.9, SUBR: ''},
			useSB = true,
		    expected = 21.94,
		    result = getSurfaceBrightness(record, useSB);
		
		assert.equal(withinRange(result, expected, allowableError), true, 'The surface brightness should be ' + expected + ', is ' + result);

		// including Saguaro's SB: note the diff
		record = {SIZE_MAX: '2.3 m', SIZE_MIN: '1.6 m', MAG: 11.9, SUBR: 13.1};
		useSB = true;
		expected = 21.73;
		result = getSurfaceBrightness(record, useSB);
		assert.equal(withinRange(result, expected, allowableError), true, 'The surface brightness should be ' + expected + ', is ' + result);

		// tell the algorithm to calc SB regardless of valid SB
		record = {SIZE_MAX: '2.3 m', SIZE_MIN: '1.6 m', MAG: 11.9, SUBR: 13.1};
		useSB = false;
		expected = 21.94;
		result = getSurfaceBrightness(record, useSB);
		assert.equal(withinRange(result, expected, allowableError), true, 'The surface brightness should be ' + expected + ', is ' + result);
	});	
	
	QUnit.test('getSurfaceBrightnessAndSizeIfPossible', assert => {
		var allowableError = 0.01,
			// Saguaro's NGC 1275 but missing SB
		    record = {SIZE_MAX: '2.3 m', SIZE_MIN: '1.6 m', MAG: 11.9, SUBR: ''},
			useSB = true,
		    expected = 21.94,
		    result = getSurfaceBrightnessAndSizeIfPossible(record, useSB).SB;
		
		assert.equal(withinRange(result, expected, allowableError), true, 'The surface brightness should be ' + expected + ', is ' + result);

		// including Saguaro's SB: note the diff
		record = {SIZE_MAX: '2.3 m', SIZE_MIN: '1.6 m', MAG: 11.9, SUBR: 13.1};
		useSB = true;
		expected = 21.73;
		result = getSurfaceBrightnessAndSizeIfPossible(record, useSB).SB;
		assert.equal(withinRange(result, expected, allowableError), true, 'The surface brightness should be ' + expected + ', is ' + result);

		// tell the algorithm to calc SB regardless of valid SB
		record = {SIZE_MAX: '2.3 m', SIZE_MIN: '1.6 m', MAG: 11.9, SUBR: 13.1};
		useSB = false;
		expected = 21.94;
		result = getSurfaceBrightnessAndSizeIfPossible(record, useSB).SB;
		assert.equal(withinRange(result, expected, allowableError), true, 'The surface brightness should be ' + expected + ', is ' + result);

		record = {SIZE_MAX: '', SIZE_MIN: '', MAG: 8, SUBR: ''};
		expected = false;
		result = getSurfaceBrightnessAndSizeIfPossible(record, useSB);
		assert.equal(withinRange(result, expected, allowableError), true, 'The record should be ' + expected + ', is ' + result);
		
		record = {SIZE_MAX: '5 m', SIZE_MIN: '', MAG: 79.9, SUBR: ''};
		expected = false;
		result = getSurfaceBrightnessAndSizeIfPossible(record, useSB);
		assert.equal(withinRange(result, expected, allowableError), true, 'The record should be ' + expected + ', is ' + result);
		
		record = {SIZE_MAX: '5 m', SIZE_MIN: '', MAG: '', SUBR: 99.9};
		result = getSurfaceBrightnessAndSizeIfPossible(record, useSB);
		assert.equal(withinRange(result, expected, allowableError), true, 'The record should be ' + expected + ', is ' + result);
	});	
	
	QUnit.test('getDetectionLevelForApertureAndBortle', assert => {
		var allowableError = 0.01,
			apertureInches = 10,
			BortleLevel = 3,
			// Saguaro's NGC 1275
		    record = {SIZE_MAX: '2.3 m', SIZE_MIN: '1.6 m', MAG: 11.9, SUBR: 13.1},
			useSB = false,
		    expected = {detectionLevelNumber: 4, objectSB: 21.94, backgroundSB: 21.6, objectSBPlusSkySB: 21.01, contrastPercent: 72.91},
		    result = getDetectionLevelForApertureAndBortle(apertureInches, BortleLevel, record, useSB);
		
		assert.equal(withinRange(result.backgroundSB, expected.backgroundSB, allowableError), true, 'The backgroundSB should be ' + expected.backgroundSB + ', is ' + result.backgroundSB);
		assert.equal(withinRange(result.contrastPercent, expected.contrastPercent, allowableError), true, 'The contrastPercent should be ' + expected.contrastPercent + ', is ' + result.contrastPercent);
		assert.equal(withinRange(result.detectionLevelNumber, expected.detectionLevelNumber, allowableError), true, 'The detectionLevelNumber should be ' + expected.detectionLevelNumber + ', is ' + result.detectionLevelNumber);
		
		expected = false;
		record = {SIZE_MAX: '5 m', SIZE_MIN: '', MAG: '', SUBR: 99.9};
		result = getDetectionLevelForApertureAndBortle(apertureInches, BortleLevel, record, useSB);
		assert.equal(withinRange(result, expected, allowableError), true, 'The record should be ' + expected + ', is ' + result);
	});		
			
	QUnit.module('filterObjectCatalog results');
	
	QUnit.test('filterObjectCatalog', assert => {
		var catalog = MLB.Saguaro81AbbrJson.Saguaro81Abbr,
			expected = 1,
			result = filterObjectCatalog(catalog, 'NGC 1499').length;
			
		assert.equal(result, expected, result + ' objects found count should be ' + expected);
		
		expected = 2;
		result = filterObjectCatalog(catalog, 'M 13').length;
		assert.equal(result, expected, result + ' should be ' + expected);
	});
	
	QUnit.test('filterObjectCatalog analysis', assert => {
		var catalog = MLB.Saguaro81AbbrJson.Saguaro81Abbr,
			searchStr = 'M 13',
			regEx = new RegExp(searchStr, 'gi'),
			expected = 2,
			result;
	
		result = catalog.filter(rec => rec.OBJECT.match(regEx) || rec.OTHER.match(regEx)).length;	
		assert.equal(result, expected, result + ' M 13 objects found count should be ' + expected);
		
		searchStr = 'NGC 1499',
		regEx = new RegExp(searchStr, 'gi'),
		expected = 1,
		result = catalog.filter(rec => rec.OBJECT.match(regEx) || rec.OTHER.match(regEx)).length;	
			assert.equal(result, expected, result + ' NGC 1499 should be ' + expected);

		/*
		"OBJECT": "NGC 43",
		"OTHER": "UGC 120",
		"TYPE": "GALXY",
		"CON": "AND",
		"MAG": 12.6,
		"SUBR": 13.4,
		"SIZE_MAX": "1.6 m",
		"SIZE_MIN": "1.5 m",
		"CLASS": "SBO",
		"NGC_DESCR": "eF;* 12 np 45''",
		"NOTES": ""
		*/
		expected = 0,
		result = catalog.filter(rec => rec.MAG.length === 0).length;	
		assert.equal(result, expected, result + ' object count with no mag should be ' + expected);

		expected = 1359,
		result = catalog.filter(rec => rec.MAG === 99.9).length;	
		assert.equal(result, expected, result + ' object count with mag===99.9 should be ' + expected);

		expected = 4844,
		result = catalog.filter(rec => rec.SUBR === 99.9).length;	
		assert.equal(result, expected, result + ' object count with subr===99.9 should be ' + expected);

		searchStr = '99',
		regEx = new RegExp(searchStr, 'gi'),
		expected = 1,
		result = catalog.filter(rec => rec.SIZE_MAX.match(regEx)).length;	
		assert.equal(result, expected, result + ' object count with 99 size max should be ' + expected);

		expected = 782,
		result = catalog.filter(rec => rec.SIZE_MAX.length === 0).length;
		assert.equal(result, expected, result + ' object count with no size max should be ' + expected);

		expected = 2666,
		result = catalog.filter(rec => rec.SIZE_MIN.length === 0).length;	
		assert.equal(result, expected, result + ' object count with no size min should be ' + expected);

		// unusable records
		expected = 1481,
		result = catalog.filter(rec => rec.MAG.length === 0 || rec.MAG === 99.9 || rec.SIZE_MAX.length === 0 || rec.SIZE_MAX === 99.9).length;
		assert.equal(result, expected, result + ' unusable records count should be ' + expected);	
	});
	
	QUnit.test('filterObjectCatalog analysis 2', assert => {
		var calcMagnitudeFromSurfaceBrightnessAndArea = MLB.calcLib.calcMagnitudeFromSurfaceBrightnessAndArea,
		    calcMagnitudePerArcMinSquaredFromSurfaceBrightnessAndEllipticalArea = MLB.calcLib.calcMagnitudePerArcMinSquaredFromSurfaceBrightnessAndEllipticalArea,
		    expectedValidRecordCount = 5490,
			validRecordCount = 0,
			catalog = MLB.Saguaro81AbbrJson.Saguaro81Abbr,
			magDiffTotal = 0,
			magDiffTotalPerRecord,
			expectedMagDiffTotalPerRecord = -0.09691851745530873,
			magDiffSquaredTotal = 0,
		    rms,
			expectedRMS = 1.3064001304306678;
	
		catalog.forEach(function (rec, ix) {
			var decimalPoints = 2,
			    size1,
			    size2,
				calcMag,
				magDiff,
				magDiffSquared;
			
			if (rec.MAG.length === 0 || rec.MAG === 99.9 || rec.SUBR.length === 0 || rec.SUBR === 99.9 || rec.SIZE_MAX.length === 0 || rec.SIZE_MAX === 99.9) {
				return;
			}
			size1 = +decodeObjectSize(rec.SIZE_MAX, decimalPoints);
			if (rec.SIZE_MIN.length === 0 || rec.SIZE_MIN === 99.9) {
				size2 = size1;
			} else {
				size2 = +decodeObjectSize(rec.SIZE_MIN, decimalPoints);
			}
			validRecordCount++;
			
			//calcMag = calcMagnitudeFromSurfaceBrightnessAndArea(rec.SUBR, size2 / 60, size1 / 60);
			// same value as above
			calcMag = calcMagnitudePerArcMinSquaredFromSurfaceBrightnessAndEllipticalArea(rec.SUBR, size2, size1);
			magDiff = calcMag - rec.MAG,
			magDiffSquared = magDiff * magDiff;
			magDiffTotal += magDiff;
			magDiffSquaredTotal += magDiffSquared;			
		});
		magDiffTotalPerRecord = magDiffTotal / validRecordCount;
		rms = Math.sqrt(magDiffSquaredTotal / validRecordCount);

		assert.equal(validRecordCount, expectedValidRecordCount, validRecordCount + ' validRecordCount is ' + expectedValidRecordCount);		
		assert.equal(rms, expectedRMS, rms + ' RMS of listed mag versus calculated mag from surfacebrightness and size is ' + expectedRMS);
		assert.equal(magDiffTotalPerRecord, expectedMagDiffTotalPerRecord, magDiffTotalPerRecord + ' raw mag diff of listed mag versus calculated mag from surfacebrightness and size is ' + expectedMagDiffTotalPerRecord);
	});	
	
	QUnit.module('roman numerals');
	
	QUnit.test('roman numerals', assert => {
		var expected,
		    result;

		expected = '6';
		result = convertRomanNumeral('VI');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '12';
		result = convertRomanNumeral('XII');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2916';
		result = convertRomanNumeral('MMCMXVI');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '1956';
		result = convertRomanNumeral('MCMLVI');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '1944';
		result = convertRomanNumeral('MCMXLIV');
		assert.equal(result, expected, result + ' should be ' + expected);
		
		expected = '999';
		result = convertRomanNumeral('CMXCIX');
		assert.equal(result, expected, result + ' should be ' + expected);
		
		expected = '444';
		result = convertRomanNumeral('CDXLIV');
		assert.equal(result, expected, result + ' should be ' + expected);
	});
	
	QUnit.module('constellations');
	
	QUnit.test('getConstellation', assert => {
		var expected = 'Cygnus',
			result = getConstellation('CYG');
		assert.equal(result, expected, result + ' should be ' + expected);
		
		expected = undefined;
		result = getConstellation('foobar');
		assert.equal(result, expected, result + ' should be ' + expected);
	});

	QUnit.module('catalogs');
	
	QUnit.test('getCatalogs', assert => {
		var expected = 'Uppsala General Catalog (galaxies); 1st and 2nd Index Catalogs to the NGC (All types of objects except dark nebulae)',
			result = getCatalogs('UGC   174;IC 1539 ');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '';
		result = getCatalogs('');
		assert.equal(result, expected, result + ' should be ' + expected);
	});

	QUnit.module('object types');
	
	QUnit.test('getObjectTypes', assert => {
		var expected,
		    result;

		expected = 'Asterism';
		result = getObjectType('ASTER');
		assert.equal(result, expected, result + ' should be ' + expected);
		
		expected = 'Globular Cluster in the LMC';
		result = getObjectType('LMCGC');
		assert.equal(result, expected, result + ' should be ' + expected);
		
		expected = '2 stars';
		result = getObjectType('2STAR');
		assert.equal(result, expected, result + ' should be ' + expected);
	});
	
	QUnit.module('classifications');
	
	QUnit.test('getClassificationFrom: bad type', assert => {
		var expected,
		    result;

		expected = 'unknown value: foo type: bar';
		result = getClassificationFrom('bar', 'foo');
		assert.equal(result, expected, result + ' should be ' + expected);
	});

	QUnit.test('getClassificationFrom: empty value', assert => {
		var expected,
		    result;

		expected = '';
		result = getClassificationFrom('bar', '');
		assert.equal(result, expected, result + ' should be ' + expected);
	});

	QUnit.test('getClassificationFrom open cluster', assert => {
		var expected,
		    result;

		expected = '';
		result = getClassificationFrom('NONEX', '          ');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '30 to 49 galaxies, mag 13.3 to 14.0, cluster has no remarkable members, e.g. the Virgo Cluster';
		result = getClassificationFrom('GALCL', '0 1 III   ');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'peculiar';
		result = getClassificationFrom('G+C+N', 'Pec       ');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'Not well detached from surrounding star field; Small range; Poor (<50 stars)';
		result = getClassificationFrom('OPNCL', 'IV 1 p     ');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'Not well detached from surrounding star field; Moderate range; Poor (<50 stars); nebulosity in cluster';
		result = getClassificationFrom('OPNCL', 'IV 2pn:b   ');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'Detached, no concentration toward the center; Small range; Poor (<50 stars)';
		result = getClassificationFrom('OPNCL', 'III 1p :a  ');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'Detached, weak concentration toward the center; Large range; Moderately rich (50-100 stars); nebulosity in cluster';
		result = getClassificationFrom('CL+NB', 'II 3 m n:a ');
		assert.equal(result, expected, result + ' should be ' + expected);
		
		expected = 'elongated/extended';
		result = getClassificationFrom('CL+NB', 'E         ');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended; stars';
		result = getClassificationFrom('CL+NB', 'E+*       ');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended; round';
		result = getClassificationFrom('CL+NB', 'E+R       ');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'Not well detached from surrounding star field; Moderate range; Poor (<50 stars)';
		result = getClassificationFrom('ASTER', 'IV 2 p     ');
		assert.equal(result, expected, result + ' should be ' + expected);
	});
		
	QUnit.test('getClassificationFrom open galaxy', assert => {
		var expected,
		    result;

		expected = 'elliptical';
		result = getClassificationFrom('GALXY', 'Elliptical');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elliptical - lenticular ring';
		result = getClassificationFrom('GALXY', 'E-SO Ring');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'barred spiral moderately wound arms';
		result = getClassificationFrom('GALXY', 'SBb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'barred spiral lenticular - tightly wound arms';
		result = getClassificationFrom('GALXY', 'SBO-a');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elliptical - lenticular with central bar';
		result = getClassificationFrom('GALXY', 'E-SO Bar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elliptical peculiar';
		result = getClassificationFrom('GALXY', 'E pec');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'barred spiral / peculiar';
		result = getClassificationFrom('GALXY', 'SB/P');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elliptical plus star';
		result = getClassificationFrom('GALXY', 'E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elliptical very round';
		result = getClassificationFrom('GALXY', 'E0');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'spiral ( moderately wound arms ) irregular Magellanic';
		result = getClassificationFrom('GALXY', 'S(B)dm');
		assert.equal(result, expected, result + ' should be ' + expected);
	});

	QUnit.test('getClassificationFrom globular cluster', assert => {
		var expected,
		    result;

		expected = 'concentration is 11 (1 is most concentrated, 12 is least concentrated)';
		result = getClassificationFrom('GLOCL', 'XI         ');
		assert.equal(result, expected, result + ' should be ' + expected);
	});

	QUnit.test('getClassificationFrom planetary nebula', assert => {
		var expected,
		    result;

		expected = 'Ring structure (Irregular disk)';
		result = getClassificationFrom('PLNNB', '4(3)       ');
		assert.equal(result, expected, result + ' should be ' + expected);
		
		expected = 'Irregular disk with traces of ring structure (Smooth disk)';
		result = getClassificationFrom('PLNNB', '3b(2)      ');
		assert.equal(result, expected, result + ' should be ' + expected);
		
		expected = 'Smooth disk (Smooth disk with brighter center)';
		result = getClassificationFrom('PLNNB', '2(2a)      ');
		assert.equal(result, expected, result + ' should be ' + expected);		
	});
	
	QUnit.test('getClassificationFrom dark nebula', assert => {
		var expected,
		    result;
			
		expected = 'opacity of 6; irregular';
		result = getClassificationFrom('DRKNB', '6 Ir ');
		assert.equal(result, expected, result + ' should be ' + expected);
		
		expected = 'opacity of 6; coarse/coarsely; gradually';
		result = getClassificationFrom('DRKNB', '6 Co G ');
		assert.equal(result, expected, result + ' should be ' + expected);
		
		expected = 'opacity of 5; elongated/extended; gradually';
		result = getClassificationFrom('DRKNB', '5 E G');
		assert.equal(result, expected, result + ' should be ' + expected);
	});
	
	QUnit.test('getClassificationFrom star', assert => {
		var expected,
		    result;
			
		expected = 'star(s)';
		result = getClassificationFrom('2STAR', '');
		assert.equal(result, expected, result + ' should be ' + expected);
	});
	
	QUnit.test('getClassificationFrom BRTNB et al', assert => {
		var expected,
		    result;
			
		expected = 'elongated/extended + stars';
		result = getClassificationFrom('BRTNB', 'E+*');
		assert.equal(result, expected, result + ' should be ' + expected);
	});	
	
	QUnit.module('descriptions');
	
	QUnit.test('descriptions', assert => {
		var expected,
		    result;

		assert.equal(true, true, 'stub');
		
		expected = '';
		result = getDescription('');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very rich';
		result = getDescription('vRi');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '8/10';
        result = getDescription('8/10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very suddenly/south much brighter middle';
        result = getDescription('vsmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'irregular round';
        result = getDescription("irR");
		assert.equal(result, expected, result + ' should be ' + expected);		
		
		expected = 'preceding 2';
        result = getDescription("p2");
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 9th magnitude distance or distant 2 arcminutes';
        result = getDescription("*9dist2'");
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'Vulpecula';
        result = getDescription("Vul");
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - very faint; large; irregular round; north bright middle at 100X; UHC filter helps';
        result = getDescription("13''-vF;L;irR;nBM at 100X; UHC filter helps");
		assert.equal(result, expected, result + ' should be ' + expected);		
		
		expected = 'very faint; very small; Nucleus or to a Nucleus = star of 13th magnitude; 14';
        result = getDescription("vF;vS;N=*13;14");
		assert.equal(result, expected, result + ' should be ' + expected);		

		expected = 'extremely/excessively faint; very small; round; between 2 stars';
        result = getDescription("eF;vS;R;bet 2 st");
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '4.5 arcminutes';
        result = getDescription("4'.5");
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '4.5 arcseconds';
        result = getDescription('4".5');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stars + nebula';
        result = getDescription('st+neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stars from 7th to 11th magnitude';
        result = getDescription('st 7...11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stars from 9th to 15th magnitude';
        result = getDescription('*9...15');
		assert.equal(result, expected, result + ' should be ' + expected);
	
		expected = 'extremely/excessively faint; star of 12th magnitude north preceding 45 arcseconds';
        result = getDescription("eF;* 12 np 45''");
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'in position angle 90';
        result = getDescription('in PA 90');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stars from 9th to 13th magnitude';
        result = getDescription('st 9 13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stars 9th magnitude and fainter';
        result = getDescription('st 9');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '9th to 13th magnitude';
        result = getDescription('9...13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '8th magnitude and fainter';
        result = getDescription('8...');
		assert.equal(result, expected, result + ' should be ' + expected);
		
		expected = '11th magnitude stars';
        result = getDescription(' 11m *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '11.5 magnitude stars';
        result = getDescription(' 11.5m *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - extremely/excessively faint; small; round at 100X; triangle of 11th magnitude stars to southwest';
        result = getDescription('13\"-eF; S; R at 100X; triangle of 11m * to SW');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2 or 3 stars involved/involving';
        result = getDescription('2or3*inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; round; very suddenly/south much brighter middle; 2 or 3 stars involved/involving';
        result = getDescription('pB;R;vsmbM;2or3*inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 11th magnitude preceding 2 arcseconds';
        result = getDescription('*11p2\"');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; round; very much brighter middle; star of 11th magnitude preceding 2 arcseconds';
        result = getDescription('pF;vS;R;vmbM;*11p2\"');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - extremely/excessively faint; pretty large; in two parts with 5 stars involved/involving at 100X with UHC';
        result = getDescription('13\"-eF; pL; in two parts with 5* invl at 100X with UHC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small cluster; star of 10th magnitude preceding 1 suddenly/south; suddenly/south 1 arcminutes 29 arcseconds';
        result = getDescription('vS Cl;*10p1s;s1\'29\"');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated in position angle 50 degrees';
        result = getDescription('E50');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 12.3 magnitude very small';
        result = getDescription('*12.3 vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; star of 7th magnitude 4 arcminutes following';
        result = getDescription('vF;S;* 7 mag 4\' foll');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '7 stars 135X';
        result = getDescription('7* 135X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; elongated/extended; very suddenly/south brighter middle; star of 9th magnitude preceding 5 suddenly/south';
        result = getDescription('pB;vS;E;vsbM;*9 p 5s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; irregular round; suddenly/south brighter middle Nucleus or to a Nucleus; (star?)';
        result = getDescription('eF;vS;iR;sbMN;(?*)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; gradually brighter middle; star of 10th magnitude preceding 8 arcseconds';
        result = getDescription('F;vS;R;gbM;*10 p 8\"');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'suddenly/south brighter middle Nucleus or to a Nucleus';
        result = getDescription('sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);
		
		expected = 'pretty bright, pretty large, elongated in position angle 50 degrees, 2 stars preceding';
        result = getDescription('pB,pL,E50,2 st p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stars magnitude 13';
        result = getDescription('stars mags 13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/very remarkable object, bright, very large, much brighter middle, well resolved clearly consisting of stars, stars magnitude 13';
        result = getDescription('!! B, vL, mbM, rrr, stars mags 13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint, very small, round';
        result = getDescription('vF, vS, R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright, very large, very much elongated/extended';
        result = getDescription('B, vL, vmE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/very remarkable object, bright';
        result = getDescription('!! B');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object, very bright, small';
        result = getDescription('!, vB, S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object, bright, very rich, much compressed';
        result = getDescription('!  B, vRi, mC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; very little/long elongated/extended; 2 very faint stars involved/involving';
        result = getDescription('vF;vS;vlE;2 vf st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; elongated/extended 0 degrees';
        result = getDescription('pB;pL;E 0 degrees');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; star of 13th magnitude attached following';
        result = getDescription('vF;S;R;*13 att f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; star of 13th magnitude attached following';
        result = getDescription('vF;S;R;*13 mag att f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; much elongated/extended 145 degree; considerably brighter middle';
        result = getDescription('pF;pS;mE 145 deg;cbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'Globular Cluster; very bright; very large; extremely/excessively compressed middle; well resolved clearly consisting of stars; stars small';
        result = getDescription('GC; vB; vL; eCM; rrr; st S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '(very small cluster)';
        result = getDescription('(vS cl)');
		assert.equal(result, expected, result + ' should be ' + expected);

	});
	
	QUnit.module('Saguaro descriptions');
	
	QUnit.test('descriptions', assert => {
		var expected,
		    result;

		expected = 'extremely/excessively faint; very small; much elongated/extended; very faint stars very near';
		result = getDescription('eF;vS;mE;vF*v nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; Nucleus or to a Nucleus = star of 13th magnitude; 14';
		result = getDescription('vF;vS;N=*13;14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; between 2 stars';
		result = getDescription('eF;vS;R;bet 2 st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; very little/long elongated/extended; 2 very faint stars involved/involving';
		result = getDescription('vF;vS;vlE;2 vf st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; small stars + nebula';
		result = getDescription('vF;vS;S st + neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; considerably elongated/extended = 7831 ?';
		result = getDescription('eF;vS;cE = 7831?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; star of 10th magnitude attached';
		result = getDescription('F;*10 att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; elongated/extended; bright stars near';
		result = getDescription('eF;vS;E;B * nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; little/long elongated/extended; 3 very faint stars around';
		result = getDescription('eeF;lE;3 vF st around');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended';
		result = getDescription('eF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; elongated/extended 0 degrees';
		result = getDescription('pB;pL;E 0 degrees');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round';
		result = getDescription('vF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; star of 12th magnitude north preceding 45 arcseconds';
		result = getDescription('eF;* 12 np 45\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely following; pretty large; round; very difficult';
		result = getDescription('eef;pL;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; 2 north diameter of 3';
		result = getDescription('eeF;S;R;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; brighter middle';
		result = getDescription('pF;pS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; large; 3 or 4 stars + nebula';
		result = getDescription('eF;L;3 or 4 st+neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; between 2 faint stars';
		result = getDescription('eF;vS;R;bet 2 F st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated/extended; last of 6';
		result = getDescription('eF;S;E;last of 6');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; brighter middle';
		result = getDescription('vF;S;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long brighter middle';
		result = getDescription('vF;S;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; pretty suddenly brighter middle';
		result = getDescription('F;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; south preceding NGC 83';
		result = getDescription('eeF;sp NGC 83');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; stellar';
		result = getDescription('eF;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended; binuclear; 3 bright stars near';
		result = getDescription('E;biN;3 B st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; stars and nebula';
		result = getDescription('eF;st & neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; considerably large; round';
		result = getDescription('eeF;cL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; little/long brighter middle';
		result = getDescription('eF;vS;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; little/long elongated/extended';
		result = getDescription('vF;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; star of 13th magnitude south preceding';
		result = getDescription('vF;vS;* 13 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long brighter middle';
		result = getDescription('vF;S;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; gradually brighter middle';
		result = getDescription('F;vS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; pretty suddenly little/long brighter middle';
		result = getDescription('pF;pL;R;pslbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; 3 stars near';
		result = getDescription('vF;S;3 st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually brighter middle';
		result = getDescription('vF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; gradually brighter middle star of 14th magnitude; star of 12th magnitude south preceding';
		result = getDescription('vF;vS;R;gbM*14;*12 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar; star of 8th magnitude; 17 degrees; 4 arcminutes';
		result = getDescription('vF;vS;stell;*8;17 degrees;4\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; stellar; NGC 160 south preceding';
		result = getDescription('eF;stellar;NGC 160 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; double or binuclear; star of 6th magnitude north following 4 arcminutes';
		result = getDescription('F;pL;D or biN;*6 nf 4\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; irregular resolvable (mottled not resolved); very faint stars attached';
		result = getDescription('eF;eS;irr;vF * att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; round; gradually brighter middle';
		result = getDescription('pF;vS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small';
		result = getDescription('eF;eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; much elongated/extended 165 degrees; very gradually very much brighter middle';
		result = getDescription('vB;vL;mE 165 degrees;vgvmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very large; much elongated/extended 0 degrees';
		result = getDescription('vF;vL;mE 0 degrees');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; gradually very little/long brighter middle; round';
		result = getDescription('pF;pS;gvlbM;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; gradually brighter middle';
		result = getDescription('eF;vS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very very bright; large; round; pretty suddenly much brighter middle Nucleus or to a Nucleus';
		result = getDescription('vvB;L;R;psmbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'a magnificent or otherwise interesting object most extremely bright; extremely/excessively large; very much elongated/extended';
		result = getDescription('!!!eeB;eL;vmE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; star of 13th magnitude suddenly/south 20 arcseconds';
		result = getDescription('eF;S;R;* 13 s 20\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; fainter of 2';
		result = getDescription('eF;S;R;fainter of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; smaller of 2';
		result = getDescription('vF;S;R;smaller of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; little/long brighter middle';
		result = getDescription('F;vS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; gradually brighter middle; star of 10th magnitude preceding';
		result = getDescription('F;vS;R;gbM;* 10 p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; pretty much brighter middle; resolvable (mottled not resolved); double star preceding';
		result = getDescription('pB;S;R;pmbM;r;** p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; very faint stars close';
		result = getDescription('eF;S;vf * close');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; little/long elongated/extended';
		result = getDescription('eF;pS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; very difficult';
		result = getDescription('eF;vS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; little/long compressed';
		result = getDescription('Cl;L;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; star of 15th magnitude following 30 arcseconds';
		result = getDescription('eF;S;R;*15 f 30\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; suddenly/south very little/long brighter middle';
		result = getDescription('pF;S;R;svlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; little/long elongated/extended; double stars close following';
		result = getDescription('eeF;pS;lE;D * close f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; much elongated/extended; bright star south following';
		result = getDescription('eF;pL;mE;B star sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; stars near';
		result = getDescription('eF;eS;R;* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; very little/long elongated/extended; gradually brighter middle; 4 small stars near';
		result = getDescription('F;vS;vlE;gbM;4 S st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; round; gradually brighter middle';
		result = getDescription('pB;cL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; little/long brighter middle; star of 11th magnitude attached';
		result = getDescription('vF;vS;R;lbM;* 11 att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; very suddenly/south brighter middle';
		result = getDescription('F;S;vsbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small';
		result = getDescription('S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; very little/long elongated/extended; very gradually little/long brighter middle';
		result = getDescription('vF;pS;vlE;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; stellar';
		result = getDescription('F;S;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'double nebula; very faint; very small; position 90 degree; distance or distant ars 30th magnitude and fainter arcseconds';
		result = getDescription('Dneb;vF;vS; pos 90 deg; dist 30\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar; (= 523)';
		result = getDescription('stellar;(=523)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; little/long brighter middle';
		result = getDescription('F;pL;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; suddenly/south brighter middle; preceding of 2';
		result = getDescription('pB;vS;sbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; gradually brighter middle; following of 2';
		result = getDescription('pB;pL;gbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; difficult';
		result = getDescription('eF;diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended; very gradually little/long brighter middle; star of 13th magnitude near';
		result = getDescription('vF;S;E;vglbM;*13 nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round';
		result = getDescription('eF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; double stars near small';
		result = getDescription('eF;pS;R;D* nr S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; gradually brighter middle';
		result = getDescription('vF;vS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; little/long brighter middle; bright stars south following';
		result = getDescription('eF;pS;R;lbM;B* sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; (partially resolved some stars seen)';
		result = getDescription('F;vS;(rr)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle';
		result = getDescription('vF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; little/long brighter middle';
		result = getDescription('eF;vS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; much elongated/extended; little/long brighter middle; several stars involved/involving';
		result = getDescription('vF;pL;mE;lbM;sev * inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; much brighter middle';
		result = getDescription('F;S;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; gradually brighter middle';
		result = getDescription('pF;pS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; stellar';
		result = getDescription('F;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; stellar';
		result = getDescription('vF;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; south preceding 703';
		result = getDescription('eF;vS;R;sp 703');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; 2 north diameter of 4';
		result = getDescription('vF;vS;R;2nd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; 1 stars of 4';
		result = getDescription('vF;vS;R;1st of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; 3 resolvable (mottled not resolved) diameter of 4';
		result = getDescription('vF;vS;R;3rd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; brighter middle; 4th of 4';
		result = getDescription('F;pL;bM;4th of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; between 2 stars; group south preceding';
		result = getDescription('vF;pS;bet 2*;group sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; 2 stars small';
		result = getDescription('vF;pS;2*S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; among pretty bright stars';
		result = getDescription('vF;R;am pB stars');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; 2 stars 13 preceding and north preceding';
		result = getDescription('F;vS;R;2*13 p & np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; star of 15th magnitude south following 1 arcminutes';
		result = getDescription('vF;pS;*15 sf 1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large';
		result = getDescription('eF;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint stars involved/involving very faint; very small; round; nebula';
		result = getDescription('vF*Inv vF;vS;R;neby');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very very large; rich; stars large and small; compressed';
		result = getDescription('Cl;vvL;Ri;*L & S;C');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; gradually much brighter middle';
		result = getDescription('pB;pL;R;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very small; round';
		result = getDescription('Cl;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended; several stars near';
		result = getDescription('vF;pS;lE;sev * nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round; suddenly/south brighter middle; stars near';
		result = getDescription('vF;S;iR;sbM;* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; irregular round; double stars close following';
		result = getDescription('eF;pS;iR;D* close f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; elongated in position angle 45 degrees; brighter middle';
		result = getDescription('eF;pL;E45;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; little/long elongated/extended; much brighter middle';
		result = getDescription('pB;cL;lE;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; irregular round; double stars following 15 arcseconds';
		result = getDescription('pB;S;iR;D* f 15\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended';
		result = getDescription('vF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; much brighter middle Nucleus or to a Nucleus = star of 13th magnitude; 14';
		result = getDescription('pB;vS;mbMN=*13;14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; gradually brighter middle';
		result = getDescription('eF;vS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round';
		result = getDescription('vF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; irregular figure; stellar';
		result = getDescription('vF;iF;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; very large; very much elongated/extended 22';
		result = getDescription('B;vL;vmE22');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; little/long elongated/extended';
		result = getDescription('eF;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - 2 galaxies faint; pretty small; round; north bright middle; 6 others very faint; small at 165X';
		result = getDescription('13\'\'-2 gals F;pS;R;nBM;6 others vF;S at 165X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; irregular elongated/extended';
		result = getDescription('eF;iE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; very small stars involved/involving';
		result = getDescription('vF;vS;vS* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; stellar';
		result = getDescription('vF;pS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; brighter middle';
		result = getDescription('eF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; brighter middle';
		result = getDescription('F;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; little/long brighter middle';
		result = getDescription('eF;vS;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; diffused';
		result = getDescription('eF;pL;dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually suddenly/south bright middle';
		result = getDescription('vF;S;R;gsBM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; 1 or 2 extremely/excessively faint stars near';
		result = getDescription('eF;eS;R;1or2 eF* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; bright stars north following';
		result = getDescription('eF;eS;R;B* nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint stars slightly nebula';
		result = getDescription('vF* slightly neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually little/long brighter middle';
		result = getDescription('F;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; stars from 9th to 15th magnitude';
		result = getDescription('Cl;pRi;*9...15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - extremely/excessively faint; pretty small; elongated/extended 1.5X1; position angle 0; north bright middle; star of 10th magnitude much elongated/extended tip';
		result = getDescription('13\'\'-eF;pS;E 1.5X1; PA 0; nBM; *10m E tip');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; south preceding of 2';
		result = getDescription('vF;pS;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; north following of 2';
		result = getDescription('F;S;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint spiral; faint stellar nucleus';
		result = getDescription('vF spiral;F stellar nucleus');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '1637; pretty small; diffused';
		result = getDescription('1637;pS;dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; irregular round';
		result = getDescription('eF;S;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; resolvable (mottled not resolved)';
		result = getDescription('eF;vS;R;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; very small stars in centre';
		result = getDescription('vF;S;R;vS* in centre');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle';
		result = getDescription('F;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; large; much elongated/extended 164; very little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cF;L;mE164;vlbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'a magnificent or otherwise interesting object planetary or annular nebula; very bright; pretty small; round; blue';
		result = getDescription('!!! Planetary or annular neb;vB;pS;R;blue');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; little/long compressed; stars from 7th to 11th magnitude';
		result = getDescription('Cl;P;lC;st 7...11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; star of 9th magnitude - 10 preceding; very near';
		result = getDescription('eF;S;R;*9-10 p;vnr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'inner regions completely Black--MCG';
		result = getDescription('Inner Regions Completely Black--MCG');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'inner regions very Black--MCG';
		result = getDescription('Inner Regions Very Black--MCG');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended; pretty suddenly brighter middle';
		result = getDescription('F;S;lE;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; star of 8th magnitude following';
		result = getDescription('eF;pS;*8 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object very faint; very large; very gradually very suddenly/south brighter middle Nucleus or to a Nucleus 4 arcseconds; 19 s. 5 diameter';
		result = getDescription('! vF;vL;vgvsbMN 4\'\';19s.5 d');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; star of 12th magnitude attached north following';
		result = getDescription('F;S;R;*12 att nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; extremely/excessively elongated/extended; star of 7th magnitude north preceding; north preceding of 2';
		result = getDescription('pB;pS;eE;*7 np; np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round';
		result = getDescription('pB;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; round; south preceding of 2';
		result = getDescription('pF;R;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually brighter middle; north following of 2';
		result = getDescription('pF;S;R;gbM;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; very gradually much brighter middle; star of 11th magnitude attached small';
		result = getDescription('pB;S;R;vgmbM;*11 att S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably large; round';
		result = getDescription('vF;cL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; double stars attached';
		result = getDescription('vF;S;R;D* att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; star of 13th magnitude attached south following';
		result = getDescription('vF;S;R;*13 att sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; pretty much brighter middle; between 2 stars';
		result = getDescription('pB;S;R;pmbM;bet 2 st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; very small stars involved/involving';
		result = getDescription('pF;pS;R;vS st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; elongated/extended; very gradually very little/long brighter middle';
		result = getDescription('F;L;E;vgvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; gradually pretty much brighter middle';
		result = getDescription('pB;pS;R;gpmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round';
		result = getDescription('eF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually little/long brighter middle';
		result = getDescription('F;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; large; considerably elongated/extended';
		result = getDescription('eF;L;cE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; large; Triangulum 2 stars 8th magnitude';
		result = getDescription('eF;L;Tri 2* 8m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; gradually brighter middle';
		result = getDescription('F;pS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; very gradually brighter middle';
		result = getDescription('cF;S;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended';
		result = getDescription('vF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; elongated/extended; star of 8th magnitude - 9 south preceding';
		result = getDescription('vF;pS;E;*8-9 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; 2 bright stars following';
		result = getDescription('eF;S;R;2 B st f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; large; much elongated/extended 51; very gradually little/long brighter middle';
		result = getDescription('cB;L;mE 51;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very large; very little/long elongated/extended; pretty suddenly little/long brighter middle Nucleus or to a Nucleus';
		result = getDescription('pB;vL;vlE;pslbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; very gradually much brighter middle';
		result = getDescription('vF;pS;R;vgmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty much elongated/extended; gradually little/long brighter middle; star of 11th magnitude north preceding';
		result = getDescription('F;pmE;glbM;*11 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; star of 11th magnitude north 90 arcseconds';
		result = getDescription('vF;*11 n 90\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round; very gradually very little/long brighter middle';
		result = getDescription('eF;pL;R;vgvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; very gradually pretty suddenly brighter middle; star of 13th magnitude; 45';
		result = getDescription('pB;pL;R;vgpsbM;*13;45');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; pretty suddenly brighter middle; 1 stars of 4';
		result = getDescription('vF;vS;R;psbM;1st of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; pretty suddenly little/long brighter middle; 2 north diameter of 4';
		result = getDescription('cF;S;R;pslbM;2nd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very very faint; very small; round; pretty suddenly little/long brighter middle; 3 resolvable (mottled not resolved) diameter of 4';
		result = getDescription('vvF;vS;R;pslbM;3rd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; 1 stars of 4';
		result = getDescription('eF;vS;R;1st of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; 2 north diameter of 4';
		result = getDescription('F;S;R;2nd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle; 3 resolvable (mottled not resolved) diameter of 4';
		result = getDescription('F;S;R;bM;3rd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; elongated/extended; pretty much brighter middle; 4th of 4';
		result = getDescription('pF;S;E;pmbM;4th of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; pretty suddenly little/long brighter middle; 4th of 4';
		result = getDescription('vF;vS;R;pslbM;4th of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; very little/long elongated/extended; pretty suddenly little/long brighter middle';
		result = getDescription('F;L;vlE;pslbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; star of 8th magnitude preceding';
		result = getDescription('F;S;*8 p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; double stars north following';
		result = getDescription('F;S;R;D* nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; elongated/extended; gradually little/long brighter middle';
		result = getDescription('eF;pL;E;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; much elongated/extended; star of 15th magnitude attached';
		result = getDescription('eF;vS;mE;*15 att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; much elongated/extended 0; very suddenly/south very much brighter middle; 1 stars of 3';
		result = getDescription('pF;S;mE 0;vsvmbM;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; very little/long elongated/extended; pretty suddenly brighter middle; 2 north diameter of 3';
		result = getDescription('F;S;vlE;psbM;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; very little/long elongated/extended; very small stars attached; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('cF;vS;vlE;vS* att;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; gradually little/long brighter middle';
		result = getDescription('cF;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; star of 6th magnitude - 7 south following';
		result = getDescription('F;S;R;*6-7 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; elongated/extended; gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;E;gbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very faint; 4 arcminutes diameter; 3 faint stars in nebulosity';
		result = getDescription('Cl;vF;4\' diam;3 F stars in neby?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; brighter middle';
		result = getDescription('eF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; little/long elongated/extended; gradually little/long brighter middle; among stars';
		result = getDescription('F;cS;lE;glbM;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; very gradually brighter middle';
		result = getDescription('F;pL;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; irregular round; very gradually brighter middle; star of 14th magnitude';
		result = getDescription('pF;L;iR;vgbM;*14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small star of 9th magnitude near';
		result = getDescription('vF;vS*9 nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; very gradually very little/long brighter middle';
		result = getDescription('vF;pL;vgvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; gradually little/long brighter middle; star of 13th magnitude south preceding';
		result = getDescription('cF;S;R;glbM;*13 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; gradually little/long brighter middle';
		result = getDescription('vF;vS;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds 150X extremely/excessively faint; pretty small; difficult';
		result = getDescription('13\'\' 150X  eF; pS; difficult');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; little/long compressed; irregular figure';
		result = getDescription('Cl;pRi;lC;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster';
		result = getDescription('Cl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; poor';
		result = getDescription('Cl;vL;P');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; poor; stars 12th magnitude and fainter th magnitude and fainter';
		result = getDescription('Cl;vL;P;st12...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; little/long compressed';
		result = getDescription('Cl;P;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; pretty large; little/long bright middle; elongated/extended 1.8X1 in position angle 165; faint stars involved/involving; use UHC';
		result = getDescription('13\'\'-pF; pL; lBM; E 1.8X1 in PA 165; F * invl; use UHC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'planetary; stellar';
		result = getDescription('Planetary;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'large; little/long compressed; stars large and small';
		result = getDescription('L;lC;st L&S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small';
		result = getDescription('pB;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'Seen in 11X80 finder; no stars in 13 arcseconds; dark spot!';
		result = getDescription('Seen in 11X80 finder; No * in 13\'\'; DARK SPOT!');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '6 arcseconds not very prominent on great night';
		result = getDescription('6\'\' not very prominent on great night');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; very rich; preceding compressed; stars from 12th to 14th magnitude';
		result = getDescription('Cl;vL;vRi;pC;*12...14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; rich; little/long compressed; stars from 11th to 12th magnitude';
		result = getDescription('Cl;S;Ri;lC;*11...12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; very gradually little/long brighter middle (Auw. 44)';
		result = getDescription('pB;pL;vglbM (Auw. 44)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; round; very very little/long bright middle; resolvable (mottled not resolved)';
		result = getDescription('vF;L;R;vvlBM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; little/long compressed';
		result = getDescription('Cl;P;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar';
		result = getDescription('stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; little/long compressed; stars 10th magnitude and fainter th to 15th magnitude';
		result = getDescription('Cl;P;lC;st10...15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; elongated/extended; Ill-defined disc';
		result = getDescription('S;E;Ill-defined disc');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively small; stellar';
		result = getDescription('eS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; round; very suddenly/south brighter middle disc';
		result = getDescription('F;L;R;vsbM disc');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '6 arcseconds not much; mediocre contrast with background';
		result = getDescription('6\'\' not much; mediocre contrast with background');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; extremely/excessively small; stellar = 9.5 magnitude';
		result = getDescription('B;eS;stell=9.5m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; rich; between 2 stars 9';
		result = getDescription('Cl;Ri;bet 2*9');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - very faint; small; round; north bright middle at 150X; light green tiny disk';
		result = getDescription('13\'\'-vF; S; R; nBM at 150X; light green tiny disk');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar';
		result = getDescription('stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; small; irregular round; well resolved clearly consisting of stars';
		result = getDescription('cB;S;iR;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - extremely/excessively faint; pretty small; elongated/extended; north bright middle at 165X; 2 very faint stars involved';
		result = getDescription('13\'\'-eF;pS;E;nBM at 165X; 2 vF* invol');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar';
		result = getDescription('stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; very small; round; bright middle at 165X; averted vision helps';
		result = getDescription('13\'\'-pF;vS;R;BM at 165X; averted viz helps');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '4 arcseconds - The arcminutes elongated/extended arcminutes nebula; very prominent; west end no stars';
		result = getDescription('4\'\'-The \'E\' nebula; very prominent; west end no *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '4 arcseconds dark curved arc in rich field';
		result = getDescription('4\'\' dark curved arc in rich field');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pF;pL;R;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round';
		result = getDescription('F;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - faint; pretty small; round; little/long bright middle; low surface brightness';
		result = getDescription('13\'\'-F; pS; R; lBM; low surface brightness');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; little/long compressed';
		result = getDescription('Cl;P;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; poor';
		result = getDescription('Cl;S;P');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; little/long compressed';
		result = getDescription('Cl;P;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; poor';
		result = getDescription('Cl;S;P');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint nebula; among stars';
		result = getDescription('F neb;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; considerably large; elongated/extended; preceding rich; stars 13th magnitude and fainter th magnitude and fainter';
		result = getDescription('Cl;cL;E;pRi;st13...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small cluster; star of 10th magnitude preceding 1 suddenly/south; suddenly/south 1 arcminutes 29 arcseconds';
		result = getDescription('vS Cl;*10p1s;s1\'29\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; very much compressed; stars 19th magnitude and fainter';
		result = getDescription('Cl;S;vmC;st19');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended';
		result = getDescription('F;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round';
		result = getDescription('pF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 14th magnitude much in faint; very small; round nebula';
		result = getDescription('*14m in F;vS;R neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round';
		result = getDescription('pB;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round';
		result = getDescription('vF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; elongated in position angle 176 degrees; preceding of 2';
		result = getDescription('vF;pL;E176;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; south following of 2';
		result = getDescription('vF;vS;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; little/long elongated/extended; little/long brighter middle';
		result = getDescription('eF;lE;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; round; much brighter middle';
		result = getDescription('pF;vS;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; irregular round';
		result = getDescription('eF;vS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '11 arcseconds - extremely/excessively faint; small; elongated/extended 1.8X1; very little/long bright middle at 125X';
		result = getDescription('11\'\'-eF; S; E 1.8X1; vlBM at 125X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; brighter middle';
		result = getDescription('cF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula star of 13th magnitude much';
		result = getDescription('neb *13m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; brighter middle; star of 14th magnitude south following 0.5 arcminutes';
		result = getDescription('F;vS;R;bM;*14 sf 0.5\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; star of 10th magnitude following 50 arcseconds';
		result = getDescription('eF;vS;*10f50\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle; faint stars involved/involving';
		result = getDescription('F;S;R;gbM;F* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; resolvable';
		result = getDescription('vF;S;resolvable');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; (= 6976)';
		result = getDescription('vF;S;(=6976)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; irregular round';
		result = getDescription('eF;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round';
		result = getDescription('vF;S;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; resolvable';
		result = getDescription('vF;S;resolvable');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; gradually much compressed middle; well resolved clearly consisting of stars';
		result = getDescription('pB;pL;R;gmCM;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; extremely/excessively poor; very little/long compressed; no nebula';
		result = getDescription('Cl;eP;vlC;No neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated in position angle 0 degrees';
		result = getDescription('eF;S;E0');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; poor; (nebula)';
		result = getDescription('Cl;S;P;(neb)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'a magnificent or otherwise interesting object very bright; small; elliptic';
		result = getDescription('!!! vB;S;elliptic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round; resolvable (mottled not resolved)';
		result = getDescription('eF;pL;R;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; binuclear; preceding following';
		result = getDescription('eF;vS;biN;pf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; gradually brighter middle; double star near';
		result = getDescription('vF;R;gbM;** nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; suddenly/south brighter middle';
		result = getDescription('vF;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; stellar';
		result = getDescription('vF;S;R;stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint';
		result = getDescription('F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; much brighter middle; star of 14th magnitude suddenly/south';
		result = getDescription('F;S;R;mbM;*14s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively large; diffused; elongated/extended preceding following; north of middle 2';
		result = getDescription('eF;eL;dif;E pf;n of M2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/very remarkable object bright; very large; gradually pretty much brighter middle; well resolved clearly consisting of stars; stars extremely/excessively small';
		result = getDescription('!!B;vL;gpmbM;rrr;st eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; stellar';
		result = getDescription('vF;S;R;stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; brighter middle';
		result = getDescription('eF;eS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long elongated/extended';
		result = getDescription('vF;S;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; very little/long brighter middle';
		result = getDescription('vF;vS;R;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; round; 4 very faint stars north';
		result = getDescription('eF;R;4 vF st n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; brighter middle star of 13th magnitude';
		result = getDescription('eF;bM *13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; very gradually little/long brighter middle; star of 10th magnitude following';
		result = getDescription('F;pS;R;vglbM;*10 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably large; elongated in position angle 124 degrees; very gradually brighter middle';
		result = getDescription('vF;cL;E124;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; irregular round; brighter middle Nucleus or to a Nucleus; double stars preceding 36 suddenly/south';
		result = getDescription('vF;pS;iR;bMN;D* p 36s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; stellar';
		result = getDescription('eF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; stellar';
		result = getDescription('eF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; little/long brighter middle; preceding of 2';
		result = getDescription('vF;S;R;lbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; elongated in position angle 90 degrees; little/long brighter middle';
		result = getDescription('vF;pL;E90;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; much elongated/extended 64; between 3 stars; easily resolvable';
		result = getDescription('pB;pL;mE64;bet 3*;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular round; very gradually little/long brighter middle; following of 2';
		result = getDescription('vF;pL;iR;vglbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended';
		result = getDescription('F;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; elongated/extended; little/long brighter middle';
		result = getDescription('eF;pS;E;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; stellar';
		result = getDescription('eF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; stellar';
		result = getDescription('eF;S;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended';
		result = getDescription('vF;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; little/long elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('pB;lE;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; very little/long elongated/extended; gradually brighter middle; star of 10th magnitude north 3 arcminutes';
		result = getDescription('eF;vS;vlE;gbM;*10 n 3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle';
		result = getDescription('vF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long elongated/extended; very gradually brighter middle; star of 13th magnitude north';
		result = getDescription('vF;S;vlE;vgbM;*13 n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; round; little/long brighter middle; bright double stars preceding 13 suddenly/south';
		result = getDescription('pF;vS;R;lbM;B D* p 13s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; gradually pretty much brighter middle';
		result = getDescription('F;pS;R;gpmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; easily resolvable';
		result = getDescription('F;S;R;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; star of 11th magnitude preceding 4.5 arcminutes';
		result = getDescription('vF;vS;R;*11 p 4.5\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '3 faint stars in faint nebula';
		result = getDescription('3F st in F neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; little/long elongated/extended';
		result = getDescription('F;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; irregular round';
		result = getDescription('eF;pS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; large; much elongated/extended 30; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;L;mE30;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; almost stellar';
		result = getDescription('F;vS;R;alm stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; gradually little/long brighter middle';
		result = getDescription('eF;pS;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; stellar';
		result = getDescription('vF;eS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; little/long elongated/extended; resolvable (mottled not resolved); double stars involved/involving';
		result = getDescription('cF;cS;lE;r;D* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula star of 1th magnitude arcminutes distance or distant from NGC 7284';
		result = getDescription('neb * 1\' dist from NGC 7284');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; slightly nebulous double stars';
		result = getDescription('eF;slightly nebs D*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object; pretty faint; very large; elongated/extended or binuclear';
		result = getDescription('!;pF;vL;E or biN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended; little/long brighter middle';
		result = getDescription('vF;pS;lE;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular round';
		result = getDescription('vF;pL;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; elongated/extended; very gradually little/long brighter middle';
		result = getDescription('vF;cS;E;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; very suddenly/south brighter middle supernova';
		result = getDescription('F;pS;R;vsbMSN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; gradually little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;pL;R;glbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; round';
		result = getDescription('pB;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;pS;R;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; elongated/extended; little/long brighter middle';
		result = getDescription('pF;pS;E;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; round';
		result = getDescription('pF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; elongated in position angle 175 degrees; binuclear; bright Nucleus or to a Nucleus';
		result = getDescription('eF;vS;E175;bi-N;BN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pF;pS;R;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; pretty suddenly brighter middle';
		result = getDescription('F;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; pretty much elongated/extended; brighter middle Nucleus or to a Nucleus';
		result = getDescription('pF;vS;pmE;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; round; gradually brighter middle Nucleus or to a Nucleus; star of 11th magnitude north following 4 arcminutes';
		result = getDescription('vF;eS;R;gbMN;*11 nf 4\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; little/long brighter middle';
		result = getDescription('vF;pL;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; very little/long elongated/extended; very gradually much brighter middle; star of 12th magnitude';
		result = getDescription('pB;S;vlE;vgmbM;*12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large';
		result = getDescription('vF;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; gradually brighter middle';
		result = getDescription('eF;vS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; round; suddenly/south brighter middle star of 13th magnitude; stars north preceding';
		result = getDescription('cF;cS;R;sbM *13;*np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; little/long elongated/extended; very gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;pL;lE;vgbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; little/long elongated/extended 120; much brighter middle';
		result = getDescription('pB;pS;lE120;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large';
		result = getDescription('eF;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended';
		result = getDescription('F;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; pretty much elongated/extended; very gradually brighter middle';
		result = getDescription('F;pL;pmE;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very little/long elongated/extended; star of 10th magnitude preceding 4 arcminutes';
		result = getDescription('eF;vlE;*10 p 4\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; irregular round; star of 10th magnitude preceding';
		result = getDescription('vF;pS;iR;*10 p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; very little/long elongated/extended; suddenly/south much brighter middle; easily resolvable; north of 2';
		result = getDescription('F;vS;vlE;smbM;er;n of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; very little/long elongated/extended; suddenly/south much brighter middle; easily resolvable; suddenly/south of 2';
		result = getDescription('F;vS;vlE;smbM;er;s of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 11.12 magnitude in nebula';
		result = getDescription('*11.12 in neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; very small; star of 11th magnitude close north preceding';
		result = getDescription('B;vS;*11 close np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; little/long elongated/extended 85; suddenly/south brighter middle; 3 stars 10th magnitude and fainter preceding 20 suddenly/south';
		result = getDescription('eF;vS;lE85;sbM;3 st 10 p 20s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; gradually brighter middle';
		result = getDescription('vF;vS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; very little/long brighter middle';
		result = getDescription('vF;S;R;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; large; between 2 double stars';
		result = getDescription('eF;L;bet 2D st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; stellar';
		result = getDescription('eF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round';
		result = getDescription('vF;S;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; elongated in position angle 290 degrees; (faint double stars )';
		result = getDescription('eF;vS;E290;(F D*)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; between 2 stars';
		result = getDescription('F;pS;bet 2 st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; irregular round; star of 10th magnitude north following following 3 arcminutes';
		result = getDescription('eF;vS;iR;*10 nff 3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; irregular round; brighter north preceding; star of 10th magnitude preceding 4 arcminutes';
		result = getDescription('eF;S;iR;b np;*10 p 4\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended 0; little/long brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;pS;lE0;lbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; suddenly/south much brighter middle';
		result = getDescription('F;S;smbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; irregular round; gradually brighter middle';
		result = getDescription('pB;pS;iR;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; pretty suddenly much brighter middle';
		result = getDescription('cF;S;R;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably large; pretty much elongated/extended 0';
		result = getDescription('pF;cL;pmE0');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; elongated in position angle 260 degrees; star of 9th magnitude north 3.6 arcminutes';
		result = getDescription('vF;vS;E260;*9 n 3.6\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;vS;R;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; stellar';
		result = getDescription('eF;S;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula; star of 9th magnitude following 18 suddenly/south; 73 arcseconds suddenly/south';
		result = getDescription('neb;*9 f 18s;73\'\'s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; little/long brighter middle';
		result = getDescription('pF;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably large; elongated in position angle 12 degrees; very gradually brighter middle';
		result = getDescription('pF;cL;E12;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably large; elongated/extended; gradually much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cB;cL;E;gmbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; irregular round';
		result = getDescription('eF;pL;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint';
		result = getDescription('eeF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; irregular round; much brighter middle';
		result = getDescription('pB;pL;iR;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; elongated/extended';
		result = getDescription('pB;pL;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; gradually brighter middle; between 2 stars 12th magnitude and fainter';
		result = getDescription('eF;eS;gbM;bet 2 st 12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; irregular round; suddenly/south brighter middle; double star of 10th magnitude north following 50 suddenly/south';
		result = getDescription('eF;vS;iR;sbM;D* 10 nf 50s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; little/long brighter middle; bright stars north';
		result = getDescription('vF;S;R;lbM;B* n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; faint stars following';
		result = getDescription('eF;vS;R;F* f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; gradually brighter middle; star of 10th magnitude preceding 8 arcminutes';
		result = getDescription('F;vS;R;gbM;* 10 p 8\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; little/long elongated/extended; gradually brighter middle';
		result = getDescription('eF;vS;lE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + round';
		result = getDescription('E+R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very large; very little/long elongated/extended; bright stars involved/involving';
		result = getDescription('F;vL;vlE;B* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; little/long rich; little/long compressed; faint nebula involved/involving';
		result = getDescription('Cl;vL;lRi;lC;F neb inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; in Milky Way';
		result = getDescription('Cl;in Milky Way');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; extremely/excessively little/long compressed middle; stars 11th magnitude and fainter th to 12th magnitude';
		result = getDescription('Cl;pRi;elCM;st11..12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; rich; little/long compressed middle; stars 9th magnitude and fainter th to 12th magnitude';
		result = getDescription('Cl;L;Ri;lCM;st9...12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; round; very gradually little/long brighter middle; star of 4th magnitude preceding 79 suddenly/south';
		result = getDescription('pF;R;vglbM;*4p79s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; round; gradually little/long brighter middle; partially resolved some stars seen';
		result = getDescription('pB;cL;R;glbM;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; little/long rich; little/long compressed; stars from 8th to 12th magnitude';
		result = getDescription('Cl;L;lRi;lC;*8...12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; triangular; stars 13th magnitude and fainter';
		result = getDescription('Cl;S;triangular;st13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar';
		result = getDescription('stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very large; very little/long elongated/extended; among stars; 2 stars involved/involving';
		result = getDescription('F;vL;vlE;am st;2* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; gradually little/long brighter middle';
		result = getDescription('vF;vS;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; round';
		result = getDescription('pB;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; very little/long elongated/extended; gradually little/long brighter middle';
		result = getDescription('vF;vS;vlE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding compressed';
		result = getDescription('Cl;pC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large';
		result = getDescription('pF;L');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; very gradually much brighter middle; well resolved clearly consisting of stars';
		result = getDescription('B;L;vgmbM;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; very large; rich; stars 10th magnitude and fainter..';
		result = getDescription('B;vL;Ri;st 10..');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar; gaseous spectrum-Pickering';
		result = getDescription('stellar;gaseous spectrum-Pickering');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; between double stars and stars';
		result = getDescription('eF;pS;R;bet D*&*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; elongated/extended; little/long brighter middle; star of 11th magnitude north following 3 arcminutes';
		result = getDescription('pF;pL;E;lbM;*11 nf 3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; little/long brighter middle; south preceding of 2';
		result = getDescription('vF;S;R;lbM;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; north following of 2';
		result = getDescription('eeF;S;R;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended at 100 degrees; brighter middle';
		result = getDescription('vF;pS;lE at 100 degrees;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; irregular round; much brighter middle; preceding of 2';
		result = getDescription('pB;S;iR;mbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; irregular round; much brighter middle; following of 2';
		result = getDescription('pB;S;iR;mbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; 2 stars 14 preceding 90 arcseconds';
		result = getDescription('eF;2*14p90\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably large; very gradually little/long brighter middle';
		result = getDescription('F;cL;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; between 2 stars 15';
		result = getDescription('F;S;R;bet 2*15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; stellar';
		result = getDescription('vS; stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very much elongated/extended; star of 14th magnitude following suddenly/south';
		result = getDescription('pB;vmE;*14f s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably large; elongated/extended; much brighter middle';
		result = getDescription('F;cL;E;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint star in very faint; very small nebula';
		result = getDescription('vF*in vF;vS neby');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; bright stars following';
		result = getDescription('eF;S;R;B* f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; round; very faint stars following';
		result = getDescription('eF;R;vF* f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; Beta Aries north';
		result = getDescription('vF;vS;R;Beta ARI n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; south preceding 772';
		result = getDescription('vF;S;R;sp 772');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; considerably large; round; gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('B;cL;R;gbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; stellar';
		result = getDescription('vF;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large';
		result = getDescription('F;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; stellar';
		result = getDescription('eF;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; star of 11th magnitude 75 degree';
		result = getDescription('eF;S;R;*11 75 deg');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; stellar';
		result = getDescription('vF;cS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round; gradually little/long brighter middle; star of 10th magnitude preceding';
		result = getDescription('vF;S;iR;glbM;*10p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle';
		result = getDescription('vF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; 2 stars near';
		result = getDescription('eF;vS;R;2* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; brighter middle';
		result = getDescription('F;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; very little/long elongated/extended; suddenly/south very much brighter middle; stars north preceding';
		result = getDescription('pB;vS;vlE;svmbM;* np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; stellar; 2 very faint stars south preceding; suddenly/south of NGC 871';
		result = getDescription('eF;stellar;2 vf * sp;s of NGC 871');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; elongated/extended; star of 10th magnitude south following 5 arcminutes';
		result = getDescription('vF;vS;E;*10 sf 5\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; 107 arcseconds south preceding NGC 877';
		result = getDescription('eF;S;R;107\'\'sp NGC 877');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; little/long elongated/extended; pretty gradually brighter middle; star of 9th magnitude 4 arcminutes south following';
		result = getDescription('pF;pL;lE;pgbM;*9 4\' sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; round; gradually brighter middle; star of 16th magnitude near';
		result = getDescription('eF;R;gbM;*16 nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar';
		result = getDescription('vF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round';
		result = getDescription('eF;eS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; little/long brighter middle';
		result = getDescription('vF;vS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; stellar';
		result = getDescription('eF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; round; star of 10th magnitude south following 3 arcminutes';
		result = getDescription('pF;L;R;*10 sf 3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; brighter middle';
		result = getDescription('F;S;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; irregular round';
		result = getDescription('eF;vS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; stellar';
		result = getDescription('eF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; irregular round; very gradually brighter middle; NGC 932 south following 1 arcminutes';
		result = getDescription('eF;S;iR;vgbM; NGC 932 sf 1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended; 3 stars involved/involving';
		result = getDescription('F;S;lE;3* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; stars following 6 suddenly/south';
		result = getDescription('pB;pS;R;*f6s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; little/long brighter middle; star of 11th magnitude south following';
		result = getDescription('pB;S;R;lbM;*11 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; gradually brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;S;gbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; 4 faint stars near';
		result = getDescription('vF;vS;4F* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; little/long elongated/extended; gradually much brighter middle; 3 stars suddenly/south';
		result = getDescription('pB;cL;lE;gmbM;3*s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; round; brighter middle';
		result = getDescription('vF;eS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; pretty suddenly brighter middle';
		result = getDescription('F;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds 100X very faint; pretty large; very elongated/extended 135 degrees; low surface brighter resolvable (mottled not resolved)';
		result = getDescription('13\'\' 100X  vF; pL; vE 135 degrees; low surf br');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; much elongated/extended; stars small';
		result = getDescription('pF;pS;mE;*S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; irregular round; brighter middle; stars involved/involving';
		result = getDescription('F;pS;iR;bM;st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; little/long elongated/extended; brighter middle; star of 11th magnitude north following 1 arcminutes';
		result = getDescription('pF;S;lE;bM;*11 nf 1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; much elongated/extended';
		result = getDescription('F;S;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; irregular elongated/extended';
		result = getDescription('vF;iE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; little/long brighter middle';
		result = getDescription('F;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended';
		result = getDescription('vF;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nonexistent';
		result = getDescription('nonexistent');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; pretty suddenly brighter middle';
		result = getDescription('F;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular figure';
		result = getDescription('vF;S;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; stellar';
		result = getDescription('F;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'following; pretty small';
		result = getDescription('f;pS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'close to a star';
		result = getDescription('Close to a star');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular round; resolvable (mottled not resolved)';
		result = getDescription('F;S;iR;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; pretty much elongated/extended 0; between 2 stars';
		result = getDescription('pB;cL;pmE0;bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively large; diffused';
		result = getDescription('eL;dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; (very small stars)';
		result = getDescription('eF;vS;(vS st)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; little/long rich; little/long compressed; pretty large';
		result = getDescription('Cl;lRi;lC;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very small; (stars + nebula)';
		result = getDescription('Cl;vS;(st+ neb)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '11 arcseconds pretty large dark oval; easy on good night';
		result = getDescription('11\'\' pL dark oval; easy on good night');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding compressed; little/long rich; irregular figure; stars large';
		result = getDescription('Cl;pC;lRi;iF;st L');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; pretty large; round; north bright middle at 165X; 3 stars involved';
		result = getDescription('13\'\'-pF;pL;R;nBM at 165X; 3* invol');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; group of 8 or 9 stars 10th magnitude and fainter';
		result = getDescription('Cl;group of 8 or 9 st 10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; cluster or cluster + nebula';
		result = getDescription('S;Cl or Cl+ neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; north rich; north compressed; 13 stars counted at 150X';
		result = getDescription('13\'\'-pF; nRi; nC; 13 stars counted at 150X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 6.7 magnitude with pretty bright; very large nebula';
		result = getDescription('* 6.7 w pB;vL neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '10 arcseconds - extremely/excessively faint; large; very elongated/extended 5X1 in position angle 90; faint streamer';
		result = getDescription('10\'\'- eF; L; vE 5X1 in PA 90; faint streamer');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; preceding compressed; stars 7th magnitude and fainter th magnitude and fainter';
		result = getDescription('Cl;pRi;pC;st7...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - faint; large; rich; north compressed at 100X; many faint members';
		result = getDescription('13\'\'-F; L; Ri; nC at 100X; many F members');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '11 arcseconds - pretty bright; very large; very little/long compressed; north rich; north compressed; bright stars center at 60X';
		result = getDescription('11\'\'-pB; vL; vlC; nRi; nC; B* center at 60X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'difficult; many stars involved/involving';
		result = getDescription('Dif;many st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; rich; little/long compressed';
		result = getDescription('Cl;L;Ri;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '6 arcseconds faint; pretty small; north rich; north compressed; 7 stars and fuzzy background';
		result = getDescription('6\'\' F; pS; nRi; nC; 7* and fuzzy background');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; north rich; north compressed; 11 stars counted at 150X';
		result = getDescription('13\'\'-pF; nRi; nC; 11 stars counted at 150X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; rich; very little/long compressed; stars 9th magnitude and fainter th to 12th magnitude';
		result = getDescription('Cl;vL;Ri;vlC;st9..12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very faint; preceding rich; preceding compressed; irregular figure';
		result = getDescription('Cl;vF;pRi;pC;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - extremely/excessively faint; pretty large; in two parts with 5 stars involved/involving at 100X with UHC';
		result = getDescription('13\'\'-eF; pL; in two parts with 5* invl at 100X with UHC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very large; diffused; star of 6th magnitude involved/involving';
		result = getDescription('vL;dif;* 6 inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; preceding compressed; round; stars 9th magnitude and fainter th to 12th magnitude';
		result = getDescription('Cl;pRi;pC;R;st9...12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '6 arcseconds - pretty faint; pretty small; suddenly/south compressed; suddenly/south rich; 21 stars counted; add UHC Fornax nebula';
		result = getDescription('6\'\'-pF; pS; sC; sRi; 21* counted; add UHC for neby');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; bright; very large; very rich; irregular figure; stars large and small';
		result = getDescription('Cl;B;vL;vRi;iF;st L & S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; round; bright triple star in middle';
		result = getDescription('vB;L;R;B***in M');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; bright; very large; very rich; little/long compressed; stars from 9th to 11th magnitude';
		result = getDescription('Cl;B;vL;vRi;lC;*9..11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; pretty suddenly brighter middle';
		result = getDescription('cF;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '11 arcseconds - pretty bright; very large; suddenly/south compressed; magnitude 7 and fainter; 41 stars counted at 60X';
		result = getDescription('11\'\'-pB; vL; sC; mag 7 and fainter; 41 * counted at 60X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - easy dark nebula at 60X; oval with thin lanes';
		result = getDescription('13\'\'-easy dark nebula at 60X; oval w/ thin lanes');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very little/long rich; stars 11th magnitude and fainter';
		result = getDescription('Cl;vlRi;st 11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; pretty large; suddenly/south compressed; 10 stars counted and mottled field at 135X';
		result = getDescription('13\'\'-pF; pL; sC; 10* counted and mottled field at 135X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/very remarkable object cluster; rich; preceding compressed middle; stars large and small';
		result = getDescription('!!Cl;Ri;pCM;st L & S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; very bright';
		result = getDescription('S;vB');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; not rich; star of 7th magnitude north';
		result = getDescription('Cl;not Ri;*7 north');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + round';
		result = getDescription('E+R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; poor; stars 11th magnitude and fainter';
		result = getDescription('Cl;pL;poor;st 11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; considerably large; compressed; irregular figure; stars very small';
		result = getDescription('Cl;cL;C;iF;st vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; little/long elongated/extended';
		result = getDescription('pF;pS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; poor; very little/long compressed; star of 7th magnitude; 10th to 15th magnitude';
		result = getDescription('Cl;pL;P;vlC;*7;10...15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; round; faint stars north following';
		result = getDescription('eeF;vS;R;F* nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; very little/long compressed; stars pretty large';
		result = getDescription('Cl;pRi;vlC;st pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; several stars near';
		result = getDescription('eF;vS;R;sev st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; stellar';
		result = getDescription('pB;S;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; easily resolvable';
		result = getDescription('vF;pL;R;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long elongated/extended';
		result = getDescription('vF;S;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; elongated in position angle 150 degrees; pretty suddenly brighter middle round Nucleus or to a Nucleus';
		result = getDescription('B;L;E150;psbMRN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle';
		result = getDescription('vF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very large; resolvable';
		result = getDescription('eF;vL;resolvable');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; irregular figure; brighter middle';
		result = getDescription('vF;iF;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; round; 5416 following 26 arcseconds';
		result = getDescription('eF;R;5416 f 26\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very very faint';
		result = getDescription('vvF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; faint star center; star of 10th magnitude - 11 north following';
		result = getDescription('S;F*centre;*10-11 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('eF;vS;E;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; pretty suddenly brighter middle; stars preceding';
		result = getDescription('cF;S;R;psbM;*p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; brighter middle';
		result = getDescription('vF;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; stars in centre';
		result = getDescription('vF;R;*in centre');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; stars in centre';
		result = getDescription('vF;R;*in centre');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large';
		result = getDescription('vF;L');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '3 very faint; line; 2 arcminutes - 3arcminutes distance or distant';
		result = getDescription('3 vf;line;2\'-3\'dist');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '3 very faint; north one brightest';
		result = getDescription('3 vf;n one brightest');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '3 very faint; north following star of 8.6 magnitude';
		result = getDescription('3 vf;nf *8.6');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small';
		result = getDescription('eF;eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small';
		result = getDescription('pF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; poor small';
		result = getDescription('F;PS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended; pretty bright stars south preceding';
		result = getDescription('F;S;lE;pB* sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; very rich; very much compressed; stars 11th magnitude and fainter...';
		result = getDescription('Cl;L;vRi;vmC;st 11...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended';
		result = getDescription('eF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round';
		result = getDescription('vF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; round; suddenly/south brighter middle faint double star';
		result = getDescription('cF;cS;R;sbMF**');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; irregular round';
		result = getDescription('cF;cS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; little/long brighter middle';
		result = getDescription('eF;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; elongated/extended';
		result = getDescription('pB;vS;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle';
		result = getDescription('F;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round';
		result = getDescription('pF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; little/long brighter middle';
		result = getDescription('F;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very little/long elongated/extended; very little/long brighter middle';
		result = getDescription('vF;vlE;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended; stellar';
		result = getDescription('F;S;lE;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; between double stars';
		result = getDescription('vF;pS;bet D*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; little/long brighter middle';
		result = getDescription('eF;eS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long elongated/extended';
		result = getDescription('vF;S;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; stellar nucleus';
		result = getDescription('vF;S;R;stellar nucl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; suddenly/south brighter middle Nucleus or to a Nucleus; resolvable (mottled not resolved)';
		result = getDescription('vF;vS;R;sbMN;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; extremely/excessively small; round; brighter middle Nucleus or to a Nucleus';
		result = getDescription('F;eS;R;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; star of 10th magnitude preceding';
		result = getDescription('vF;S;*10p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; irregular round';
		result = getDescription('pB;pL;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; little/long brighter middle; star of 16th magnitude north following';
		result = getDescription('F;pS;R;lbM;*16 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; gradually brighter middle';
		result = getDescription('F;vS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; star of 10th magnitude preceding';
		result = getDescription('vF;pL;*10p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular round';
		result = getDescription('F;S;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint';
		result = getDescription('eeF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; elongated/extended';
		result = getDescription('vF;vS;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; pretty much elongated/extended 90; star of 10th magnitude north preceding';
		result = getDescription('F;pL;pmE90;*10 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; very much elongated/extended 110; very gradually very much bright middle';
		result = getDescription('cF;pL;vmE110;vgvmBM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; irregular round; brighter middle';
		result = getDescription('pF;pS;iR;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; round; very suddenly/south much brighter middle; 2 or 3 stars involved/involving';
		result = getDescription('pB;R;vsmbM;2or3*inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; 2 very faint stars near';
		result = getDescription('eeF;pS;R;2 vf * nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; round; south preceding of 2';
		result = getDescription('cF;vS;R;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; gradually brighter middle; north following of 2';
		result = getDescription('cF;S;R;gbM;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; 5532 following 10 arcseconds';
		result = getDescription('F;S;R;5532 f 10\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;vS;R;gbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; elongated in position angle 80 degrees; double nebula with 5545';
		result = getDescription('F;pS;E80;Dneb w 5545');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended; little/long brighter middle; double nebula with 5544';
		result = getDescription('E;lbM;Dneb w 5544');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; irregular round';
		result = getDescription('eF;S;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; irregular figure; gradually brighter middle';
		result = getDescription('F;pL;iF;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated/extended';
		result = getDescription('eF;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty small; round; very suddenly/south very much brighter middle stars';
		result = getDescription('cF;pS;R;vsvmbM*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably small; gradually brighter middle';
		result = getDescription('pB;cS;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; small; round; very suddenly/south brighter middle stars';
		result = getDescription('cB;S;R;vsbM*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; pretty much elongated/extended';
		result = getDescription('vF;cS;pmE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended';
		result = getDescription('vF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long elongated/extended; brighter middle';
		result = getDescription('vF;S;vlE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; round';
		result = getDescription('pF;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very difficult';
		result = getDescription('vF;S;vdif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'suddenly/south cluster of stars in nebula';
		result = getDescription('s Cl of * in neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; brighter middle';
		result = getDescription('eF;vS;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very faint stars following';
		result = getDescription('vF;S;vF*f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably large; preceding of 2';
		result = getDescription('vF;cL;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; brighter middle faint Nucleus or to a Nucleus; stars south preceding';
		result = getDescription('pB;pS;R;bMFN;* sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint star in very faint; very small; round nebula';
		result = getDescription('vF*in vf;vS;R neby');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; gradually brighter middle';
		result = getDescription('vF;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; north preceding of 2';
		result = getDescription('vF;S;R;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; following of 2';
		result = getDescription('pB;S;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; brighter middle stars; south following of 2';
		result = getDescription('cF;S;R;bM*;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; pretty bright stars near';
		result = getDescription('vF;pS;R;pB* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; very little/long elongated/extended; star of 8th magnitude south following';
		result = getDescription('F;cS;vlE;*8 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; little/long elongated/extended; much brighter middle';
		result = getDescription('pF;pS;lE;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; stellar';
		result = getDescription('eF;S;R;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; brighter middle';
		result = getDescription('F;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; pretty bright stars near south following';
		result = getDescription('eF;S;R;pB* nr sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; between 5598 and 5603';
		result = getDescription('vF;bet 5598 and 5603');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty small; round; gradually brighter middle';
		result = getDescription('cF;pS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; stellar';
		result = getDescription('eF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; little/long elongated/extended; very gradually little/long brighter middle';
		result = getDescription('F;pL;lE;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; gradually brighter middle';
		result = getDescription('pB;pS;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint';
		result = getDescription('eeF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle';
		result = getDescription('F;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; difficult; 2 arcminutes north of NGC 5614';
		result = getDescription('eF;pS;DIF;2\'n of NGC 5614');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; suddenly/south much brighter middle';
		result = getDescription('pB;S;R;smbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'close north of 5614; very faint stars ?';
		result = getDescription('close n of 5614;vf*?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; considerably elongated/extended; very gradually brighter middle; easily resolvable';
		result = getDescription('vF;S;cE;vgbM;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; pretty much elongated/extended 0; star of 9th magnitude following';
		result = getDescription('vF;S;pmE0;*9f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; very little/long elongated/extended; very gradually little/long brighter middle';
		result = getDescription('vF;pS;vlE;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended';
		result = getDescription('eF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually brighter middle';
		result = getDescription('vF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; very suddenly/south much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cF;S;R;vsmbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty small; round; pretty gradually little/long brighter middle';
		result = getDescription('cB;pS;R;pglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated in position angle 90 degrees; gradually brighter middle';
		result = getDescription('F;S;E90;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; large; resolvable';
		result = getDescription('eeF;L;resolvable');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; gradually brighter middle';
		result = getDescription('F;pL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually brighter middle';
		result = getDescription('pF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually brighter middle Nucleus or to a Nucleus = 14th magnitude';
		result = getDescription('pF;S;R;gbMN=14m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended; suddenly/south brighter middle';
		result = getDescription('F;S;E;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; star of 9th magnitude south preceding';
		result = getDescription('vF;vS;R;*9 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; star of 7th magnitude preceding; star of 11th magnitude suddenly/south';
		result = getDescription('vF;R;*7p;*11s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; very gradually brighter middle';
		result = getDescription('vF;S;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; stars involved/involving; star of 12th magnitude north following';
		result = getDescription('cF;S;* inv;*12 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; little/long elongated/extended; much brighter middle; resolvable (mottled not resolved) ?';
		result = getDescription('pB;pS;lE;mbM;r?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; elongated/extended south preceding north following';
		result = getDescription('eF;E sp nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; irregular round; very gradually brighter middle';
		result = getDescription('pB;L;iR;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended; double star involved/involving';
		result = getDescription('F;S;E;** inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; brighter middle';
		result = getDescription('pF;pS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; gradually much brighter middle';
		result = getDescription('pB;pS;R;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pF;pL;R;mbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; no nucleus; 5649 near';
		result = getDescription('vF;S;no nucl;5649 nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; north preceding of 2';
		result = getDescription('eF;vS;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; very little/long brighter middle';
		result = getDescription('F;S;R;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular round; several very faint stars involved/involving';
		result = getDescription('F;S;irR;sev vf * inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; south following of 2';
		result = getDescription('eeF;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; considerably elongated/extended; star of 15th magnitude north preceding';
		result = getDescription('F;S;cE;*15 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;pL;R;gbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very large; irregular round; little/long brighter middle; double star preceding';
		result = getDescription('vF;vL;iR;lbM;**p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; round; little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;L;R;lbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; elongated/extended; brighter middle';
		result = getDescription('F;pS;E;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; elongated in position angle 45 degrees; pretty gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('B;L;E45;pgbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; stellar';
		result = getDescription('vF;vS;R;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; resolvable (mottled not resolved); 3 stars 9; 10 north preceding';
		result = getDescription('vF;vS;R;r;3*9;10 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; elongated/extended';
		result = getDescription('F;pS;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; little/long elongated/extended';
		result = getDescription('F;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; irregular figure; resolved; star of 10th magnitude following';
		result = getDescription('pF;S;iF;resolved;*10 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; elongated in position angle 87 degrees; pretty suddenly much brighter middle';
		result = getDescription('cB;pL;E87;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small';
		result = getDescription('F;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; round; brighter middle; preceding of 2';
		result = getDescription('F;cS;R;bM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; following of 2';
		result = getDescription('vF;S;R;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; star of 13th magnitude attached suddenly/south';
		result = getDescription('F;pL;*13 att s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; gradually brighter middle Nucleus or to a Nucleus = 15th magnitude';
		result = getDescription('vF;vS;R;gbMN=15m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; brighter middle; 4 bright stars preceding';
		result = getDescription('F;vS;R;bM;4B*p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; round; little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cF;cS;R;lbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; resolvable; stars south preceding 4 arcminutes';
		result = getDescription('eF;S;resolvable;* sp 4\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; little/long elongated/extended; in triangle of stars';
		result = getDescription('cF;cS;lE;in tri of st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably small; round; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;cS;R;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; round';
		result = getDescription('B;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; elongated/extended preceding following; double stars north; 1 of 6';
		result = getDescription('vF;pS;E pf;D*n;1 of 6');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; little/long elongated/extended 0';
		result = getDescription('F;cS;lE0');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; elongated in position angle 0 degrees; gradually brighter middle';
		result = getDescription('F;pL;E0;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; double stars near; 2 of 6';
		result = getDescription('vF;S;R;D* nr;2 of 6');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; between 2 stars';
		result = getDescription('eeF;pS;R;bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; very little/long brighter middle';
		result = getDescription('vF;vS;R;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular round';
		result = getDescription('vF;vS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular figure; elongated/extended preceding following';
		result = getDescription('vF;S;iF;E pf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; pretty suddenly brighter middle';
		result = getDescription('vF;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very gradually brighter middle; double star following; preceding of 2';
		result = getDescription('vF;S;vgbM;**f;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; double star attached; following of 2';
		result = getDescription('eF;vS;** att;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; elongated in position angle 90 degrees';
		result = getDescription('vF;cS;E90');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; little/long elongated/extended';
		result = getDescription('vF;eS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round; diffused';
		result = getDescription('eF;pL;R;dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; little/long brighter middle';
		result = getDescription('vF;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; suddenly/south much brighter middle; resolvable (mottled not resolved); stars near';
		result = getDescription('pB;S;R;smbM;r;* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; irregular round; little/long brighter middle';
		result = getDescription('vF;L;iR;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; round; very gradually little/long brighter middle';
		result = getDescription('vF;cS;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; little/long elongated/extended; very difficult';
		result = getDescription('eeF;S;lE;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; very little/long elongated/extended; triangle 2 stars 10; 11';
		result = getDescription('F;S;vlE;tri2*10;11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; 1 arcminutes preceding 5754';
		result = getDescription('F;1\'p 5754');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; brighter middle; north preceding 5754';
		result = getDescription('F;bM;np 5754');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; round; brighter middle; 2 north diameter of 4';
		result = getDescription('cF;cS;R;bM;2nd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; 2 arcminutes north following 5754';
		result = getDescription('F;2\' nf 5754');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; star of 9th magnitude following 22 arcseconds';
		result = getDescription('eF;pS;R;*9f 22\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; considerably elongated/extended 90; very gradually little/long brighter middle';
		result = getDescription('vF;vS;cE90;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; preceding of 2';
		result = getDescription('vF;S;R;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; very difficult; following of 2';
		result = getDescription('eeF;pS;v diffic;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; stars near';
		result = getDescription('eF;pS;R;* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; little/long elongated/extended; pretty suddenly little/long brighter middle; star of 8th magnitude north preceding';
		result = getDescription('pB;pL;lE;pslbM;*8 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; pretty gradually brighter middle';
		result = getDescription('vF;S;R;pgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; pretty gradually brighter middle';
		result = getDescription('vF;S;R;pgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; very difficult; south following of 2';
		result = getDescription('eeF;S;R;v diffic;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; irregular round; faint stars involved/involving';
		result = getDescription('pB;pS;iR;F* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; faint stars near faint; north preceding of 2';
		result = getDescription('vF;pS;F* nr F;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; suddenly/south much brighter middle; stellar';
		result = getDescription('pB;S;R;smbM;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; stars near south preceding';
		result = getDescription('vF;S;R;* nr sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; pretty bright stars near following; difficult';
		result = getDescription('eeF;pS;R;pB* nr f;diff');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; little/long elongated/extended; pretty bright stars close following';
		result = getDescription('eeF;pS;lE;pB* close f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; round; pretty suddenly little/long brighter middle';
		result = getDescription('F;cS;R;pslbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; elongated/extended; stars near south following';
		result = getDescription('eF;vS;E;* nr sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; very suddenly/south brighter middle star of 13th magnitude; 1 stars of 4';
		result = getDescription('pF;S;vsbM*13;1st of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended; pretty bright stars close preceding';
		result = getDescription('vF;pS;lE;pB* close p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; very suddenly/south brighter middle star of 13th magnitude; 2 north diameter of 4';
		result = getDescription('F;S;vsbM*13;2nd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; irregular figure';
		result = getDescription('eF;pS;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; very suddenly/south much brighter middle; star of 6th magnitude near';
		result = getDescription('vF;vS;vsmbM;*6 nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small';
		result = getDescription('S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; irregular figure; little/long brighter middle';
		result = getDescription('eF;vS;iF;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; very gradually brighter middle; stars north following';
		result = getDescription('F;S;R;vgbM;* nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; elongated in position angle 90 degrees; suddenly/south brighter middle; bright double stars following 8 arcminutes; brightest of 3';
		result = getDescription('B;E90;sbM;B D*f8\';brightest of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; extremely/excessively faint stars involved/involving; between 2 stars';
		result = getDescription('vF;pS;R;eF* inv;bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; between 2 distance or distant stars';
		result = getDescription('eF;pS;R;bet 2 dist*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; brighter middle';
		result = getDescription('pB;pL;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; bright stars near following';
		result = getDescription('vF;S;R;B* nr f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round';
		result = getDescription('vF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very large; irregular resolvable (mottled not resolved) round; brighter middle';
		result = getDescription('vF;vL;irrR;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; little/long elongated/extended; very difficult';
		result = getDescription('eeF;pS;lE;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; double stars north preceding';
		result = getDescription('vF;S;R;D* np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; little/long brighter middle';
		result = getDescription('eF;vS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; much brighter middle; resolvable (mottled not resolved) ?';
		result = getDescription('pF;pS;R;mbM;r?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; pretty suddenly brighter middle';
		result = getDescription('F;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; north preceding of 2';
		result = getDescription('eF;vS;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; south following of 2';
		result = getDescription('eF;vS;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula star of 6th magnitude ?';
		result = getDescription('neb *6?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; elongated/extended; preceding of double nebula';
		result = getDescription('cF;cS;E;p of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; elongated/extended; following of double nebula';
		result = getDescription('pF;pS;E;f of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; in triangle of 3 bright stars';
		result = getDescription('vF;pL;R;in tri of 3B*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; little/long elongated/extended';
		result = getDescription('pB;pL;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; much brighter middle';
		result = getDescription('F;S;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; brighter middle';
		result = getDescription('F;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; round; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cF;vS;R;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'only 2 faint stars';
		result = getDescription('only 2 F st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; gradually little/long brighter middle';
		result = getDescription('eeF;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; resolvable (mottled not resolved); 3 stars near';
		result = getDescription('F;S;R;r;3* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended north suddenly/south; connection with 5896';
		result = getDescription('vF;S;E ns;conn w 5896');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; connection with 5895';
		result = getDescription('vF;vS;R;conn w 5895');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar';
		result = getDescription('vF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'near north of 5900; extremely/excessively faint; small';
		result = getDescription('nr n of 5900;eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; pretty much elongated/extended; suddenly/south much brighter middle Nucleus or to a Nucleus';
		result = getDescription('cB;pL;pmE;smbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long elongated/extended; gradually brighter middle';
		result = getDescription('vF;S;vlE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; faint stars involved/involving';
		result = getDescription('F;vS;R;F st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; large; pretty much elongated/extended; gradually little/long brighter middle; double star small';
		result = getDescription('cF;L;pmE;glbM;**S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; very little/long elongated/extended; very gradually brighter middle';
		result = getDescription('vF;pL;vlE;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; south preceding of double nebula';
		result = getDescription('vF;vS;sp of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; north following of double nebula';
		result = getDescription('pF;pS;R;nf of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; north preceding of 2';
		result = getDescription('vF;pS;R;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; round; south following of 2';
		result = getDescription('eeF;vS;R;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular round; little/long elongated/extended north suddenly/south; 2 stars involved/involving';
		result = getDescription('F;S;irR;lE ns;2* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 13th magnitude; 14 seems suddenly/south little/long nebula';
		result = getDescription('*13;14 seems sl neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; diffused';
		result = getDescription('vF;pS;dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; gradually much brighter middle; small stars attached north preceding';
		result = getDescription('pF;pL;gmbM;S* att np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; diffused';
		result = getDescription('vF;S;dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; small stars north preceding';
		result = getDescription('vF;S;R;S* np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually brighter middle; 2 stars 8th magnitude and fainter arcminutes following';
		result = getDescription('vF;S;R;gbM;2st 8\'f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; much brighter middle';
		result = getDescription('pB;S;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle; south preceding of 2';
		result = getDescription('vF;vS;R;bM;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; round; brighter middle; north following of 2';
		result = getDescription('cF;vS;R;bM;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle';
		result = getDescription('F;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle';
		result = getDescription('F;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually brighter middle; double star north following';
		result = getDescription('vF;S;R;gbM;** nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; star of 13th magnitude north following 1 arcminutes';
		result = getDescription('pF;S;R;*13 nf 1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually brighter middle; star of 12th magnitude 288';
		result = getDescription('pF;S;R;gbM;*12 288');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle';
		result = getDescription('vF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle';
		result = getDescription('F;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended; very gradually little/long brighter middle';
		result = getDescription('F;S;E;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; pretty much elongated/extended; gradually little/long brighter middle';
		result = getDescription('F;pS;pmE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended; gradually little/long brighter middle';
		result = getDescription('vF;S;lE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; round; attached to star of 14th magnitude';
		result = getDescription('eF;R;att to*14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; irregular round; 4 stars 1 north very';
		result = getDescription('vB;L;iR;4*1nv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; very gradually little/long brighter middle';
		result = getDescription('vF;S;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; very little/long elongated/extended; gradually little/long brighter middle; star of 10th magnitude south following';
		result = getDescription('F;S;vlE;glbM;*10 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; very gradually little/long brighter middle';
		result = getDescription('vF;pL;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; pretty large; north rich; scattered; 17 stars at 100X';
		result = getDescription('13\'\'-pB;pL;nRi;scatt;17* at 100X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; pretty large; preceding rich; little/long compressed; 24 stars magnitude 10th to 13th magnitude at 100X';
		result = getDescription('13\'\'-pB;pL;pRi;lC; 24* mags 10..13 at 100X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - faint; pretty large; north rich; compressed; 10 stars at 165X';
		result = getDescription('13\'\'-F;pL;nRi;C;10* at 165X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; star of 13th magnitude involved/involving south following';
		result = getDescription('pB;S;*13 mag invl sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very large; round; very suddenly/south bright Nucleus or to a Nucleus';
		result = getDescription('F;vL;R;vsBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '8X42binoc-19 stars in chain about 4 degree long including compressed large 1502';
		result = getDescription('8X42binoc-19* in chain about 4 deg long incl CL 1502');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; bright stars near';
		result = getDescription('vF;vS;R;B* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round';
		result = getDescription('eF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; very little/long elongated/extended; 1 arcminutes diameter';
		result = getDescription('pB;pS;vlE;1\'Diam');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; bright middle; star of 8.5 magnitude 4 arcminutes north';
		result = getDescription('pF;pL;BM;* 8.5 4\' north');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; considerably compressed; irregular figure';
		result = getDescription('Cl;pRi;cC;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; nebulosity';
		result = getDescription('F;L;neby?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '4 arcseconds - huge dark oval with pretty good contrast';
		result = getDescription('4\'\'-huge dark oval with pretty good contrast');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large';
		result = getDescription('pB;L');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '4 arcseconds - nothing at this location';
		result = getDescription('4\'\'-nothing at this location');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; little/long elongated/extended; bright Nucleus or to a Nucleus middle; star of 9.5 magnitude north 1 arcminutes';
		result = getDescription('pB;S;lE;BNM;*9.5n1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; elongated/extended; star of 9.3 magnitude south preceding';
		result = getDescription('vF;L;E;*9.3 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; star of 9.5 magnitude following';
		result = getDescription('vF;S;*9.5f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; preceding rich; little/long compressed; stars large and small';
		result = getDescription('Cl;vL;pRi;lC;st L&S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; irregular figure; much brighter middle; easily resolvable; stars involved/involving';
		result = getDescription('cF;pL;iF;mbM;er;* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; very little/long elongated/extended';
		result = getDescription('vF;vS;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; 2 arcminutes little/long; little/long elongated/extended';
		result = getDescription('pB;2\'l;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; stars extremely/excessively small';
		result = getDescription('vF;* eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round; star of 9.5 magnitude 3 arcminutes south following';
		result = getDescription('F;R;*9.5 3\' sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; 2 stars 10 - 11 following';
		result = getDescription('F;2* 10-11 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; little/long elongated/extended';
		result = getDescription('pF;pL;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 13th magnitude IN very faint; very small nebula';
		result = getDescription('*13 IN vF;vS Neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; little/long brighter middle';
		result = getDescription('vF;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; 2 stars 11 near';
		result = getDescription('pB;pL;R;2*11 nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebulous star or very faint very small; 2366 south following';
		result = getDescription('neb* or vFvS;2366 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; much brighter middle; very small stars involved/involving; curved tails';
		result = getDescription('vF;pL;mbM;vS*inv;curved tails');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/very remarkable object considerably bright; extremely/excessively large; very much elongated/extended; very gradually much brighter middle Nucleus or to a Nucleus';
		result = getDescription('!! cB;eL;vmE;vgmbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very little/long compressed';
		result = getDescription('Cl;vlC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small';
		result = getDescription('vF;pS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; small stars in centre';
		result = getDescription('F;S;R;S* in centre');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; little/long elongated/extended; little/long brighter middle; stars near; Theta shape';
		result = getDescription('pB;pL;lE;lbM;* nr;Theta shape');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; several bright star around';
		result = getDescription('eeF;pS;R;sev B*around');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; considerably elongated/extended';
		result = getDescription('eeF;pS;cE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; faint star in centre';
		result = getDescription('vF;S;F*in centre');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended; little/long brighter middle';
		result = getDescription('F;S;E;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended';
		result = getDescription('F;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended';
		result = getDescription('F;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; 2 stars 11 - 12 following';
		result = getDescription('vF;S;2*11-12 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; 2 faint star of 2.5 magnitude arcminutes south following';
		result = getDescription('vF;S;2 F* 2\'.5 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'inner regions very Black--MCG';
		result = getDescription('Inner Regions Very Black--MCG');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; faint stars close north; 2655 suddenly/south';
		result = getDescription('vF;vS;F* close n;2655 s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; considerably large; little/long elongated/extended 90; gradually suddenly/south very much brighter middle; difficult';
		result = getDescription('vB;cL;lE 90;gsvmbM;diff');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; elongated/extended';
		result = getDescription('pB;L;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; elongated/extended 45 degree; star of 13th magnitude north following; lenticular';
		result = getDescription('pB;S;E 45 deg;*13 nf;lenticular');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; elongated/extended; very gradually little/long brighter middle';
		result = getDescription('pB;pL;E;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; nearly between star of 8th magnitude and stars 9';
		result = getDescription('vF;S;R;nearly bet *8 & *9');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; resolvable (mottled not resolved); place doubtful';
		result = getDescription('pF;pL;r;place doubtful');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; very little/long elongated/extended; gradually little/long brighter middle';
		result = getDescription('F;pL;vlE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'planetary or nebula star of 9.5 magnitude; star of 13th magnitude preceding 15 arcseconds';
		result = getDescription('planetary or neb *9.5;*13 p 15\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended';
		result = getDescription('eF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular round';
		result = getDescription('F;S;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; elongated/extended; brighter middle star of 17th magnitude; star of 10th magnitude attached Nucleus or to a Nucleus';
		result = getDescription('Cl;E;bM*17;*10 att N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably large; very little/long elongated/extended; very gradually little/long brighter middle; 3 stars preceding';
		result = getDescription('cF;cL;vlE;vglbM;3st p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; little/long elongated/extended; 6907 preceding';
		result = getDescription('eF;vS;lE;6907 p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; 2 stars 14; 15 north preceding; star of 8th magnitude following';
		result = getDescription('vF;2*14;15 np;*8f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;pS;R;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; elongated in position angle 120 degrees; gradually brighter middle';
		result = getDescription('eF;pS;E120;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; suddenly/south little/long bright middle';
		result = getDescription('vF;vS;R;slBM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;vS;R;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; gradually little/long brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;vS;R;glbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;vS;R;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; round; brighter middle Nucleus or to a Nucleus; 1 stars of 3';
		result = getDescription('vF;eS;R;bMN;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; brighter middle Nucleus or to a Nucleus; 2 north diameter of 3';
		result = getDescription('eF;vS;R;bMN;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; very little/long elongated/extended; gradually little/long brighter middle; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('vF;vS;vlE;glbM;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; irregular round';
		result = getDescription('eF;S;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular round; brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;vS;iR;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular round';
		result = getDescription('vF;vS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; gradually brighter middle; 1 stars of 2';
		result = getDescription('vF;vS;R;gbM;1st of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular round; gradually brighter middle Nucleus or to a Nucleus; 2 north diameter of 2';
		result = getDescription('vF;vS;iR;gbMN;2nd of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; elongated in position angle 130 degrees; suddenly/south much brighter middle Nucleus or to a Nucleus; stars north preceding';
		result = getDescription('F;vS;E130;smbMN;* np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object; bright; large; little/long elongated/extended; gradually pretty much brighter middle; stars from 12th to 16th magnitude';
		result = getDescription('!;B;L;lE;gpmbM;st 12...16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebulous star of 10th magnitude - 11 or very small cluster';
		result = getDescription('nebulous * 10-11 or vS Cl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - extremely/excessively faint; small; round at 100X; triangle of 11th magnitude stars to southwest';
		result = getDescription('13\'\'-eF; S; R at 100X; triangle of 11m * to SW');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long elongated/extended; very gradually brighter middle';
		result = getDescription('vF;S;vlE;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; star of 11th magnitude north';
		result = getDescription('pF;vS;*11n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; nebulous??; star of 9.5 magnitude following 2 arcminutes';
		result = getDescription('eF;vS;R;neb?;*9.5 f 2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint nebula stars; star of 9.5 magnitude north following 3 arcminutes';
		result = getDescription('vF neb *;*9.5 nf 3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; elongated/extended; very suddenly/south brighter middle; star of 9th magnitude preceding 5 suddenly/south';
		result = getDescription('pB;vS;E;vsbM;*9 p 5s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; irregular elongated/extended; gradually little/long brighter middle';
		result = getDescription('pB;pL;iE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; among stars';
		result = getDescription('vF;vS;R;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; round; gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;L;R;gbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; very gradually pretty much brighter middle';
		result = getDescription('pF;S;R;vgpmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very bright; very large; preceding rich; stars from 7th to 13th magnitude';
		result = getDescription('Cl;vB;vL;pRi;*7...13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty small; little/long rich; little/long compressed';
		result = getDescription('Cl;pS;lRi;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; 3 or 4 very small stars preceding near';
		result = getDescription('pB;S;R;3 or 4 vS * p nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; pretty suddenly little/long brighter middle';
		result = getDescription('eF;S;R;pslbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; round; nearly stellar';
		result = getDescription('vS;R;nearly stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; much elongated/extended 105 degree';
		result = getDescription('vF;vS;mE 105 deg');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object very large; Eridanus; very gradually extremely/excessively compressed middle 45 arcseconds diameter; stars from 13th to 15th magnitude';
		result = getDescription('! vL;eRi;vgeCM 45 sec d;st 13...15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; round; gradually little/long brighter middle';
		result = getDescription('pF;vS;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; gradually little/long brighter middle';
		result = getDescription('F;pS;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; between 2 stars';
		result = getDescription('F;vS;bet 2 st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/very remarkable object = star of 8th magnitude; very small; round; star of 15th magnitude north preceding (90 degree); stars near 13 arcseconds';
		result = getDescription('!! =*8;vS;R;*15 np (90deg);*nr13\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; pretty much brighter middle; bright stars near';
		result = getDescription('F;S;R;pmbM;B* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'planetary; stellar';
		result = getDescription('planetary;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; considerably large; little/long compressed';
		result = getDescription('Cl;cL;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; irregular round; gradually little/long brighter middle; small stars involved/involving';
		result = getDescription('F;L;iR;glbM;S* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; extremely/excessively large; little/long compressed; bright; stars from 9th to 14th magnitude';
		result = getDescription('Cl;eL;lC;B;*9...14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; gradually brighter middle; star of 13th magnitude north';
		result = getDescription('pB;pS;R;gbM;*13n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'planetary; stellar';
		result = getDescription('planetary;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object very bright; very large; falcate; double stars involved/involving';
		result = getDescription('! vB;vL;falcate;D* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'plan = star of 10th magnitude; round; among 150 stars';
		result = getDescription('plan = *10;R;am 150 st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stars involved/involving in nebula';
		result = getDescription('st inv in neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty small; very compressed; stars 15th magnitude and fainter';
		result = getDescription('Cl;pS;vC;st 15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; around star of 5.4 magnitude';
		result = getDescription('Cl; around * 5.4 mag');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; bright; rich; pretty large';
		result = getDescription('Cl;B;Ri;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very very large; irregular figure; double stars involved/involving';
		result = getDescription('pB;vvL;iF;D* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object very very large; very bright; cluster; including Theta Carina';
		result = getDescription('! vvL;vB;Cl;incl Theta Car');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object great nebula; Eta Carinae';
		result = getDescription('! great neb;Eta Carinae');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '4';
		result = getDescription('4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; preceding rich; little/long compressed; stars 13th magnitude and fainter';
		result = getDescription('Cl;pL;pRi;lC;st 13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'planetary; stellar; 10.5 magnitude';
		result = getDescription('planetary; stellar; 10.5 mag');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '3 small stars 10th magnitude and fainter in very faint nebula';
		result = getDescription('3 S st 10 in vF neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; preceding compressed';
		result = getDescription('Cl;pRi;pC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/very remarkable object; cluster; extremely/excessively large; round; little/long compressed; stars from 8th to 12th magnitude';
		result = getDescription('!!;Cl;eL;R;lC;st 8...12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; little/long compressed';
		result = getDescription('Cl;pRi;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; little/long elongated/extended; 1 stars of 6';
		result = getDescription('F;lE;1st of 6');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; little/long elongated/extended; suddenly/south brighter middle; 2 north diameter of 6';
		result = getDescription('F;lE;sbM;2nd of 6');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 12th magnitude with fan-shaped nebula attached; 3 resolvable (mottled not resolved) diameter of 6';
		result = getDescription('*12 w fan-shaped neb att;3rd of 6');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; brighter middle stars; 4th of 6';
		result = getDescription('B;bM*;4th of 6');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; elongated/extended 0; brighter middle; 5th of 6';
		result = getDescription('F;L;E 0;bM;5th of 6');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated/extended 160; 6th of 6';
		result = getDescription('eF;S;E 160;6th of 6');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; compressed; elongated/extended';
		result = getDescription('Cl;pRi;C;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'globular and nebula; stars from 15th to 18th magnitude';
		result = getDescription('globular and neb;st 15...18');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding compressed';
		result = getDescription('Cl;pC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; preceding compressed; stars 9th magnitude and fainter...';
		result = getDescription('Cl;pRi;pC;st 9...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '6 arcseconds - faint; small; 6 stars magnitude 11 and fainter; not well detached cluster';
		result = getDescription('6\'\'-F; S; 6* mags 11 and fainter; not well detached clu');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; small; north rich; north compressed at 165X; 6 stars magnitude 8 to 11';
		result = getDescription('13\'\'-pF; S; nRi; nC at 165X; 6* mags 8 to 11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - faint; pretty large; elongated/extended 2X1 in position angle 30; 6 stars and faint nebula';
		result = getDescription('13\'\'-F; pL; E 2X1 in PA 30; 6* and F nebula');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint stars involved/involving in extremely/excessively faint; very large nebula';
		result = getDescription('F * inv in eF;vL neby');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty small; preceding compressed; stars from 11th to 18th magnitude';
		result = getDescription('Cl;pS;pC;st 11...18');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding round; little/long compressed; stars from 9th to 12th magnitude';
		result = getDescription('Cl;pR;lC;st 9...12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; preceding rich; little/long compressed; stars from 9th to 13th magnitude';
		result = getDescription('Cl;vL;pRi;lC;st 9...13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; stars 10th magnitude and fainter...; double stars involved/involving';
		result = getDescription('Cl;pL;st 10...;D * inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; extremely/excessively compressed';
		result = getDescription('vF;S;eC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; pretty large; elongated/extended; 20 stars nice dark lanes involved/involving at 100X';
		result = getDescription('13\'\'-pB;pL;E; 20* nice dark lanes invl at 100X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; little/long compressed; stars 11th magnitude and fainter- 12; double stars';
		result = getDescription('Cl;pL;lC;st 11-12;D*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very large; irregular round; gradually suddenly/south much brighter middle; star of 11th magnitude';
		result = getDescription('vF;vL;iR;gsmbM;*11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2 brighter';
		result = getDescription('2b');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - could not find on 8/10 night in Arizona';
		result = getDescription('13\'\'-could not find on 8/10 night in Arizona');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very large; irregular round; very gradually much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;vL;iR;vgmbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; round; stars from 11th to 15th magnitude';
		result = getDescription('Cl;pL;R;st 11...15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; small; compressed; 9 stars 11 to 13; double stars in center';
		result = getDescription('13\'\'-pB; S; C; 9* 11 to 13; dbl* in center');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; little/long compressed; stars from 9th to 10th magnitude';
		result = getDescription('Cl;L;lC;st 9...10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; round; 2 stars 10th magnitude and fainter near';
		result = getDescription('cB;pL;R;2 st 10 nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very large; diffused; small triple stars on north preceding edge';
		result = getDescription('F;vL;dif;S triple * on np edge');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; extremely/excessively large remarkable object; north following Gamma Cass';
		result = getDescription('pF;eL!;nf Gamma Cass');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; extremely/excessively large remarkable object connection with north preceding one';
		result = getDescription('pF;eL! conn w np one');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '11 arcseconds faint; pretty small; north rich; 11 stars in two rows';
		result = getDescription('11\'\'  F; pS; nRi; 11* in two rows');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster';
		result = getDescription('Cl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small';
		result = getDescription('Cl;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding compressed';
		result = getDescription('Cl;pC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; little/long compressed';
		result = getDescription('Cl;S;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; irregular figure; preceding compressed';
		result = getDescription('Cl;S;iF;pC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; bright; large; preceding rich; star of 7th magnitude; 8; 10';
		result = getDescription('Cl;B;L;pRi;*7;8;10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; bright; pretty large; preceding rich';
		result = getDescription('Cl;B;pL;pRi');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - very faint; pretty large; elongated/extended 3X1; 2 stars involved at 100X with UHC';
		result = getDescription('13\'\'-vF;pL;E 3X1;2* invol at 100X with UHC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; bright; round; rich; stars from 10th to 11th magnitude';
		result = getDescription('Cl;pL;B;R;Ri;*10..11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; preceding compressed; 13 arcseconds - pretty faint; suddenly/south compressed; 17 stars magnitude 12 and fainter';
		result = getDescription('S;pC; 13\'\'-pF; sC; 17* mags 12 and fainter');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; preceding rich; star of 14th magnitude th magnitude and fainter';
		result = getDescription('Cl;S;pRi;*14...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'irregular figure; 3 stars + nebula';
		result = getDescription('iF;3*+ neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty small; bright and very faint stars';
		result = getDescription('Cl;pS;B & vF stars');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; stars 12th magnitude and fainter';
		result = getDescription('Cl;pRi;st12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; irregular figure; rich; 1 stars 6.7 magnitude';
		result = getDescription('Cl;iF;Ri;1*6.7m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; little/long rich; stars bright';
		result = getDescription('Cl;lRi;st B');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - bright; very large; north compressed; 44 stars at 60X';
		result = getDescription('13\'\'-B;vL;nC; 44* at 60X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; bright; large; Eridanus; stars pretty large';
		result = getDescription('Cl;B;L;eRi;st pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small cluster; nebulous?';
		result = getDescription('S Cl;nebulous?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - extremely/excessively faint; small; round; very little/long bright middle at 200X';
		result = getDescription('13\'\'-eF; S; R; vlBM at 200X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar';
		result = getDescription('Stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; not rich; double stars';
		result = getDescription('Cl;not Ri;D*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'suspected nebula stars';
		result = getDescription('suspected neb *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - bright; pretty large; north rich; north compressed at 100X; 17 stars; just naked eye';
		result = getDescription('13\'\'-B;pL;nRi;nC at 100X; 17*; just naked eye');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - very bright; very large; north compressed; very rich at 60X; 88 stars; nice chains';
		result = getDescription('13\'\'-vB;vL;nC;vRi at 60X; 88*; nice chains');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; little/long compressed; suddenly/south compressed; stars 9th magnitude and fainter th to 13th magnitude';
		result = getDescription('Cl;L;lC;sC;st9...13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; irregular figure';
		result = getDescription('eF;pL;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very large; faint';
		result = getDescription('vL;F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - very faint; small; north rich; 4 arcminute glow';
		result = getDescription('13\'\'-vF; S; nRi; 4 arcmin glow');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - 9 pretty bright stars and 6 pretty faint stars in small group preceding at 100X';
		result = getDescription('13\'\'-9 pB* and 6 pF* in Small grp at 100X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - bright; pretty large; preceding rich; preceding compressed; 20 stars at 135X; some nebula to small';
		result = getDescription('13\'\'-B;pL;pRi;pC; 20* at 135X; some neby to S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; compressed; extremely/excessively large nebula extends following';
		result = getDescription('Cl;C;eL neby extends following');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small';
		result = getDescription('vF;pS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; scattered stars; one 10th magnitude';
		result = getDescription('Cl;L;scatt stars; one 10th mag');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; star following; in faint nebula';
		result = getDescription('Cl;star following;in F neby');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - extremely/excessively faint; pretty small; round at 135X; only seen with UHC filter';
		result = getDescription('13\'\'-eF;pS;R at 135X; only seen with UHC filtr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '11 arcseconds pretty bright; very large; scattered; double stars on Nucleus or to a Nucleus side';
		result = getDescription('11\'\' pB; vL; scattered; dbl* on N side');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '11 arcseconds - pretty bright; very large; scattered; 31 stars counted; double stars on Nucleus or to a Nucleus side';
		result = getDescription('11\'\'-pB; vL; scatt; 31* counted; dbl* on N side');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 9.3 magnitude nebulous; chiefly faint';
		result = getDescription('* 9.3 nebs;chiefly faint');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; between 2 very faint stars';
		result = getDescription('pB;pL;R;bet 2 vF stars');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'large; north compressed; 13 arcseconds - bright; preceding rich; 25 stars magnitude 11 to 13';
		result = getDescription('L;nC; 13\'\'-B; pRi; 25* mags 11 to 13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; irregular round; gradually brighter middle; double stars very near';
		result = getDescription('F;vS;iR;gbM;D*vnr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; elongated/extended';
		result = getDescription('Cl;vL;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; star of 8th magnitude involved/involving little/long excentric';
		result = getDescription('vF;*8 inv l excentric');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'large; rich; much compressed middle; stars from 9th to 13th magnitude';
		result = getDescription('L;Ri;mCM;*9..13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; pretty large; north rich; north compressed; 14 stars magnitude 11 and fainter';
		result = getDescription('13\'\'-pF; pL; nRi; nC; 14* mags 11 and fainter');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; pretty small; north rich; north compressed; 12 faint stars at 100X';
		result = getDescription('13\'\'-pF; pS; nRi; nC; 12 F* at 100X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; large; preceding rich; preceding compressed at 165X; 12 stars partially resolved some stars seen';
		result = getDescription('13\'\'-pF; L; pRi; pC at 165X; 12* rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; pretty large; preceding rich; little/long compressed; 22 stars at 100X; bright little/long + yellow double stars small side';
		result = getDescription('13\'\'-pB; pL; pRi; lC; 22* at 100X; Bl+Yell dbl* S side');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - faint; pretty small; round; north bright middle at 135X; visual size = 10 arcseconds';
		result = getDescription('13\'\'-F;pS;R;nBM at 135X; visual size=10 arcsec');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; pretty small; 17 stars at 135X';
		result = getDescription('13\'\'-pF;pS; 17* at 135X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; small; southeast; 15 stars at 135X; double stars involved';
		result = getDescription('13\'\'-pB;S;sE; 15* at 135X; D* invol');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'preceding rich; compressed; 13 arcseconds - 12 stars at 100X; magnitude 12 and fainter.';
		result = getDescription('pRi;C; 13\'\'-12* at 100X; mags 12 and fainter.');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; preceding rich; very compressed; stars 10th magnitude and fainter; 13th magnitude and fainter';
		result = getDescription('Cl;S;pRi;vC;st 10;13..');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; pretty small; 5 stars at 100X; not much';
		result = getDescription('13\'\'-pF; pS; 5* at 100X; not much');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; very rich; very much compressed; stars from 11th to 18th magnitude';
		result = getDescription('Cl;vL;vRi;vmC;st 11...18');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; preceding compressed';
		result = getDescription('Cl;pRi;pC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; poor; little/long compressed; stars 7th magnitude and fainter; 10th magnitude and fainter';
		result = getDescription('Cl;vL;P;lC;st 7;10...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small stars attached';
		result = getDescription('eeF;vS* att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; pretty gradually much brighter middle; 1 stars of 3';
		result = getDescription('B;S;R;pgmbM;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; pretty gradually much brighter middle; 1 stars of 3';
		result = getDescription('B;S;R;pgmbM;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; brighter middle; 2 north diameter of 3';
		result = getDescription('pF;S;R;bM;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; stars involved/involving; 3 bright stars near; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('vF;pL;R;* inv;3 B st nr;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; gradually little/long brighter middle; 3 stars 11th magnitude and fainter following';
		result = getDescription('eF;S;R;glbM;3 st 11 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; considerably large; preceding rich; little/long compressed; stars from 10th to 14th magnitude';
		result = getDescription('Cl;cL;pRi;lC;*10..14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; irregular round; pretty gradually pretty much brighter middle';
		result = getDescription('B;pL;iR;pgpmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; brighter middle';
		result = getDescription('F;pL;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably small; round; pretty suddenly much brighter middle';
		result = getDescription('pB;cS;R;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + round';
		result = getDescription('E+R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; very little/long elongated/extended; gradually little/long brighter middle';
		result = getDescription('pF;pL;vlE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; little/long elongated/extended; gradually very little/long brighter middle';
		result = getDescription('F;cS;lE;gvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; preceding rich; preceding compressed; stars from 8th to 13th magnitude';
		result = getDescription('Cl;pL;pRi;pC;st 8...13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 3.4 magnitude in very large nebula';
		result = getDescription('* 3.4 mag in vL neby');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; among 50 small stars';
		result = getDescription('eF;S;R;am 50 S st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; round; suddenly/south brighter middle Nucleus or to a Nucleus stars; star of 9th magnitude south following';
		result = getDescription('cB;R;sbMN *;*9 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely large';
		result = getDescription('eeL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; little/long elongated/extended; 2 stars involved/involving';
		result = getDescription('vF;lE;2 st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably small; very little/long elongated/extended; little/long brighter middle';
		result = getDescription('pB;cS;vlE;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; little/long compressed; stars from 9th to 14th magnitude';
		result = getDescription('Cl;vL;lC;st 9...14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object; small; round; blue; = star of 7th magnitude; diameter = 1.5 arcminutes';
		result = getDescription('!;S;R;blue;= *7;d = 1\'.5');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; preceding rich; gradually pretty much brighter middle; stars 13th magnitude and fainter';
		result = getDescription('Cl;pL;pRi;gpmbM;st 13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; very little/long elongated/extended; gradually little/long brighter middle; 3 bright stars near';
		result = getDescription('F;S;vlE;glbM;3B* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; pretty much elongated/extended; very gradually little/long brighter middle';
		result = getDescription('pF;pL;pmE;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; faint; pretty large; irregular figure; stars from 13th to 15th magnitude';
		result = getDescription('Cl;F;pL;iF;* 13...15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very large; much elongated/extended 20 degrees; little/long brighter middle';
		result = getDescription('eF;vL;mE 20 degrees; lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; pretty gradually very much brighter middle';
		result = getDescription('pB;S;R;pgvmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; large; round; very gradually brighter middle';
		result = getDescription('eF;L;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; round; very gradually little/long brighter middle';
		result = getDescription('vF;L;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; pretty suddenly much brighter middle star of 16th magnitude';
		result = getDescription('pB;S;R;psmbM *16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very little/long elongated/extended; gradually little/long brighter middle';
		result = getDescription('F;vlE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; star of 10th magnitude north 30 arcseconds';
		result = getDescription('vF;S;*10 n 30\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; little/long elongated/extended; very gradually little/long brighter middle';
		result = getDescription('vF;L;lE;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; pretty much elongated/extended; 2 stars preceding';
		result = getDescription('F;S;pmE;2 * p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; large; round; pretty suddenly little/long brighter middle; preceding of 2';
		result = getDescription('eF;L;R;pslbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; round; very gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;L;R;vgbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; stars attached north following; preceding of 2';
		result = getDescription('eF;vS;R;* att nf;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; pretty suddenly little/long brighter middle; following of 2';
		result = getDescription('pF;S;R;pslbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; pretty suddenly brighter middle';
		result = getDescription('pB;S;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;R;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; gradually brighter middle';
		result = getDescription('F;pL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; very gradually brighter middle';
		result = getDescription('eF;S;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; little/long elongated/extended; very gradually brighter middle';
		result = getDescription('eF;lE;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty large; round';
		result = getDescription('eeF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually brighter middle';
		result = getDescription('pF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; very gradually brighter middle; small stars south preceding';
		result = getDescription('eF;pS;R;vgbM;S* sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; round; gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;L;R;gbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; pretty suddenly brighter middle';
		result = getDescription('vF;vS;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably small; round; gradually brighter middle';
		result = getDescription('pB;cS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula; 1 of 3; preceding and little suddenly/south of 4744';
		result = getDescription('neb;1 of 3;p & little s of 4744');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2 of 3';
		result = getDescription('2 of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round; gradually brighter middle';
		result = getDescription('F;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; elongated/extended; gradually brighter middle; 3 of 3';
		result = getDescription('F;L;E;gbM;3 of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; round; very gradually; very suddenly/south much brighter middle';
		result = getDescription('B;pS;R;vg;vsmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually little/long brighter middle';
		result = getDescription('vF;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; little/long elongated/extended; much brighter middle';
		result = getDescription('B;pS;lE;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably small; round; gradually brighter middle; preceding of 2';
		result = getDescription('eF;cS;R;gbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; gradually brighter middle; following of 2';
		result = getDescription('eF;S;R;gbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; round; suddenly/south brighter middle star of 17th magnitude; star of 10th magnitude 70 degree';
		result = getDescription('pF;vS;R;sbM *17;*10 70 deg');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; much elongated/extended; very gradually brighter middle';
		result = getDescription('F;pL;mE;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; preceding rich; irregular round; stars 10th magnitude and fainter th magnitude and fainter';
		result = getDescription('Cl;L;pRi;iR;st10...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; round; stars attached; preceding of 2';
		result = getDescription('vF;cS;R;* att;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; suddenly/south little/long brighter middle; following of 2';
		result = getDescription('vF;vS;R;slbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; 3 or 4 stars 11 - 12 following';
		result = getDescription('eF;3 or 4 * 11-12 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; triangle 2 stars 8; 9; following';
		result = getDescription('vF;R;tri 2 * 8;9;f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; brighter middle; stars following 6 arcseconds';
		result = getDescription('pB;S;R;bM;* f 6sec');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; preceding of 2';
		result = getDescription('eeF;S;R;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; following of 2';
		result = getDescription('F;S;R;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; very gradually little/long brighter middle';
		result = getDescription('F;pL;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; very large; very much elongated/extended 39';
		result = getDescription('B;vL;vmE39');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; round; gradually pretty much brighter middle; preceding of 2';
		result = getDescription('B;pS;R;gpmbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; pretty suddenly little/long brighter middle; following of 2';
		result = getDescription('eF;S;R;pslbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; among 3 small stars';
		result = getDescription('vF;pS;am 3 S *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; round; gradually much brighter middle';
		result = getDescription('B;pL;R;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('vF;S;E;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably small; round; among 4 stars';
		result = getDescription('pB;cS;R;am 4*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; gradually brighter middle; star of 7th magnitude north following';
		result = getDescription('pB;pL;R;gbM;*7 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; elongated/extended; suddenly/south compressed stars 11th magnitude and fainter';
		result = getDescription('Cl;P;E;sC st11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; very rich; stars 11th magnitude and fainter';
		result = getDescription('Cl;vL;vRi;st11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('eF;vS;E;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; stars near';
		result = getDescription('eF;vS;R;* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; pretty suddenly little/long brighter middle';
		result = getDescription('B;S;R;pslbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; 1 stars of 4';
		result = getDescription('vF;S;R;1st of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; 2 north diameter of 4';
		result = getDescription('eF;vS;R;2nd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; 3 resolvable (mottled not resolved) diameter of 4';
		result = getDescription('pB;pL;R;3rd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; very little/long elongated/extended; 4th of 4';
		result = getDescription('cF;S;vlE;4th of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty small; round; suddenly/south very much brighter middle';
		result = getDescription('vB;pS;R;svmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; preceding of 2';
		result = getDescription('eeF;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; little/long elongated/extended; pretty suddenly brighter middle; following of 2';
		result = getDescription('F;lE;psbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; small; round; pretty suddenly much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cB;S;R;psmbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long elongated/extended';
		result = getDescription('vF;S;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/very remarkable object very bright; very large; very much elongated/extended 122; brighter if irregular diameter';
		result = getDescription('!!vB;vL;vmE122;bifid');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; Eridanus; much compressed; stars 12th magnitude and fainter th to 16th magnitude';
		result = getDescription('Cl;eRi;mC;st12...16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually little/long brighter middle';
		result = getDescription('vF;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'a magnificent or otherwise interesting object extremely/excessively large; bright; Eridanus; very very compressed';
		result = getDescription('!!!eL;B;eRi;vvC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; rich; little/long compressed; stars 11th magnitude and fainter';
		result = getDescription('Cl;Ri;lC;st11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably small; irregular elongated/extended; gradually little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;cS;iE;glbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; very much elongated/extended; pretty gradually brighter middle; partially resolved some stars seen';
		result = getDescription('pF;L;vmE;pgbM;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very rich';
		result = getDescription('Cl;vRi');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very faint; small; very rich; stars 15th magnitude and fainter';
		result = getDescription('Cl;vF;S;vRi;st15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; very little/long elongated/extended; very gradually little/long brighter middle';
		result = getDescription('F;pL;vlE;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; gradually; pretty suddenly brighter middle';
		result = getDescription('pB;S;R;g;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; very gradually brighter middle';
		result = getDescription('F;pL;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small';
		result = getDescription('eF;eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; star of 10th magnitude following';
		result = getDescription('vF;S;R;*10f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; little/long elongated/extended';
		result = getDescription('eeF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; considerably elongated/extended; very gradually little/long brighter middle';
		result = getDescription('F;pL;cE;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; very gradually little/long brighter middle; star of 13th magnitude attached';
		result = getDescription('vF;S;R;vglbM;*13 att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; elongated in position angle 45 degrees; pretty suddenly much brighter middle';
		result = getDescription('B;pL;E45;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; very little/long elongated/extended; very gradually little/long brighter middle; 3 stars near';
		result = getDescription('B;pL;vlE;vglbM;3st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; large; irregular figure; stars 12th magnitude and fainter';
		result = getDescription('Cl;P;L;iF;st 12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; round; well resolved clearly consisting of stars; stars 15th magnitude and fainter';
		result = getDescription('vB;pL;R;rrr;st 15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; bright; small; preceding compressed; irregular round; stars from 10th to 12th magnitude';
		result = getDescription('Cl;B;S;pC;iR;*10..12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; very rich; stars 7th magnitude and fainter th to 16th magnitude';
		result = getDescription('Cl;L;vRi;st7...16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; very little/long brighter middle; double star preceding';
		result = getDescription('vF;R;vlbM;**p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; 2 stars near';
		result = getDescription('pF;S;R;2st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle';
		result = getDescription('F;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle';
		result = getDescription('F;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; little/long elongated/extended; very faint stars following';
		result = getDescription('eF;pS;lE;vF *f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; very rich';
		result = getDescription('Cl;vL;vRi');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'poor little/long north or very faint; extremely/excessively small; double nebula';
		result = getDescription('Pln or vf;eS;Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; preceding compressed; stars 11th magnitude and fainter';
		result = getDescription('Cl;pL;pC;st11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; star of 8th magnitude following';
		result = getDescription('vF;vS;R;*8f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually little/long brighter middle; between 2 stars 10';
		result = getDescription('pF;S;R;glbM;bet 2*10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; very suddenly/south much brighter middle double star';
		result = getDescription('vB;vL;vsmbM**');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably small; round; pretty gradually brighter middle; among stars';
		result = getDescription('pB;cS;R;pgbM;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; rich; very compressed; pretty large; stars from 11th to 12th magnitude';
		result = getDescription('Cl;Ri;vC;pL;*11...12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually brighter middle';
		result = getDescription('vF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; very gradually brighter middle';
		result = getDescription('pB;pL;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; elongated/extended between 2 very small stars';
		result = getDescription('eF;E bet 2vS*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; gradually pretty much brighter middle';
		result = getDescription('pB;pL;R;gpmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; very little/long compressed; stars 8th magnitude and fainter th magnitude and fainter';
		result = getDescription('Cl;vL;vlC;st8...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round; star of 8th magnitude suddenly/south near';
		result = getDescription('F;R;*8s nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very large; round; very gradually brighter middle';
		result = getDescription('pF;vL;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle';
		result = getDescription('vF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; round; gradually brighter middle; partially resolved some stars seen';
		result = getDescription('pB;L;R;gbM;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; pretty suddenly brighter middle; small double star north following';
		result = getDescription('pF;S;R;psbM;S** nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; preceding compressed; stars large and small';
		result = getDescription('Cl;S;pC;st L and S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; preceding rich; preceding compressed middle; stars 8th magnitude and fainter th magnitude and fainter';
		result = getDescription('Cl;L;pRi;pCM;st8...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; preceding rich; little/long compressed; stars 9th magnitude and fainter th magnitude and fainter';
		result = getDescription('Cl;L;pRi;lC;st9...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; much elongated/extended; bright stars south following';
		result = getDescription('F;mE;B* sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - faint; small; north compressed; 12 faint stars at 135X';
		result = getDescription('13\'\'-F;S;nC; 12 F* at 135X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object most extremely faint; most extremely large';
		result = getDescription('!eeF;eeL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + round';
		result = getDescription('E+R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - very very faint; very very large; just a field brightning with UHC';
		result = getDescription('13\'\'-vvF;vvL; just a field brghtning with UHC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; very suddenly/south much brighter middle; large stars in contact following';
		result = getDescription('F;vS;R;vsmbM;L*cont f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; round; 150 - 200 stars from 10th to 18th magnitude';
		result = getDescription('Cl;vL;R;150-200  st 10...18');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; much elongated/extended';
		result = getDescription('F;pL;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '11 arcseconds - very faint; pretty small; little/long bright middle; difficult object; averted vision helps';
		result = getDescription('11\'\'-vF; pS; lBM; difficult object; averted viz helps');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; VS';
		result = getDescription('vF;VS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty large; faint; little/long brighter middle';
		result = getDescription('pL;F;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; little/long elongated/extended; brighter middle';
		result = getDescription('pB;pL;lE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; Eridanus; preceding compressed middle; stars from 11th to 16th magnitude';
		result = getDescription('Cl;pL;eRi;pCM;*11..16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very large; very gradually; very suddenly/south brighter middle; partially resolved some stars seen';
		result = getDescription('vF;vL;vg;vsbM;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; irregular round';
		result = getDescription('eF;pS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; little/long elongated/extended';
		result = getDescription('pB;pL;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; oval; diffused; star of 15th magnitude near following';
		result = getDescription('pB;oval;dif;*15 nr f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty large; round; very difficult';
		result = getDescription('eeF;pL;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '11 arcseconds 60X easy dark lane across field with double star involved';
		result = getDescription('11\'\' 60X easy dark lane across field w ** invol');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 7th magnitude in extremely/excessively faint; extremely/excessively large; nebula';
		result = getDescription('*7 in eF;eL;neby');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '11 arcseconds 60X prominent dark oval with 4 10th magnitude stars around edge';
		result = getDescription('11\'\' 60X prominent dark oval with 4 10m * around edge');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; faint; pretty small; poor';
		result = getDescription('Cl;F;pS;P');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; easily resolvable';
		result = getDescription('vF;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - faint; pretty small; round; very little/long bright middle; UHC helps some';
		result = getDescription('13\'\'-F; pS; R; vlBM; UHC helps some');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; extremely/excessively large nebula; including Struve 2816';
		result = getDescription('F;eL neby;incl Struve 2816');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object; considerably faint; pretty large; gradually brighter middle triple star';
		result = getDescription('!;cF;pL;gbM***');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large';
		result = getDescription('vF;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; considerably large; considerably rich; preceding compressed; stars from 11th to 14th magnitude';
		result = getDescription('Cl;cL;cRi;pC;*11..14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; round; resolvable (mottled not resolved)';
		result = getDescription('vF;cS;R;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; very little/long compressed';
		result = getDescription('Cl;P;vlC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '4 arcseconds - bright; very large; scattered; north rich; 23 stars in 2 degree';
		result = getDescription('4\'\'-B; vL; scatt; nRi; 23* in 2 deg');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; in cluster';
		result = getDescription('pB;L;in cluster');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; poor; little/long compressed';
		result = getDescription('Cl;S;P;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding compressed; has a ruby star of 10th magnitude';
		result = getDescription('Cl;pC;has a ruby *10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; pretty large; round; center star easy at 320X';
		result = getDescription('13\'\'-pF; pL; R; cent* easy at 320X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; preceding rich; little/long compressed';
		result = getDescription('Cl;L;pRi;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; small; north rich; considerably compressed at 165X; 17 stars including 10th magnitude orange star on elongated/extended side';
		result = getDescription('13\'\'-pF; S; nRi; cC at 165X; 17* incl 10m Or* on E side');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; preceding rich; little/long compressed; stars from 10th to 16th magnitude';
		result = getDescription('Cl;L;pRi;lC;*10...16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; preceding rich; very little/long compressed';
		result = getDescription('Cl;vL;pRi;vlC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; pretty gradually very little/long brighter middle';
		result = getDescription('B;S;R;pgvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; star of 7th magnitude 4 arcminutes following';
		result = getDescription('vF;S;* 7 mag 4\' foll');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; preceding rich; little/long compressed; stars from 9th to 13th magnitude';
		result = getDescription('Cl;pL;pRi;lC;*9...13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; considerably compressed';
		result = getDescription('Cl;pRi;cC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular figure; easily resolvable';
		result = getDescription('vF;pL;iF;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; preceding compressed; stars from 9th to 11th magnitude';
		result = getDescription('Cl;P;pC;*9...11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '11 arcseconds - faint; large; irregular faint; elongated/extended north-south; 5 stars involved/involving; brighter near 9th magnitude stars';
		result = getDescription('11\'\'-F; L; irF; E N-S; 5* invl; b near 9th mag*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stars Nucleus or to a Nucleus on north edge';
		result = getDescription('vF;vS;*N on n edge');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; pretty small; north compressed; 12 stars at 165X';
		result = getDescription('13\'\'-pF;pS;nC; 12* at 165X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; preceding compressed; fan-shaped; stars pretty bright';
		result = getDescription('Cl;pRi;pC;fan-sh;*pB');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; 2 pretty bright stars involved/involving';
		result = getDescription('vF;L;2pB* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - faint; pretty small; compressed at 165X; 3 stars and some haze';
		result = getDescription('13\'\'-F; pS; C at 165X; 3* and some haze');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - very faint; pretty small; round; little/long bright middle at 220X; UHC really helps';
		result = getDescription('13\'\'-vF; pS; R; lBM at 220X; UHC really helps');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; poor; little/long compressed; stars 8th magnitude and fainter; 10th to 15th magnitude';
		result = getDescription('Cl;L;P;lC;st 8;10...15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very large nebula; surrounds star of 7th magnitude';
		result = getDescription('vL neby;surrounds *7');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; preceding compressed; stars from 11th to 15th magnitude';
		result = getDescription('Cl;pRi;pC;*11...15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; irregular figure';
		result = getDescription('eF;pS;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - very faint; large; elongated/extended 2X1 in position angle 15; little/long bright middle; low surface brtns';
		result = getDescription('13\'\'-vF; L; E 2X1 in PA 15; lBM; low surf brtns');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; stellar Nucleus or to a Nucleus; star of 8.5 magnitude south preceding 3 arcminutes';
		result = getDescription('eF;vS;R;stell N;*8.5 sp 3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; elongated/extended 160; star of 8.5 magnitude preceding 49 arcseconds; 2 stars 9th magnitude north 8arcminutes';
		result = getDescription('eF;vS;E 160;*8.5 p 49\'\';2*9m n 8\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; irregular figure; gradually little/long brighter middle';
		result = getDescription('vF;pS;iF;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very poor; very little/long compressed; 4 faint stars nebula';
		result = getDescription('Cl;vP;vlC;4 F* neby');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; elongated/extended 130 degree; suddenly/south brighter middle Nucleus or to a Nucleus; star of 15th magnitude south following';
		result = getDescription('pF;S;E 130 deg;sbMN;*15 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; (nebulous??); following of 2';
		result = getDescription('eF;eS;R;(neb?);f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; irregular round; double star of 2th magnitude arcminutes preceding';
		result = getDescription('vF;eS;iR;D*2\'p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; 2 stars near';
		result = getDescription('pF;S;R;2 st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round';
		result = getDescription('eeF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; large; very gradually very little/long brighter middle; large stars in contact following';
		result = getDescription('eF;L;vgvlbM;L*cont f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round';
		result = getDescription('vF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; 5092 south preceding';
		result = getDescription('vF;pS;R;5092 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; irregular round; gradually brighter middle';
		result = getDescription('vF;pS;iR;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; gradually little/long brighter middle';
		result = getDescription('F;vS;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; round; very difficult';
		result = getDescription('eeF;vS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; extremely/excessively faint double stars close following';
		result = getDescription('vF;S;R;eF D*close f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; gradually brighter middle; preceding of 2';
		result = getDescription('eF;vS;R;gbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; elongated/extended; 225 degrees; star of 9th magnitude north 1 arcminutes following of 2';
		result = getDescription('eF;pS;E;225 degrees;*9n1\'f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; irregular figure(star?); star of 9th magnitude preceding 3 arcminutes';
		result = getDescription('eF;vS;iF(?*);*9p3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; star of 7th magnitude south following 5 arcminutes';
		result = getDescription('F;pL;* 7 sf 5\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; little/long brighter middle; star of 8th magnitude; 5 preceding 36; north 2 arcminutes (? = 113)';
		result = getDescription('vF;S;R;lbM;* 8;5 p 36;n2\' (?=113)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; suddenly/south brighter middle';
		result = getDescription('vF;S;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small stars in center; preceding of 2';
		result = getDescription('vF;S * in centr;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small';
		result = getDescription('F;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small stars in center; following of 2';
		result = getDescription('vF;S * in centr;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebulous stars';
		result = getDescription('Nebulous *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2 very faint nebula 4 arcminutes - 5arcminutes north preceding of star of 8.5 magnitude much';
		result = getDescription('2vf neb 4\'-5\' np of * 8.5m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2 very faint nebula 4 arcminutes - 5arcminutes north preceding of star of 8.5 magnitude much';
		result = getDescription('2vF neb 4\'-5\' np of * 8.5m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; diffused; 2 following stars north preceding';
		result = getDescription('vF;L;dif;2 f st np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably large; round; very gradually little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pF;cL;R;vglbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended; 1 stars of 3';
		result = getDescription('eF;S;lE;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; much elongated/extended; 2 north diameter of 3';
		result = getDescription('eF;S;mE;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('eF;vS;R;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; very little/long elongated/extended; very gradually brighter middle; star of 8th magnitude - 9 following 5 arcminutes';
		result = getDescription('F;pL;vlE;vgbM;*8-9 f 5\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; little/long elongated/extended 90 degrees; very gradually little/long brighter middle';
		result = getDescription('pF;pL;lE 90 degrees;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; stars near north following';
		result = getDescription('pF;pS;R;* nr nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; north preceding 157';
		result = getDescription('vS;np 157');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round';
		result = getDescription('pF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; elongated/extended; between 2 considerably bright stars';
		result = getDescription('pB;L;E;bet 2 cB st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; north following 157';
		result = getDescription('vS;nf 157');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; irregular round';
		result = getDescription('vF;pS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; nearly between 2 stars';
		result = getDescription('eF;eS;R;nearly bet 2 st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended; star of 11th magnitude north preceding';
		result = getDescription('eF;S;lE;*11 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; stars in centre; following of 2';
		result = getDescription('F;L;st in centre;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated/extended 30 degrees; star of 10th magnitude north following 3 arcminutes';
		result = getDescription('eF;S;E 30 degrees;*10 nf 3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated/extended';
		result = getDescription('eF;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; very gradually brighter middle; star of 11th magnitude south preceding 80 arcseconds';
		result = getDescription('vF;S;R;vgbM;*11 sp 80\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; little/long elongated/extended; 2 pretty bright stars south following';
		result = getDescription('vF;pL;lE;2 pB st sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; elongated/extended; gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;pL;E;gbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated/extended 175 degrees; (star?)';
		result = getDescription('eF;S;E 175 degrees;(?*)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; bright stars north preceding';
		result = getDescription('eF;eS;R;B * np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; irregular elongated/extended 0 degrees';
		result = getDescription('pB;pL;iE 0 degrees');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; much elongated/extended 0 degrees; brighter middle';
		result = getDescription('F;S;mE 0 degrees;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle';
		result = getDescription('vF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; pretty much elongated/extended; brighter middle';
		result = getDescription('F;pS;pmE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; pretty suddenly much brighter middle';
		result = getDescription('F;pS;R;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; suddenly/south of 196';
		result = getDescription('eF;s of 196');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; much elongated/extended 150 degrees; brighter middle';
		result = getDescription('F;S;mE 150 degrees;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint';
		result = getDescription('F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably large; elongated/extended; very gradually little/long brighter middle';
		result = getDescription('vF;cL;E;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended; stellar';
		result = getDescription('vF;S;lE;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; round; pretty suddenly brighter middle; resolvable (mottled not resolved); star of 11th magnitude preceding 2 arcminutes';
		result = getDescription('B;pS;R;psbM;r;* 11 p 2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; little/long elongated/extended';
		result = getDescription('eF;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended 90 degrees; gradually little/long brighter middle';
		result = getDescription('F;S;lE 90 degrees;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; star of 11th magnitude south preceding 1 arcminutes';
		result = getDescription('F;S;R;*11 sp 1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round';
		result = getDescription('vF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;eS;R;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; little/long brighter middle';
		result = getDescription('F;pL;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;S;R;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended; little/long brighter middle';
		result = getDescription('vF;pS;lE;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; elongated/extended 20 degrees; brighter middle Nucleus or to a Nucleus; star of 8th magnitude following 20 seconds';
		result = getDescription('pF;pS;E 20 degrees;bMN;* 8 f 20 secs.');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round; resolvable (mottled not resolved); star of 10th magnitude suddenly/south 5 arcminutes';
		result = getDescription('vF;S;iR;r;* 10 s 5\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; irregular figure; easily resolvable';
		result = getDescription('F;pS;iF;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; extremely/excessively large; very much elongated/extended 172 degrees';
		result = getDescription('F;eL;vmE 172 degrees');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; gradually brighter middle';
		result = getDescription('F;pS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended 135 degrees; little/long brighter middle';
		result = getDescription('F;S;E 135 degrees;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; little/long elongated/extended 30 degrees';
		result = getDescription('eF;vS;lE 30 degrees');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; irregular little/long elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('vF;pS;ilE;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; irregular round; pretty gradually brighter middle';
		result = getDescription('pF;vS;iR;pgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; little/long elongated/extended; pretty suddenly brighter middle; star of 8th magnitude following 5 seconds';
		result = getDescription('pF;S;lE;psbM;* 8 f 5 sec.');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; suddenly/south much brighter middle; north preceding of 2';
		result = getDescription('pB;pS;smbM;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; south following of 2';
		result = getDescription('vF;S;R;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; star of 11th magnitude north preceding';
		result = getDescription('F;pS;* 11 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; elongated/extended 265 degrees; star of 11th magnitude north 3 arcminutes';
		result = getDescription('eF;pS;E 265 degrees;* 11 n 3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round; brighter middle; stellar';
		result = getDescription('vF;S;iR;bM;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; 1 stars of 4';
		result = getDescription('eF;S;R;1st of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; 2 north diameter of 4';
		result = getDescription('eF;S;R;2nd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; 3 resolvable (mottled not resolved) diameter of 4';
		result = getDescription('eF;S;R;3rd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; 4th of 4';
		result = getDescription('eF;S;R;4th of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended; almost stellar';
		result = getDescription('vF;vS;lE;alm stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint';
		result = getDescription('pF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; irregular round; gradually brighter middle; star of 8th magnitude preceding 30 seconds';
		result = getDescription('eF;S;iR;gbM;* 8 p 30 sec.');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; elongated/extended';
		result = getDescription('pF;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; 1 arcminutes suddenly/south faint NGC 307';
		result = getDescription('vF;eS; 1\' sF NGC  307');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; star of 12.13 magnitude north';
		result = getDescription('pB;pL;* 12.13 n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar';
		result = getDescription('stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; little/long brighter middle; star of 12th magnitude north following 3 arcminutes';
		result = getDescription('eF;vS;R;lbM;* 12 nf 3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended';
		result = getDescription('F;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; elongated/extended';
		result = getDescription('F;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; suddenly/south brighter middle';
		result = getDescription('vF;vS;R;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; irregular round; suddenly/south brighter middle Nucleus or to a Nucleus; (star?)';
		result = getDescription('eF;vS;iR;sbMN;(?*)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; irregular round; suddenly/south brighter middle Nucleus or to a Nucleus; (star?)';
		result = getDescription('eF;vS;iR;sbMN;(?*)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'inner regions very Black--MCG';
		result = getDescription('Inner Regions Very Black--MCG');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; elongated/extended 160 degrees; star of 10th magnitude north';
		result = getDescription('vF;pS;E 160 degrees;* 10 n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; elongated/extended; brighter middle';
		result = getDescription('vF;pS;E;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; elongated/extended; gradually little/long brighter middle; star of 10th magnitude following 21 arcseconds';
		result = getDescription('pF;L;E;glbM;* 10 f 21 sec');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended';
		result = getDescription('vF;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;pL;R;lbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; VS';
		result = getDescription('vF;VS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; gradually brighter middle';
		result = getDescription('vF;vS;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; north preceding of 2';
		result = getDescription('eF;pS;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; irregular elongated/extended; star of 8th magnitude following 97 arcseconds';
		result = getDescription('pF;S;iE;* 8 f 97 sec');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; south following of 2';
		result = getDescription('eF;pS;R;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round';
		result = getDescription('vF;S;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular round; suddenly/south brighter middle; star of 14th magnitude north following 20 arcseconds';
		result = getDescription('F;S;iR;sbM;* 14 nf 20\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; extremely/excessively large';
		result = getDescription('F;eL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round; outer arms dim';
		result = getDescription('F;R; outer arms dim');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; gradually brighter middle';
		result = getDescription('vF;vS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; elongated/extended 175 degrees; brightest towards the north side; 3 stars 12th magnitude and fainter north preceding';
		result = getDescription('eF;pS;E 175 degrees;bn;3 st 12 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round';
		result = getDescription('eF;eS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; much elongated/extended; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;vS;mE;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; resolvable (mottled not resolved) (Auw. 9)';
		result = getDescription('F;S;r (Auw.9)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; round; suddenly/south brighter middle Nucleus or to a Nucleus; (nebulous??)';
		result = getDescription('vF;eS;R;sbMN;(neb?)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round';
		result = getDescription('eF;eS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; very little/long elongated/extended';
		result = getDescription('eF;pS;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; round; brighter middle; easily resolvable';
		result = getDescription('F;L;R;bM;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; very suddenly/south brighter middle stars';
		result = getDescription('F;vS;R;vsbM*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated/extended';
		result = getDescription('eF;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; bright stars south following';
		result = getDescription('vF;S;R;B * sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; little/long elongated/extended';
		result = getDescription('pB;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large';
		result = getDescription('vF;L');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;eS;R;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; (nebula)';
		result = getDescription('eF;vS;R;(neb)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; faint stars north preceding';
		result = getDescription('vF;vS;R;F* np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; much elongated/extended 60; little/long brighter middle';
		result = getDescription('vF;L;mE60;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; very little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('eF;pS;R;vlbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; round; very difficult';
		result = getDescription('eeF;vS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; gradually brighter middle';
		result = getDescription('F;pL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; much elongated/extended; faint stars south following';
		result = getDescription('eF;S;mE;F* sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; much elongated/extended; faint stars Nucleus or to a Nucleus';
		result = getDescription('eF;S;mE;F*N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended; brighter middle Nucleus or to a Nucleus; several faint stars near';
		result = getDescription('vF;pS;lE;bMN;sev F* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; gradually brighter middle';
		result = getDescription('pB;pL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; 1 stars of 3';
		result = getDescription('vF;vS;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle';
		result = getDescription('F;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small';
		result = getDescription('eF;eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar; preceding of double nebula';
		result = getDescription('stellar;p of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar; following of double nebula';
		result = getDescription('stellar;f of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small';
		result = getDescription('eF;eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; star of 10th magnitude north following';
		result = getDescription('eF;S;R;*10 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated in position angle 90 degrees; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;S;E90;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;vS;R;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; elongated/extended; 1 stars of 3; star of 11th magnitude following';
		result = getDescription('eF;vS;E;1st of 3;*11f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; irregular round; 2 north diameter of 3';
		result = getDescription('eF;S;iR;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('eF;vS;R;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated/extended; star of 10th magnitude preceding';
		result = getDescription('eF;S;E;*10p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended; preceding of 2';
		result = getDescription('vF;vS;lE;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular figure; following of 2';
		result = getDescription('vF;vS;iF;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; elongated/extended; (binary)';
		result = getDescription('S;E;(Bin)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; much brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;pL;R;mbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; pretty much elongated/extended; gradually pretty much brighter middle';
		result = getDescription('B;L;pmE;gpmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint';
		result = getDescription('F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round';
		result = getDescription('pF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; round; much brighter middle; preceding of 2';
		result = getDescription('vB;pL;R;mbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle';
		result = getDescription('vF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small cluster; little/long elongated/extended; nebulosity';
		result = getDescription('vS Cl;lE;nebulosity');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually brighter middle Nucleus or to a Nucleus; star of 10th magnitude south preceding 2 arcminutes';
		result = getDescription('vF;S;R;gbMN;*10 sp 2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; round; brighter middle; resolvable (mottled not resolved); star of 6th magnitude following 12 arcminutes';
		result = getDescription('pB;R;bM;r;*6f12\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular figure; extremely/excessively round';
		result = getDescription('F;S;iF;eR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; elongated/extended; gradually little/long brighter middle';
		result = getDescription('F;pS;E;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint';
		result = getDescription('eeF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; 4 arcminutes south following 599';
		result = getDescription('vF;vS;R;4\' sf 599');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; very gradually brighter middle; star of 10th magnitude preceding 2 arcminutes';
		result = getDescription('eF;vS;R;vgbM;*10p2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; (faint stars ); 30 arcseconds north following 610';
		result = getDescription('eF;vS;(F*);30\'\' nf 610');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended';
		result = getDescription('eF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 11th magnitude; nebulosity';
		result = getDescription('*11;nebulosity');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; irregular little/long elongated/extended; gradually brighter middle; star of 8th magnitude north preceding 10';
		result = getDescription('pB;pL;ilE;gbM;*8 np 10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; among very small stars';
		result = getDescription('eF;S;am vS st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; diffused';
		result = getDescription('eF;pL;dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; very little/long elongated/extended; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;vS;vlE;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; round; much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;vS;R;mbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended 170; little/long brighter middle Nucleus or to a Nucleus; stars small 4 arcminutes';
		result = getDescription('eF;S;lE170;lbMN;*S4\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; little/long elongated/extended 160; brighter middle Nucleus or to a Nucleus; star of 8th magnitude following';
		result = getDescription('eF;pS;lE160;bMN;*8 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated in position angle 0 degrees; (bright middle double stars )';
		result = getDescription('eF;S;E0;(BMD*)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; gradually brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;eS;gbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; star of 10th magnitude north preceding 100 arcseconds';
		result = getDescription('eF;S;R;*10 np 100\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; little/long brighter middle';
		result = getDescription('vF;vS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; gradually very little/long brighter middle';
		result = getDescription('cF;S;R;gvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably large; round; gradually little/long brighter middle; small stars preceding 90 arcseconds';
		result = getDescription('pF;cL;R;glbM;S*p90\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; elongated in position angle 105 degrees; bright north preceding; curved';
		result = getDescription('eF;pS;E105;B np;curved');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; elongated/extended; very gradually very little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;pL;E;vgvlbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very little/long elongated/extended 0; star of 13th magnitude suddenly/south 90 arcseconds';
		result = getDescription('eF;vlE 0;*13s90\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; faint star center';
		result = getDescription('vF;F*centre');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; little/long elongated/extended; pretty suddenly much brighter middle';
		result = getDescription('cB;pL;lE;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; gradually brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;S;gbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; round; very gradually brighter middle';
		result = getDescription('pF;vS;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; brighter middle Nucleus or to a Nucleus';
		result = getDescription('F;vS;R;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; stellar';
		result = getDescription('eF;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; gradually brighter middle Nucleus or to a Nucleus; (= 755)';
		result = getDescription('F;S;gbMN;(=755)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle Nucleus or to a Nucleus; star of 11th magnitude preceding';
		result = getDescription('vF;vS;R;bMN;*11p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; elongated in position angle 90 degrees; gradually little/long brighter middle Nucleus or to a Nucleus; stars north preceding';
		result = getDescription('eF;pS;E90;glbMN;* np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular round; star of 9th magnitude 3 arcminutes following';
		result = getDescription('vF;pL;iR;*9 3\'f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; star of 9th magnitude north preceding';
		result = getDescription('pF;*9 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; very little/long elongated/extended';
		result = getDescription('vF;pS;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; elongated in position angle 65 degrees; gradually brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;pL;E65;gbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended; very gradually little/long brighter middle';
		result = getDescription('vF;S;lE;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; irregular round; gradually brighter middle';
		result = getDescription('eF;vS;iR;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; little/long elongated/extended 180';
		result = getDescription('eF;pS;lE180');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; star of 8th magnitude following 30 arcseconds';
		result = getDescription('eF;pS;R;*8 f 30\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; elongated in position angle 160 degrees';
		result = getDescription('eF;pS;E160');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; elongated in position angle 0 degrees; gradually little/long brighter middle';
		result = getDescription('cF;pL;E0;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; large; much elongated/extended 162; much brighter middle';
		result = getDescription('cB;L;mE162;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; brighter middle';
		result = getDescription('pF;pS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; round; brighter middle';
		result = getDescription('cF;cS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; north of 2';
		result = getDescription('eeF;pS;R;n of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; suddenly/south of 2';
		result = getDescription('eeF;S;R;s of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; very difficult; pretty bright stars Nucleus or to a Nucleus';
		result = getDescription('eeF;S;R;v diffic;pB*N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; very little/long elongated/extended';
		result = getDescription('vF;pS;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round(nebula); star of 10th magnitude suddenly/south 1 arcminutes';
		result = getDescription('eF;eS;R(neb);*10 s 1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; much elongated/extended';
		result = getDescription('F;S;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; star of 11th magnitude small; 1 stars of 3';
		result = getDescription('F;S;*11S;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended; brighter middle; among stars';
		result = getDescription('vF;S;E;bM;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; round; 2 north diameter of 3';
		result = getDescription('pF;vS;R;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; 1 stars of 4';
		result = getDescription('F;S;R;1st of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; 2 north diameter of 4';
		result = getDescription('F;S;R;2nd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small';
		result = getDescription('vF;pS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; 3 resolvable (mottled not resolved) diameter of 4';
		result = getDescription('vF;vS;R;3rd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; 4th of 4';
		result = getDescription('vF;pS;R;4th of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; pretty suddenly brighter middle; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('vF;vS;R;psbM;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small';
		result = getDescription('F;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round(nebula)';
		result = getDescription('eF;vS;R(neb)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; much elongated/extended 0; star of 10th magnitude north 1 arcminutes';
		result = getDescription('eF;pS;mE0;*10n1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty large; very difficult; stars north following';
		result = getDescription('eeF;pL;v diffic;* nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; gradually brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;S;R;gbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; gradually brighter middle';
		result = getDescription('eF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; gradually brighter middle';
		result = getDescription('eF;vS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; irregular figure';
		result = getDescription('eF;eS;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; very difficult';
		result = getDescription('eF;pS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended';
		result = getDescription('F;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round';
		result = getDescription('eF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended; faint stars close following';
		result = getDescription('eF;S;lE;F* close foll');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; little/long brighter middle';
		result = getDescription('pF;pS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; brighter middle; stellar';
		result = getDescription('vF;R;bM;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; little/long brighter middle';
		result = getDescription('pF;pS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; little/long brighter middle';
		result = getDescription('vF;pS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; much elongated/extended 0; gradually very little/long brighter middle';
		result = getDescription('vF;pS;mE0;gvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably large; round; gradually brighter middle';
		result = getDescription('eF;cL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round';
		result = getDescription('eF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; elongated in position angle 170 degrees; (double stars ); stars north preceding';
		result = getDescription('eF;pS;E170;(D*);* np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; very gradually little/long brighter middle';
		result = getDescription('F;pL;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; irregular round; brighter middle';
		result = getDescription('eF;pS;iR;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; brighter middle';
		result = getDescription('eF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; (= 867)';
		result = getDescription('vF;vS;(=867)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;vS;R;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; elongated/extended; brighter middle; 2 or 3 stars near';
		result = getDescription('F;pS;E;bM;2or3* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; very little/long elongated/extended; brighter middle; double stars near';
		result = getDescription('pF;pS;vlE;bM;D* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular round; pretty gradually brighter middle';
		result = getDescription('F;S;iR;pgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; (elongated/extended); (nebula)';
		result = getDescription('eF;eS;(E);(neb)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; elongated/extended; brighter middle; double nebula with 895';
		result = getDescription('vF;E;bM;Dneb w 895');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very large; irregular round; gradually brighter middle; double nebula with 894';
		result = getDescription('F;vL;iR;gbM;Dneb w 894');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; gradually brighter middle; double stars preceding; resolvable (mottled not resolved)';
		result = getDescription('pB;S;gbM;D*p;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; (stars)';
		result = getDescription('eF;eS;R;(*)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated in position angle 90 degrees; gradually brighter middle';
		result = getDescription('F;S;E90;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; very large; elongated/extended';
		result = getDescription('cB;vL;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small';
		result = getDescription('vF;pS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; gradually brighter middle';
		result = getDescription('eF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; much elongated/extended 0 degree; suddenly/south brighter middle';
		result = getDescription('eF;S;mE 0 deg;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated in position angle 170 degrees; star of 8.5 magnitude north 4 arcminutes';
		result = getDescription('eF;S;E170;*8.5n4\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small';
		result = getDescription('vF;eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; round; much brighter middle Nucleus or to a Nucleus; preceding of 2';
		result = getDescription('vB;vL;R;mbMN;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably large; round; following of 2';
		result = getDescription('vF;cL;R;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; irregular round; gradually little/long brighter middle';
		result = getDescription('vF;L;iR;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; elongated/extended; gradually brighter middle';
		result = getDescription('pB;E;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated in position angle 0 degrees; (double stars )';
		result = getDescription('eF;S;E0;(D*)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; double nebula with 943; faint nucleus';
		result = getDescription('vF;R;Dneb w 943; F nucl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; (nebula double stars )';
		result = getDescription('vF;R;(neb D*)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; gradually brighter middle';
		result = getDescription('eF;S;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('eF;S;R;gbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; elongated/extended; pretty suddenly brighter middle';
		result = getDescription('pB;S;E;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; irregular little/long elongated/extended; brighter middle';
		result = getDescription('pF;ilE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; (nebula); star of 9th magnitude south preceding';
		result = getDescription('eF;vS;R;(neb);*9 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; round; star of 9th magnitude south preceding 2 arcminutes';
		result = getDescription('eF;R;*9 sp 2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular round; gradually brighter middle';
		result = getDescription('F;S;iR;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; gradually brighter middle';
		result = getDescription('vF;S;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; gradually brighter middle';
		result = getDescription('eF;S;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; very little/long brighter middle; among scattered stars';
		result = getDescription('eF;pS;R;vlbM;am sc st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably elongated/extended';
		result = getDescription('vF;cE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; brighter middle Nucleus or to a Nucleus';
		result = getDescription('F;vS;R;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;vS;R;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula star of 7.5 magnitude much';
		result = getDescription('neb *7.5m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably large; irregular figure; very little/long brighter middle';
		result = getDescription('vF;cL;iF;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; very faint stars close';
		result = getDescription('eeF;pS;R;vF * close');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small';
		result = getDescription('F;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; little/long brighter middle';
		result = getDescription('eeF;pS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; little/long brighter middle';
		result = getDescription('eF;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; round; very much brighter middle; star of 11th magnitude preceding 2 arcseconds';
		result = getDescription('pF;vS;R;vmbM;*11p2\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; round; between 2 distance double stars';
		result = getDescription('eeF;vS;R;bet 2Dist D*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; round; very difficult';
		result = getDescription('eeF;vS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; stellar';
		result = getDescription('vF;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; stellar';
		result = getDescription('vF;eS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; irregular round; preceding of 2';
		result = getDescription('eF;eS;iR;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; elongated/extended 180; following of 2';
		result = getDescription('eF;vS;E 180;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended; little/long brighter middle; 2 bright stars preceding 20 suddenly/south';
		result = getDescription('vF;vS;lE;lbM;2B*p20s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; star of 9th magnitude south following';
		result = getDescription('eeF;pS;R;*9 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; pretty suddenly brighter middle';
		result = getDescription('F;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended';
		result = getDescription('vF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; round; much brighter middle; star of 11th magnitude north following 2 arcminutes';
		result = getDescription('cB;pL;R;mbM;*11 nf 2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; pretty suddenly brighter middle';
		result = getDescription('pF;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; very little/long elongated/extended; brighter middle; 3 stars trapezoid';
		result = getDescription('pB;S;vlE;bM;3*trapezoid');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; much elongated/extended; resolvable (mottled not resolved); star of 17th magnitude attached south following';
		result = getDescription('pF;L;mE;r;*17 att sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; much elongated/extended; very difficult';
		result = getDescription('eeF;vS;mE;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; little/long brighter middle';
		result = getDescription('eF;pS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; irregular elongated/extended 190; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;pL;iE190;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; irregular round; brighter middle';
		result = getDescription('pF;pS;iR;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; round; north preceding of 2';
		result = getDescription('F;L;R;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle';
		result = getDescription('F;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; very difficult';
		result = getDescription('eeF;pS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; south following of 2';
		result = getDescription('eeF;pS;R;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; very difficult';
		result = getDescription('eeF;S;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; elongated in position angle 230 degrees; star of 10th magnitude attached';
		result = getDescription('eF;pS;E230;*10 att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; little/long elongated/extended north preceding south following; stars attached north preceding';
		result = getDescription('eF;lE np sf;* att np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; preceding of 2; star of 10th magnitude preceding';
		result = getDescription('vF;vS;p of 2;*10p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; round; much brighter middle star of 12th magnitude';
		result = getDescription('B;pL;R;mbM*12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; following of 2';
		result = getDescription('eF;vS;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably large; irregular elongated/extended 80; brighter middle; star of 11th magnitude north 1 arcminutes';
		result = getDescription('pF;cL;iE80;bM;*11n1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; stars near small; star of 7.5 magnitude preceding';
		result = getDescription('eeF;pS;* nr S;*7.5p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; irregular round; resolvable (mottled not resolved)';
		result = getDescription('vF;pS;iR;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; irregular round; suddenly/south brighter middle partially resolved some stars seen Nucleus or to a Nucleus';
		result = getDescription('vB;pL;iR;sbMrrN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; star of 8.5 magnitude near following';
		result = getDescription('eeF;pS;R;*8.5 nr f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; elongated in position angle 0 degrees; between 2 stars';
		result = getDescription('eF;vS;E0;bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; irregular round; gradually brighter middle';
		result = getDescription('pF;S;iR;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; several very faint stars involved/involving';
		result = getDescription('eF;vS;R;sev vF st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; bright stars faint 22 suddenly/south';
		result = getDescription('vF;pS;R;B*F 22s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;vS;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; little/long brighter middle; easily resolvable';
		result = getDescription('vF;L;lbM;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; (= 1064)';
		result = getDescription('eF;eS;R;(=1064)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; irregular round';
		result = getDescription('vF;pS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; little/long brighter middle; between 2 stars';
		result = getDescription('F;S;R;lbM;bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; little/long elongated/extended; much brighter middle';
		result = getDescription('pB;cL;lE;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular round; brighter middle';
		result = getDescription('vF;pL;iR;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; 2 small stars preceding';
		result = getDescription('vF;S;R;2S * p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round';
		result = getDescription('eF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; round; brighter middle; star of 13th magnitude preceding';
		result = getDescription('vF;eS;R;bM;*13p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; resolvable (mottled not resolved); star of 14th magnitude';
		result = getDescription('vF;vS;r;*14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round';
		result = getDescription('F;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; little/long brighter middle';
		result = getDescription('vF;pS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; preceding of double nebula';
		result = getDescription('vF;S;p of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; following of double nebula';
		result = getDescription('pF;S;R;f of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; preceding of 2';
		result = getDescription('eF;S;R;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; following of 2';
		result = getDescription('eF;S;R;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle; small stars preceding 30 arcseconds';
		result = getDescription('vF;vS;R;bM;S*p30\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended; 2 faint stars close preceding';
		result = getDescription('eF;S;lE;2F* close p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; irregular little/long elongated/extended; suddenly/south brighter middle; easily resolvable';
		result = getDescription('F;vS;ilE;sbM;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually little/long brighter middle';
		result = getDescription('F;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; round; much brighter middle Nucleus or to a Nucleus = star of 9th magnitude; 10';
		result = getDescription('pB;vS;R;mbMN=*9;10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round';
		result = getDescription('pF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round';
		result = getDescription('F;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint';
		result = getDescription('F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; stellar';
		result = getDescription('F;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;vS;R;gbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; gradually brighter middle';
		result = getDescription('pF;pL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended; very little/long brighter middle; star of 15th magnitude involved/involving';
		result = getDescription('F;S;lE;vlbM;*15 inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object pretty bright; small; little/long elongated/extended; 3 small stars near';
		result = getDescription('! pB;S;lE;3 S * nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; pretty much elongated/extended; gradually brighter middle';
		result = getDescription('F;pS;pmE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; compressed; irregular round; stars 14th magnitude and fainter';
		result = getDescription('Cl;S;C;iR;st14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar = 10.5 magnitude a gradually';
		result = getDescription('stellar=10.5mag');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; little/long rich; little/long compressed; stars 11th magnitude and fainter';
		result = getDescription('Cl;vL;lRi;lC;st11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; preceding rich; compressed middle; stars from 11th to 13th magnitude';
		result = getDescription('Cl;L;pRi;CM;*11...13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; considerably large; rich; little/long compressed middle; stars from 13th to 14th magnitude';
		result = getDescription('Cl;cL;Ri;lCM;*13..14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; preceding rich; little/long compressed';
		result = getDescription('Cl;L;pRi;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; very little/long elongated/extended; pretty suddenly little/long brighter middle';
		result = getDescription('F;pS;vlE;pslbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; much elongated/extended 87; pretty suddenly little/long brighter middle round Nucleus or to a Nucleus; binuclear; ring surrounding';
		result = getDescription('pB;pL;mE87;pslbMRN;biN;ring surrounding');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; elongated/extended 45 degree; brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;pS;E 45 deg;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; in field with NGC 2211';
		result = getDescription('eF;vS;R;in field w NGC 2211');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; very gradually little/long brighter middle';
		result = getDescription('vF;pL;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small';
		result = getDescription('vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; small; round; pretty suddenly much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vB;S;R;psmbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; very gradually little/long brighter middle; 2 stars involved/involving';
		result = getDescription('F;pL;R;vglbM;2st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; round; double star preceding 270 degree; 9 0 arcseconds';
		result = getDescription('eF;R;** p 270 deg;9O\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; round; very gradually little/long brighter middle';
		result = getDescription('pB;cL;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; little/long elongated/extended; between 2 very small stars; pretty suddenly little/long brighter middle';
		result = getDescription('pF;lE;bet 2 vS*;pslbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'two nebula close together';
		result = getDescription('two neb close together');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; very little/long elongated/extended; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pF;pS;vlE;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually brighter middle; among stars';
		result = getDescription('pF;S;R;gbM;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; little/long elongated/extended; gradually brighter middle';
		result = getDescription('pF;pL;lE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '3 or 4 small stars + nebula';
		result = getDescription('3 or 4S* + neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; bright; little/long compressed; stars 8th magnitude and fainter...';
		result = getDescription('Cl;vL;B;lC;st 8...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; between stars; double nebula following';
		result = getDescription('eF;S;R;bet st;Dneb f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; round; gradually brighter middle; poor with 2293; among stars';
		result = getDescription('eF;R;gbM;P w 2293;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; round; gradually brighter middle; poor with 2292; among stars';
		result = getDescription('pB;R;gbM;P w 2292;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '10 arcseconds - bright; large; north rich; scattered; one bright stars with 27 companions';
		result = getDescription('10\'\'-B; L; nRi; scatt; one B* with 27 companions');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; scattered stars from 8th to 9th magnitude';
		result = getDescription('Cl;L;sc st 8...9');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; little/long elongated/extended; gradually brighter middle';
		result = getDescription('pB;pL;lE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright double star involved/involving in small; very faint; nebula';
		result = getDescription('pB** inv in S;vF;neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + round';
		result = getDescription('E+R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; preceding rich; gradually brighter middle; star of 10.14 magnitude';
		result = getDescription('Cl;pL;pRi;gbM;*10.14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; pretty large; irregular resolvable (mottled not resolved) at 100X with UHC; 3 branches';
		result = getDescription('13\'\'-pB;pL;irr at 100X with UHC; 3 branches');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; preceding compressed';
		result = getDescription('Cl;pRi;pC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; little/long compressed; double star taken';
		result = getDescription('Cl;lC;** taken');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; considerably rich; little/long compressed';
		result = getDescription('Cl;cRi;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '6 arcseconds - bright; very very large; north rich; scattered; 22 stars magnitude 7 to 10 at 25X';
		result = getDescription('6\'\'-B; vvL; nRi; scatt; 22* mags 7 to 10 at 25X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; little/long compressed';
		result = getDescription('Cl;P;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint nebula; perhaps 2 or 3 stars involved/involving';
		result = getDescription('vF neby;perhaps 2 or 3 st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; rich; preceding compressed; stars 9th magnitude and fainter th to 12th magnitude';
		result = getDescription('Cl;vL;Ri;pC;st9...12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very very faint; very small; part of 2359';
		result = getDescription('vvF;vS;part of 2359');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/very remarkable object; very faint; very very large; very irregular figure';
		result = getDescription('!!;vF;vvL;viF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; rich; (30 Canis major)';
		result = getDescription('Cl;pL;Ri;(30 CMA)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - on 8/10 night could not find this nebula';
		result = getDescription('13\'\'-on 8/10 night could not find this nebula');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; poor; little/long compressed';
		result = getDescription('Cl;S;P;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '6 arcseconds faint; small; little/long elongated/extended; 8 stars resolvable (mottled not resolved); not much';
		result = getDescription('6\'\'  F; S; lE; 8*r; not much');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; preceding rich; little/long compressed; stars large';
		result = getDescription('Cl;vL;pRi;lC;st L');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; very suddenly/south much brighter middle; among stars';
		result = getDescription('pF;pS;R;vsmbM;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; brighter middle; = 2380';
		result = getDescription('pF;S;R;bM;=2380');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '10X50-vB; very large; irregular round; 18 stars';
		result = getDescription('10X50-vB;vL;irR; 18*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty small; pretty much compressed; stars 12th magnitude and fainter';
		result = getDescription('Cl;pS;pmC;st12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; little/long compressed; brighter if irregular diameter; double star';
		result = getDescription('Cl;lC;bifid;**');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; pretty large; suddenly/south rich; suddenly/south compressed at 100X; 16 stars and fuzzy back';
		result = getDescription('13\'\'-pF;pL;sRi;sC at 100X; 16* and fuzzy back');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; irregular round';
		result = getDescription('eF;eS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - extremely/excessively faint; pretty small; north bright middle; round; 2 faint stars involved/involving on Nucleus or to a Nucleus side';
		result = getDescription('13\'\'-eF; pS; nBM; R; 2 F* invl on N side');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; poor; very little/long compressed; stars large';
		result = getDescription('Cl;L;P;vlC;st L');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; little/long brighter middle; stars involved/involving';
		result = getDescription('eF;S;R;lbM;* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - extremely/excessively faint; pretty small; little/long elongated/extended 1.5X1 in position angle 110; very very little/long bright middle; difficult at 100X';
		result = getDescription('13\'\'-eF; pS; lE 1.5X1 in PA 110; vvlBM; diff at 100X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; star of 8th magnitude following 59 suddenly/south; 1.5 arcminutes suddenly/south; star of 13th magnitude suddenly/south 10 arcseconds';
		result = getDescription('vF;*8 f 59s;1\'.5 s;*13 s 10\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - on 8/10 night could not find this nebula';
		result = getDescription('13\'\'-on 8/10 night could not find this nebula');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; star of 15th magnitude 9 0 arcseconds south preceding';
		result = getDescription('eF;*15 9O\'\' sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - extremely/excessively faint; pretty large; north bright middle; round; 2 very faint stars involved/involving; UHC helps some';
		result = getDescription('13\'\'-eF; pL; nBM; R; 2 vF* invl; UHC helps some');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'only a couple of faint stars';
		result = getDescription('only a couple of F *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended; between 2 stars';
		result = getDescription('eF;S;lE;bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula star of 12th magnitude';
		result = getDescription('neb *12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'only a few star of 14th magnitude; very difficult; star of 10th magnitude preceding';
		result = getDescription('only a few * 14;very difficult;*10 p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; little/long brighter middle; star of 11th magnitude 3 arcseconds preceding';
		result = getDescription('vF;pS;R;lbM;* 11 3\'\'p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; irregular round';
		result = getDescription('eF;pS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; very little/long elongated/extended; 2 stars preceding';
		result = getDescription('F;vS;vlE;2 * p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'no description';
		result = getDescription('no description');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; 2513 north following';
		result = getDescription('eF;2513 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; much brighter middle';
		result = getDescription('vF;vS;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; gradually little/long brighter middle';
		result = getDescription('eF;S;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; irregular round; very gradually brighter middle; easily resolvable; star of 232th magnitude degree; 80 arcseconds';
		result = getDescription('pB;pL;iR;vgbM;er;* 232deg;80\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; pretty suddenly much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;S;R;psmbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; irregular resolvable (mottled not resolved) round; diffused';
		result = getDescription('eF;pS;irrR;dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round';
		result = getDescription('vF;S;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; cometic';
		result = getDescription('vF;cometic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; elongated/extended; pretty suddenly brighter middle';
		result = getDescription('vF;vS;E;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; much elongated/extended';
		result = getDescription('vF;S;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; (suspected)';
		result = getDescription('eF;(suspected)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; little/long elongated/extended; very small stars north';
		result = getDescription('eF;lE;vS* n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular round; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;pL;iR;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended 45; star of 8th magnitude north preceding 4 arcminutes';
		result = getDescription('F;S;lE45;*8 np 4\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; gradually little/long brighter middle';
		result = getDescription('vF;S;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;S;R;mbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; little/long brighter middle';
		result = getDescription('eF;eS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; suddenly/south brighter middle; stellar';
		result = getDescription('vF;S;R;sbM;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; binuclear';
		result = getDescription('F;biN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large';
		result = getDescription('F;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; round';
		result = getDescription('vF;cS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; brighter middle';
		result = getDescription('cF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably elongated/extended; 3 very small stars following';
		result = getDescription('vF;cE;3 vS* f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; large; round; north of 2';
		result = getDescription('eeF;L;R;n OF 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; irregular figure; star of 13th magnitude attached';
		result = getDescription('eF;vS;iF;*13 att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular figure; resolvable (mottled not resolved)';
		result = getDescription('F;S;iF;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; irregular round; several faint stars involved/involving';
		result = getDescription('eF;pL;iR;sev F* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; stellar';
		result = getDescription('eF;eS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; very faint stars involved/involving; faint stars attached';
		result = getDescription('vF;vS;R;vF * inv;F* att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; gradually little/long brighter middle; stars preceding 75 arcseconds';
		result = getDescription('vF;pS;R;glbM;* p 75\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; very suddenly/south brighter middle stars';
		result = getDescription('pF;S;R;vsbM *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended';
		result = getDescription('vF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular figure; round; double stars south preceding 2 arcminutes';
		result = getDescription('vF;pL;iF;R;D* sp 2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small';
		result = getDescription('F;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; stellar';
		result = getDescription('vF;S;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; little/long brighter middle; resolvable (mottled not resolved); double stars near';
		result = getDescription('vF;pL;R;lbM;r;D* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very little/long elongated/extended; much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;vlE;mbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; pretty much elongated/extended; gradually brighter middle';
		result = getDescription('vF;S;pmE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;pS;R;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended';
		result = getDescription('F;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;vS;R;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/very remarkable object Praesepe';
		result = getDescription('!!Praesepe');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small';
		result = getDescription('eeF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint nebulous star';
		result = getDescription('eF neb*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebulous star';
		result = getDescription('neb*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; very little/long elongated/extended 135; pretty suddenly brighter middle';
		result = getDescription('F;S;vlE135;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated/extended';
		result = getDescription('eF;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular round; faint stars attached following';
		result = getDescription('vF;vS;iR;F* att f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably large; round; little/long brighter middle';
		result = getDescription('eF;cL;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; stars 9th magnitude and fainter th to 10th magnitude';
		result = getDescription('Cl;st9...10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; irregular round; much brighter middle';
		result = getDescription('pB;pL;iR;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; close following 2672';
		result = getDescription('vF;vS;close f 2672');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; partially resolved some stars seen (very small cluster)';
		result = getDescription('eF;vS;rr (vS Cl)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very little/long compressed; poor';
		result = getDescription('Cl;vlC;P');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object cluster; very bright; very large; Eridanus; little/long compressed; stars from 10th to 15th magnitude';
		result = getDescription('! Cl;vB;vL;eRi;lC;*10...15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; brighter middle; poor with 2680';
		result = getDescription('pF;pS;R;bM;P w 2680');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle; poor with 2679';
		result = getDescription('vF;vS;R;bM;P w 2679');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - very faint; pretty large; round; north bright middle; dim glow in central 20 % of field of view';
		result = getDescription('13\'\'-vF; pL; R; nBM; dim glow in central 20% of FOV');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle';
		result = getDescription('F;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; preceding of 2';
		result = getDescription('F;pL;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; little/long elongated/extended; following of 2';
		result = getDescription('vF;pL;lE;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round';
		result = getDescription('F;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; round';
		result = getDescription('vF;L;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small stars involved/involving in very faint; very small nebula; elongated/extended preceding following';
		result = getDescription('S* inv in vF;vS neb;E pf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; preceding of 2';
		result = getDescription('vF;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; poor with 2738';
		result = getDescription('vF;vS;P w 2738');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; irregular figure; poor with 2737';
		result = getDescription('pB;S;iF;P w 2737');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; resolvable (mottled not resolved); double stars near';
		result = getDescription('vF;S;R;r;D* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; stellar; following of 2';
		result = getDescription('eF;vS;stell;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; very little/long brighter middle';
		result = getDescription('eF;S;R;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar';
		result = getDescription('vF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; brighter middle Nucleus or to a Nucleus = star of 15th magnitude';
		result = getDescription('pF;S;R;bMN=*15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; stellar';
		result = getDescription('eF;eS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; very much elongated/extended; gradually brighter middle';
		result = getDescription('pF;pL;vmE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably large; round; brighter middle Nucleus or to a Nucleus; 2 considerably stars preceding';
		result = getDescription('vF;cL;R;bMN;2 c * p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; star of 14th magnitude north preceding 40 arcseconds';
		result = getDescription('vF;vS;*14 np 40\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; round; easily resolvable; between 2 pretty bright stars';
		result = getDescription('cF;vS;R;er;bet 2 pB *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular figure; brighter middle';
		result = getDescription('vF;vS;iF;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended';
		result = getDescription('vF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably large; round; very gradually very suddenly/south much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cB;cL;R;vgvsmbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; among 5 small stars';
		result = getDescription('vF;S;R;am 5 S *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small';
		result = getDescription('F;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; much brighter middle';
		result = getDescription('vF;vS;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; 2 pretty bright stars south preceding';
		result = getDescription('vF;vS;R;2 pB* sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually brighter middle';
		result = getDescription('pF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; little/long brighter middle';
		result = getDescription('vF;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round';
		result = getDescription('F;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; south preceding of 2';
		result = getDescription('eF;vS;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; north following of 2';
		result = getDescription('eF;vS;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; several stars near';
		result = getDescription('eF;sev * nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; little/long brighter middle';
		result = getDescription('eF;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large';
		result = getDescription('eF;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; resolvable (mottled not resolved); north preceding of 2';
		result = getDescription('vF;S;R;r;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; resolvable (mottled not resolved); south following of 2';
		result = getDescription('vF;S;R;r;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; stellar; preceding 2809';
		result = getDescription('vF;stellar;p 2809');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; 2809 following 7 small; north 2 arcminutes';
		result = getDescription('vF;vS;2809 f 7S;n 2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint';
		result = getDescription('F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; round';
		result = getDescription('pB;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; stars faint; very compressed';
		result = getDescription('Cl;S;st F;vC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small stars and nebula';
		result = getDescription('S* and neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; much elongated/extended 314; gradually little/long brighter middle; partially resolved some stars seen';
		result = getDescription('vB;vL;mE314;glbM;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty much elongated/extended; gradually pretty much brighter middle; star of 13th magnitude following';
		result = getDescription('pB;pmE;gpmbM;*13f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; elongated/extended; pretty suddenly brighter middle';
		result = getDescription('B;L;E;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; little/long elongated/extended; preceding of 2';
		result = getDescription('cF;S;lE;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually little/long brighter middle; following of 2';
		result = getDescription('F;S;R;glbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very much elongated/extended; long ray; star of 11th magnitude involved/involving';
		result = getDescription('vF;vmE;long ray;*11 inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object very bright; very large; round; very suddenly/south very very brighter middle; well resolved clearly consisting of stars';
		result = getDescription('!vB;vL;R;vsvvbM;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; round; very gradually very little/long brighter middle; star of 12th magnitude';
		result = getDescription('vF;L;R;vgvlbM;*12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; suddenly/south compressed; double star taken';
		result = getDescription('Cl;L;sC;** taken');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; stars 8th magnitude and fainter th to 11th magnitude';
		result = getDescription('Cl;st8...11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; little/long brighter middle; stars near';
		result = getDescription('vF;S;R;lbM;st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small';
		result = getDescription('eeF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; little/long compressed; stars 13th magnitude and fainter';
		result = getDescription('Cl;L;lC;st 13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle';
		result = getDescription('vF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; irregular round; brighter gradually middle; stellar Nucleus or to a Nucleus; considerably elongated/extended 10 degree';
		result = getDescription('B;pL;iR;bgM;stellar N;cE 10 deg');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended; brush; stars attached north following';
		result = getDescription('vF;pS;lE;brush; * att nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; very much elongated/extended; gradually very little/long brighter middle';
		result = getDescription('pF;pL;vmE;gvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended; very little/long brighter middle';
		result = getDescription('eF;S;lE;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; pretty suddenly brighter middle';
		result = getDescription('pB;pS;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; very little/long elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('vF;vS;vlE;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; elongated/extended; much brighter middle';
		result = getDescription('F;vS;E;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'much elongated/extended; north preceding south following; 2 stars suddenly/south';
		result = getDescription('mE;np sf;2* s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; elongated/extended; gradually brightest towards the following side middle';
		result = getDescription('F;L;E;gbfM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; very little/long elongated/extended';
		result = getDescription('F;S;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; stellar';
		result = getDescription('pF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; diffused';
		result = getDescription('pF;pL;dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; gradually brighter middle; star of 12th magnitude north following';
		result = getDescription('pF;pL;R;gbM;*12 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; star of 9th magnitude south following 5 arcminutes';
		result = getDescription('eF;*9 sf 5\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round; resolvable (mottled not resolved)';
		result = getDescription('eF;pL;R;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; 3 stars near';
		result = getDescription('eF;pS;R;3* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; = 4032 ?';
		result = getDescription('vF;vS;=4032?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; pretty suddenly brighter middle';
		result = getDescription('vF;vS;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; gradually little/long brighter middle';
		result = getDescription('eF;pS;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; very little/long elongated/extended; almost stellar';
		result = getDescription('F;vS;vlE;alm stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; diameter extremely/excessively cluster very doubtful';
		result = getDescription('pB;decl very doubtful');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; preceding of double nebula';
		result = getDescription('vF;S;R;p of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; diameter extremely/excessively cluster very doubtful';
		result = getDescription('pB;decl very doubtful');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; round; following of double nebula';
		result = getDescription('pF;R;f of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; diameter extremely/excessively cluster very doubtful';
		result = getDescription('pB;decl very doubtful');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; elongated/extended; gradually brighter middle';
		result = getDescription('B;E;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright';
		result = getDescription('pB');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small';
		result = getDescription('F;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; south following 4061; 2; 5';
		result = getDescription('eF;sf 4061;2;5');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty small; elongated/extended; gradually brighter middle';
		result = getDescription('cF;pS;E;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small';
		result = getDescription('F;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round';
		result = getDescription('F;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; star of 15th magnitude following 1 arcminutes';
		result = getDescription('vF;vS;*15 f 1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; preceding of 2';
		result = getDescription('vF;S;R;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; following of 2';
		result = getDescription('vF;S;R;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; star of 11th magnitude north preceding';
		result = getDescription('F;pS;R;*11 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; brighter middle';
		result = getDescription('eF;eS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small';
		result = getDescription('eF;eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; very gradually brighter middle';
		result = getDescription('eF;vS;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; little/long elongated/extended; brighter middle';
		result = getDescription('pB;pS;lE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small';
		result = getDescription('F;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; much brighter middle';
		result = getDescription('eF;vS;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; suspected';
		result = getDescription('eF;suspected');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; pretty suddenly little/long brighter middle; between 2 very small stars';
		result = getDescription('vF;S;R;pslbM;bet 2 vS*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; 1 stars of 3';
		result = getDescription('cF;S;R;1st OF 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; irregular round; 2 north diameter of 3';
		result = getDescription('cF;S;iR;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; little/long elongated/extended; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('pF;pL;lE;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very large; very gradually much brighter middle';
		result = getDescription('F;vL;vgmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; round; gradually brighter middle; well resolved clearly consisting of stars';
		result = getDescription('vB;pL;R;gbM;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; elongated/extended; brighter middle';
		result = getDescription('B;pL;E;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small';
		result = getDescription('vF;pS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; pretty gradually much brighter middle; very suddenly/south very bright Nucleus or to a Nucleus';
		result = getDescription('B;S;R;pgmbM;vsvBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; pretty gradually much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;pL;R;pgmbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; little/long elongated/extended; brighter middle; pretty bright stars south following; very bright Nucleus or to a Nucleus';
		result = getDescription('F;pS;lE;bM;pB* sf;vBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; irregular elongated/extended; brighter middle; very bright Nucleus or to a Nucleus with stars attached @ 0.2 arcminutes';
		result = getDescription('B;L;iE;bM;vBN w * att. @ 0.2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very near 4169; 4173 - 5';
		result = getDescription('eF;vnr 4169;4173-5');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; 1 stars of 4';
		result = getDescription('F;S;1st of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; 2 north diameter of 4';
		result = getDescription('F;S;2nd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; 3 resolvable (mottled not resolved) diameter of 4';
		result = getDescription('F;S;3rd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; extremely/excessively small; 4th of 4';
		result = getDescription('F;eS;4th of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very near 4169; 4173 - 5';
		result = getDescription('eF;vnr 4169;4173-5');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; large; round; gradually brighter middle';
		result = getDescription('cF;L;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; little/long elongated/extended; very gradually little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;L;lE;vglbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; very large; very much elongated/extended 152; very suddenly/south very much brighter middle';
		result = getDescription('B;vL;vmE152;vsvmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; south preceding middle 98';
		result = getDescription('pF;S;R;sp M98');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; very suddenly/south much brighter middle stars';
		result = getDescription('pB;S;R;vsmbM *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; spiral';
		result = getDescription('F;pL;spiral');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; small; round; pretty suddenly much brighter middle';
		result = getDescription('vB;S;R;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably large; irregular round; very gradually brighter middle';
		result = getDescription('vF;cL;iR;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small';
		result = getDescription('F;pS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; much brighter middle';
		result = getDescription('vF;eS;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; round';
		result = getDescription('cF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; gradually brighter middle; (= 4212)';
		result = getDescription('vF;pL;R;gbM;(=4212)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; elongated in position angle 107 degrees; gradually; suddenly/south brighter middle; resolvable (mottled not resolved)';
		result = getDescription('B;L;E107;g;sbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round';
		result = getDescription('vF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; little/long elongated/extended; very gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;pL;lE;vgbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round';
		result = getDescription('F;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; very little/long elongated/extended; suddenly/south much brighter middle; resolvable (mottled not resolved); very suddenly/south very bright Nucleus or to a Nucleus';
		result = getDescription('cB;pL;vlE;smbM;r;vsvBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; small; elongated/extended; very suddenly/south very much brighter middle Nucleus or to a Nucleus; star of 6th magnitude - 7 following 90 arcseconds';
		result = getDescription('vB;S;E;vsvmbMN;*6-7 f 90\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object; bright; large; round; gradually brighter middle; resolvable (mottled not resolved); 3 branch spiral';
		result = getDescription('!;B;L;R;gbM;r;3 branch spiral');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; resolvable (mottled not resolved)';
		result = getDescription('B;S;R;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; irregular round; gradually much brighter middle';
		result = getDescription('cF;S;iR;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; elongated in position angle 90 degrees; much brighter middle Nucleus or to a Nucleus';
		result = getDescription('vB;vL;E90;mbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; very little/long elongated/extended; gradually brighter middle; star of 15th magnitude near';
		result = getDescription('F;S;vlE;gbM;*15 nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; round; much brighter middle; resolvable (mottled not resolved); 1 of 3';
		result = getDescription('vB;pL;R;mbM;r;1 of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; brighter middle; 2 of 3; suddenly/south very bright center';
		result = getDescription('B;S;R;bM;2 of 3;svB center');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; little/long elongated/extended 150 degree';
		result = getDescription('pF;pL;lE 150 deg');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very large; elongated/extended; little/long brighter middle; resolvable (mottled not resolved); very suddenly/south bright Nucleus or to a Nucleus';
		result = getDescription('F;vL;E;lbM;r;vsBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; elongated/extended; very gradually brighter middle; preceding of 2';
		result = getDescription('F;L;E;vgbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'large; very much elongated/extended 177; following of 2';
		result = getDescription('L;vmE177;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very faint stars involved/involving; north preceding 4314';
		result = getDescription('vF;S;vF * inv;np 4314');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably large; little/long elongated/extended; north of 2';
		result = getDescription('F;cL;lE;n of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; suddenly/south of 2';
		result = getDescription('F;s of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; little/long elongated/extended; cometic';
		result = getDescription('vF;lE;com');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; elongated/extended; gradually brighter middle';
		result = getDescription('pB;cL;E;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; large; elongated in position angle 150 degrees; suddenly/south brighter middle; stars north preceding; extremely/excessively bright Nucleus or to a Nucleus with south preceding irregular struct';
		result = getDescription('cB;L;E150;sbM;* np;eBN w spir struct');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small';
		result = getDescription('F;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '1 of 2; very faint; north of middle 100';
		result = getDescription('1 of 2;vF;n of M100');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very large; round; very gradually; pretty suddenly brighter middle resolvable (mottled not resolved) Nucleus or to a Nucleus; spiral-Rosse';
		result = getDescription('pF;vL;R;vg;psbMrN;spiral-Rosse');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2 of 2; very faint; north of middle 100';
		result = getDescription('2 of 2;vF;n of M100');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; suddenly/south of 4328';
		result = getDescription('vF;s of 4328');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; resolvable (mottled not resolved)';
		result = getDescription('F;S;R;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular round; binary?';
		result = getDescription('vF;pL;iR;biN?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; pretty suddenly brighter middle';
		result = getDescription('pB;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; very gradually little/long brighter middle; triangle 2 stars';
		result = getDescription('vF;pS;R;vglbM;tri 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; very small; much elongated/extended; very suddenly/south brighter middle';
		result = getDescription('cB;vS;mE;vsbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty much elongated/extended 90; very little/long brighter middle';
		result = getDescription('cF;pmE90;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle; stars north following 90 arcseconds';
		result = getDescription('F;S;R;bM;* nf 90\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '10X50-eB; extremely/excessively large; north rich; north compressed; 32 stars in arrowhead shape';
		result = getDescription('10X50-eB;eL;nRi;nC; 32* in arrowhead shape');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; suddenly/south much brighter middle';
		result = getDescription('B;S;R;smbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty small; round; pretty suddenly brighter middle Nucleus or to a Nucleus';
		result = getDescription('pS;R;psbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; round; brighter middle; stars north preceding';
		result = getDescription('vB;pL;R;bM;* np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively small; stellar or nebula; star of 11th magnitude - 12';
		result = getDescription('eS;stellar or neb;*11-12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very large; irregular figure; bright stars preceding';
		result = getDescription('vF;vL;iF;B* p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; little/long elongated/extended; brighter middle';
		result = getDescription('pB;lE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; much elongated/extended';
		result = getDescription('vF;pL;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; 4394 south preceding';
		result = getDescription('vF;S;4394 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; very suddenly/south brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pF;S;R;vsbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; resolvable (mottled not resolved)';
		result = getDescription('F;S;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; elongated/extended; gradually; very suddenly/south much brighter middle stars; bright difficult Nucleus or to a Nucleus in bright bulge';
		result = getDescription('vB;L;E;g;vsmbM*;B diff N in B bulge');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty much elongated/extended 135; suddenly/south brighter middle';
		result = getDescription('B;pmE135;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; pretty gradually brighter middle; bright stars north preceding';
		result = getDescription('pB;pL;pgbM;B* np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty large; very much elongated/extended 240 degree';
		result = getDescription('pL;vmE 240 deg');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; faint; small';
		result = getDescription('Cl;F;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; (2 or 3 faint stars in nebula)';
		result = getDescription('vF;(2or3 F* in neb)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round';
		result = getDescription('eeF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round';
		result = getDescription('eeF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; elongated in position angle 90 degrees; suddenly/south brighter middle';
		result = getDescription('B;L;E90;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; round; gradually very much brighter middle stars; resolvable (mottled not resolved); bright stars south preceding';
		result = getDescription('B;L;R;gvmbM*;r;B* sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; elongated/extended; gradually brighter middle; 2 bright stars north following';
		result = getDescription('F;L;E;gbM;2 B* nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; irregular round; brighter middle; resolvable (mottled not resolved); star of 8th magnitude south following 2 arcminutes';
		result = getDescription('pB;pL;iR;bM;r;*8 sf 2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably large';
		result = getDescription('F;cL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright';
		result = getDescription('pB');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round';
		result = getDescription('eF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; round; resolvable (mottled not resolved)';
		result = getDescription('pF;R;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large';
		result = getDescription('pB;cL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large';
		result = getDescription('pB;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably small; round; gradually brighter middle';
		result = getDescription('pF;cS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; round; very suddenly/south much brighter middle Nucleus or to a Nucleus';
		result = getDescription('vB;pL;R;vsmbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably small; round; pretty suddenly little/long brighter middle';
		result = getDescription('pF;cS;R;pslbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; elongated/extended; binary?';
		result = getDescription('vF;pL;E;biN?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; very large; very much elongated/extended';
		result = getDescription('B;vL;vmE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty much elongated/extended 90; gradually brighter middle; star of 9th magnitude preceding 8 arcseconds';
		result = getDescription('cF;pmE90;gbM;*9 p 8\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; little/long brighter middle';
		result = getDescription('pF;pL;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; brighter middle';
		result = getDescription('eF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; large';
		result = getDescription('eF;L');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; brighter middle stars';
		result = getDescription('F;vS;bM*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; resolvable (mottled not resolved)';
		result = getDescription('F;pS;R;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster + nebula; close to a double star';
		result = getDescription('Cl + neb;close to a **');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; irregular round; brighter middle';
		result = getDescription('F;pL;iR;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty much elongated/extended';
		result = getDescription('pB;pmE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; brighter middle; resolvable (mottled not resolved); bright middle no defined Nucleus or to a Nucleus';
		result = getDescription('F;pS;bM;r;BM no def N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; little/long elongated/extended; little/long brighter middle';
		result = getDescription('B;L;lE;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; south preceding NGC 4565';
		result = getDescription('S;sp NGC 4565');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; irregular round; very suddenly/south much brighter middle star of 12th magnitude';
		result = getDescription('B;pS;iR;vsmbM*12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large';
		result = getDescription('F;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebulous stars';
		result = getDescription('nebulous *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; north following of 2(or 3)';
		result = getDescription('vF;nf of 2(or 3)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; much elongated/extended 150; gradually brighter middle; 3 stars following';
		result = getDescription('vB;vL;mE150;gbM;3 * f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; very little/long elongated/extended; little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;pL;vlE;lbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; much brighter middle';
		result = getDescription('F;vS;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/very remarkable object bright; extremely/excessively large; extremely/excessively elongated/extended 135; very suddenly/south brighter middle Nucleus or to a Nucleus = star of 10th magnitude - 11';
		result = getDescription('!!B;eL;eE135;vsbMN = *10-11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; elongated/extended; very gradually brighter middle; star of 9th magnitude north following near';
		result = getDescription('vF;L;E;vgbM;*9 nf nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small';
		result = getDescription('vF;eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; gradually brighter middle';
		result = getDescription('pF;pL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended; between 2 very faint stars';
		result = getDescription('eF;S;lE;bet 2 vf *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended; 1 of 3';
		result = getDescription('vF;S;lE;1 of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; star of 12th magnitude north preceding; 2 of 3';
		result = getDescription('F;S;R;*12 np;2 of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; elongated/extended; 3 of 3';
		result = getDescription('F;pL;E;3 of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; faint stars close preceding; NGC 4634 suddenly/south';
		result = getDescription('eeF;pS;F* close p;NGC 4634 s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; very gradually little/long brighter middle';
		result = getDescription('vF;L;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; much elongated/extended 135; very gradually brighter middle';
		result = getDescription('vF;L;mE135;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; large; elongated in position angle 90 degrees; gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cB;L;E90;gbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; round; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;cS;R;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably small; round; brighter middle; resolvable (mottled not resolved); preceding of 2; suddenly/south extremely/excessively bright Nucleus or to a Nucleus';
		result = getDescription('pF;cS;R;bM;r;p of 2;seBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; suddenly/south brighter middle star of 10th magnitude; following of 2';
		result = getDescription('F;vS;R;sbM*10;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty much elongated/extended; binary?';
		result = getDescription('vF;pmE;biN?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'double nebula with 4676 bright and brighter';
		result = getDescription('Dneb w 4676B and brighter');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; suddenly/south brighter middle stars; partially resolved some stars seen';
		result = getDescription('F;S;R;sbM*;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very large; elongated/extended; very gradually little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;vL;E;vglbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; round; brighter middle';
		result = getDescription('F;cS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; very irregular figure';
		result = getDescription('pF;S;viF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; very much elongated/extended 28; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('cB;pL;vmE28;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large';
		result = getDescription('vF;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; resolvable (mottled not resolved) ?';
		result = getDescription('vF;vS;r?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; elongated/extended; very gradually; very suddenly/south very much brighter middle; extremely/excessively bright Nucleus or to a Nucleus';
		result = getDescription('vB;vL;E;vg;vsvmbM;eBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small';
		result = getDescription('eF;eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very little/long brighter middle';
		result = getDescription('vF;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; elongated in position angle 30 degrees; very little/long brighter middle';
		result = getDescription('vF;E30;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; star of 6th magnitude north';
		result = getDescription('eF;*6 n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('vF;S;E;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; little/long elongated/extended';
		result = getDescription('F;pL;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; elongated/extended ?';
		result = getDescription('vF;pL;E?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; 4789 following';
		result = getDescription('vF;vS;4789 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round; star of 9th magnitude attached 1 arcminutes north';
		result = getDescription('F;R;*9 att 1\' n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; little/long elongated/extended; star of 8th magnitude north following 1 arcminutes';
		result = getDescription('pB;pS;lE;*8 nf 1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle';
		result = getDescription('vF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; little/long brighter middle';
		result = getDescription('F;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; gradually brighter middle';
		result = getDescription('pF;pS;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; brighter middle';
		result = getDescription('F;pS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large';
		result = getDescription('vF;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; no Nucleus or to a Nucleus';
		result = getDescription('vF;no N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular figure';
		result = getDescription('vF;pL;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; 4819 north preceding';
		result = getDescription('vF;vS;4819 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object very bright; very large; very much elongated/extended 120; brighter middle; small bright Nucleus or to a Nucleus';
		result = getDescription('!vB;vL;vmE120;bM;SBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably large';
		result = getDescription('F;cL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round';
		result = getDescription('F;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; very small stars attached';
		result = getDescription('pF;pL;R;vS* att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; little/long elongated/extended';
		result = getDescription('pF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; round; brighter middle';
		result = getDescription('pB;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; resolvable (mottled not resolved)';
		result = getDescription('F;vS;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; pretty suddenly little/long brighter middle';
		result = getDescription('F;S;R;pslbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; cometic';
		result = getDescription('vF;pL;com');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; preceding of double nebula';
		result = getDescription('F;vS;p of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round';
		result = getDescription('F;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; following of double nebula';
		result = getDescription('pF;S;R;f of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; preceding of 2';
		result = getDescription('F;S;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; star of 7th magnitude - 8 following 13 arcseconds';
		result = getDescription('vF;vS;*7-8 f 13sec');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar; following 4864';
		result = getDescription('vF;vS;stellar;f 4864');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; star of 7th magnitude north';
		result = getDescription('cF;S;R;*7 n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar Nucleus or to a Nucleus';
		result = getDescription('vF;vS;stell N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round';
		result = getDescription('pF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; 4869 and 4872 preceding';
		result = getDescription('F;4869 & 4872 p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar';
		result = getDescription('vF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; no nucleus';
		result = getDescription('vF;vS;no Nucl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; stellar';
		result = getDescription('vF;S;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended; star of 9th magnitude south preceding';
		result = getDescription('F;S;lE;*9 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; others near';
		result = getDescription('vF;S;others near');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'chief one of multiple nebula; = 4889 ?';
		result = getDescription('chief one of mult neb;=4889?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; 4889 following 4 arcseconds';
		result = getDescription('F;S;R;4889 f 4sec');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty much elongated/extended; brighter middle; star of 7th magnitude north';
		result = getDescription('pB;pmE;bM;*7 n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round';
		result = getDescription('pF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small close to 4894';
		result = getDescription('vF;S close to 4894');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; much brighter middle';
		result = getDescription('vF;vS;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; star of 15th magnitude preceding';
		result = getDescription('vF;vS;*15 p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; star of 13th magnitude attached';
		result = getDescription('eF;vS;*13 att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; brighter middle; NGC 4908 north preceding';
		result = getDescription('pF;S;R;bM;NGC 4908 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '1 of 4; faint; pretty large; star of 11th magnitude north preceding 2 arcminutes';
		result = getDescription('1 of 4;F;pL;*11 np 2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; 2 of 4';
		result = getDescription('vF;vS;2 of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; 3 of 4';
		result = getDescription('F;pL;3 of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; little/long brighter middle; star of 11th magnitude - 12 following';
		result = getDescription('pB;S;R;lbM;*11-12 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; 4 of 4';
		result = getDescription('vF;4 of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; gradually little/long brighter middle';
		result = getDescription('pB;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; star of 16th magnitude close preceding';
		result = getDescription('F;S;*16 close p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small';
		result = getDescription('F;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended';
		result = getDescription('F;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; 3 stars following';
		result = getDescription('vF;vS;R;3 * f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle; star of 9th magnitude north following 1 arcminutes';
		result = getDescription('F;S;R;bM;*9 nf 1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; pretty suddenly brighter middle star of 11th magnitude';
		result = getDescription('F;S;R;psbM *11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; Nucleus or to a Nucleus = star of 16th magnitude';
		result = getDescription('F;S;R;N = *16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular figure';
		result = getDescription('F;S;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; very little/long elongated/extended; very gradually little/long brighter middle; double star south preceding';
		result = getDescription('vF;vS;vlE;vglbM;** sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; little/long elongated/extended; double star near north';
		result = getDescription('F;vS;lE;** nr n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; little/long elongated/extended';
		result = getDescription('eF;pL;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; suddenly/south brighter middle; stellar';
		result = getDescription('F;vS;R;sbM;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty small; little/long elongated/extended; north preceding of 2';
		result = getDescription('cF;pS;lE;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; very little/long elongated/extended';
		result = getDescription('vF;vS;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably large; elongated in position angle 17 degrees; binuclear; star of 9th magnitude following';
		result = getDescription('pF;cL;E17;bi-N;*9 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small';
		result = getDescription('pB;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object bright; very compressed; irregular round; very very much brighter middle; stars 12th magnitude and fainter...';
		result = getDescription('!B;vC;iR;vvmbM;st 12...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular round';
		result = getDescription('vF;pL;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; round; south preceding of 2';
		result = getDescription('cF;cS;R;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very faint; pretty large; irregular round; very gradually brighter middle; stars 15th magnitude and fainter';
		result = getDescription('Cl;vF;pL;iR;vgbM;st 15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; round; north following of 2';
		result = getDescription('cF;cS;R;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; north following of 2';
		result = getDescription('vF;cS;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; irregular round; star of 7th magnitude; 8 north preceding';
		result = getDescription('pF;S;iR;*7;8 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; gradually brighter middle';
		result = getDescription('pF;pL;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; irregular round; star of 17th magnitude suddenly/south';
		result = getDescription('pB;pL;iR;*17s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; pretty much elongated/extended; gradually little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pF;pS;pmE;glbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; star of 8th magnitude north following 4 arcminutes';
		result = getDescription('vF;S;R;*8 nf 4\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round';
		result = getDescription('vF;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; gradually brighter middle';
		result = getDescription('F;pL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; among 3 stars; star of 7th magnitude north following';
		result = getDescription('vF;S;R;am 3*;*7 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; brighter middle; triple star following';
		result = getDescription('cF;S;R;bM;***f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle';
		result = getDescription('vF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; round; extremely/excessively compressed; gradually brighter middle; well resolved clearly consisting of stars';
		result = getDescription('B;R;eC;gbM;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 7th magnitude involved/involving in extremely/excessively large nebula';
		result = getDescription('* 7 inv in eL neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 6th magnitude; 7 in faint; pretty large nebula';
		result = getDescription('*6;7 in F;pL neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 8th magnitude in faint; pretty large nebula';
		result = getDescription('*8 in F;pL neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + round';
		result = getDescription('E+R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'variable star(11th magnitude and fainter) with nebula';
		result = getDescription('Var*(11...) w neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '6 arcseconds - huge dark elongated oval; excellent contrast';
		result = getDescription('6\'\'-huge dark elongated oval; excellent contrast');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; pretty suddenly little/long brighter middle';
		result = getDescription('vF;S;R;pslbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar; gaseous spectrum';
		result = getDescription('Stellar;gaseous spectrum');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula stars; very faint; small; faint stars close small';
		result = getDescription('neb *;vF;S;F* close S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; irregular round; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pF;pL;iR;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; elongated/extended preceding following';
		result = getDescription('pF;S;E pf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle';
		result = getDescription('vF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula';
		result = getDescription('neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended';
		result = getDescription('vF;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; star of 10th magnitude south following';
		result = getDescription('vF;S;R;*10 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint stars in very faint; very small; round nebula';
		result = getDescription('vF* in vf;vS;R neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended';
		result = getDescription('vF;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; suddenly/south brighter middle';
		result = getDescription('F;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; stellar Nucleus or to a Nucleus';
		result = getDescription('F;vS;stellar N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; stellar Nucleus or to a Nucleus';
		result = getDescription('F;vS;stellar N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle';
		result = getDescription('vF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; stellar Nucleus or to a Nucleus';
		result = getDescription('vF;stellar N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula star of 13th magnitude';
		result = getDescription('neb *13mag');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle';
		result = getDescription('vF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; very gradually little/long brighter middle';
		result = getDescription('vF;S;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round';
		result = getDescription('vF;S;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually very little/long brighter middle';
		result = getDescription('F;S;R;gvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small';
		result = getDescription('F;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; little/long brighter middle';
		result = getDescription('eF;vS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle';
		result = getDescription('F;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; gradually brighter middle';
		result = getDescription('eF;vS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle';
		result = getDescription('vF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; gradually little/long brighter middle';
		result = getDescription('eF;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; gradually brighter middle';
		result = getDescription('vF;vS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; round';
		result = getDescription('vF;eS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; double stars north following';
		result = getDescription('vF;vS;R;D* nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; no Nucleus or to a Nucleus';
		result = getDescription('vF;R;no N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; brighter middle supernova';
		result = getDescription('F;vS;R;bMSN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; little/long brighter middle';
		result = getDescription('eF;vS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular round; difficult';
		result = getDescription('vF;pL;iR;diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular round; brighter middle';
		result = getDescription('F;S;iR;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; brighter middle';
		result = getDescription('eF;S;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated/extended 130; gradually brighter middle';
		result = getDescription('eF;S;E 130;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; attached to star of 12th magnitude following';
		result = getDescription('eF;att to *12 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; round; north of small stars';
		result = getDescription('eF;R;n of S*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended; gradually brighter middle';
		result = getDescription('vF;S;E;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small';
		result = getDescription('eeF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; elongated/extended 90; gradually brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;pS;E 90;gbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; irregular round; gradually little/long brighter middle';
		result = getDescription('eF;pL;iR;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; partially resolved some stars seen; prob very faint cluster; star of 9th magnitude 5 arcminutes south following';
		result = getDescription('eF;vS;rr;prob vF Cl;*9 5\' sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually little/long brighter middle; star of 14th magnitude near';
		result = getDescription('pF;S;R;glbM;*14 nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; brighter middle; star of 0.5 magnitude arcminutes north following';
		result = getDescription('F;S;bM;* 0\'.5 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very large; much elongated/extended';
		result = getDescription('vF;vL;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very large; much elongated/extended';
		result = getDescription('vF;vL;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; very gradually very little/long brighter middle';
		result = getDescription('vF;pL;R;vgvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; irregular round; gradually brighter middle; several very faint stars involved/involving';
		result = getDescription('eF;vS;iR;gbM;sev vF st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular round; gradually little/long brighter middle';
		result = getDescription('vF;vS;iR;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; gradually brighter middle Nucleus or to a Nucleus';
		result = getDescription('F;pS;gbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; pretty suddenly little/long brighter middle; preceding of 2';
		result = getDescription('F;S;R;pslbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; very little/long brighter middle; following of 2';
		result = getDescription('eF;S;R;vlbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; gradually brighter middle Nucleus or to a Nucleus; 1 stars of 2';
		result = getDescription('vF;vS;R;gbMN;1st of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; extremely/excessively small; round; gradually brighter middle; 2 north diameter of 2';
		result = getDescription('eeF;eS;R;gbM;2nd of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very faint stars involved/involving';
		result = getDescription('vF;S;vF st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebulous stars';
		result = getDescription('nebulous *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula star of 12th magnitude; star of 12th magnitude 2 arcminutes north following';
		result = getDescription('neb *12;*12 2\' nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; large; round; stellar Nucleus or to a Nucleus';
		result = getDescription('eF;L;R;stell N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; much elongated/extended 95; brighter middle';
		result = getDescription('vF;L;mE 95;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; irregular figure; brighter middle';
		result = getDescription('pF;pL;iF;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'doubtful object; probably a nebula';
		result = getDescription('doubtful object;probably a neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round; little/long brighter middle';
		result = getDescription('vF;S;iR;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; brighter middle';
		result = getDescription('vF;pS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; 2 stars 10th magnitude and fainter following';
		result = getDescription('eF;vS;2 st 10 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; little/long brighter middle; star of 7th magnitude following; preceding of 2';
		result = getDescription('F;vS;R;lbM;*7 f;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; brighter middle Nucleus or to a Nucleus; poor with NGC 3635';
		result = getDescription('eF;eS;R;bMN;P w NGC 3635');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; brighter middle Nucleus or to a Nucleus; poor with NGC 3634';
		result = getDescription('eF;eS;R;bMN;P w NGC 3634');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; pretty suddenly brighter middle; star of 7th magnitude preceding; following of 2';
		result = getDescription('F;vS;R;psbM;*7 p;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; irregular round; very gradually brighter middle';
		result = getDescription('F;pL;iR;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; stellar; preceding of 2';
		result = getDescription('F;S;R;stellar;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; fan shaped; stars close';
		result = getDescription('eF;fan shaped;* close');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; irregular round; very little/long brighter middle';
		result = getDescription('pF;pL;iR;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; elongated/extended 0; gradually brighter middle';
		result = getDescription('pB;L;E 0;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; 2 stars 10th magnitude and fainter north following; south following';
		result = getDescription('eF;vS;R;2 st 10 nf;sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; little/long elongated/extended 0; gradually brighter middle';
		result = getDescription('eF;eS;lE 0;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; elongated/extended; gradually brighter middle';
		result = getDescription('cF;S;E;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;eS;R;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; gradually brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;vS;gbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; star of 9th magnitude suddenly/south 4 arcminutes';
		result = getDescription('eF;vS;*9 s 4\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; star of 9th magnitude - 10 2 arcminutes suddenly/south south following';
		result = getDescription('vF;pS;*9-10 2\' ssf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; gradually little/long brighter middle';
		result = getDescription('eF;eS;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; star of 15th magnitude (nebulous??) 2 arcseconds following';
		result = getDescription('vF;S;*15 (neb?) 2\'\' f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; very gradually very little/long brighter middle';
		result = getDescription('pF;S;R;vgvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; gradually brighter middle Nucleus or to a Nucleus; star of 11th magnitude south following 1 arcminutes';
		result = getDescription('eF;eS;R;gbMN;*11 sf 1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; gradually brighter middle';
		result = getDescription('eF;eS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; pretty suddenly brighter middle; star of 14th magnitude south preceding 225';
		result = getDescription('F;S;R;psbM;*14 sp 225');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended 140; gradually little/long brightest towards the north side middle';
		result = getDescription('eF;S;lE 140;glbnM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; suddenly/south brighter middle Nucleus or to a Nucleus; 1 stars of 2';
		result = getDescription('eF;vS;R;sbMN;1st of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; suddenly/south brighter middle Nucleus or to a Nucleus; 2 north diameter of 2';
		result = getDescription('eF;vS;R;sbMN;2nd of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; gradually brighter middle';
		result = getDescription('eF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; irregular round; gradually brighter middle; small stars or nebula following';
		result = getDescription('eF;pS;iR;gbM;S* or neb f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; diffused; south preceding 7 stars';
		result = getDescription('F;dif;sp 7 st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; elongated/extended 0; gradually brighter middle';
		result = getDescription('eF;vS;E 0;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; brighter middle Nucleus or to a Nucleus';
		result = getDescription('pB;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; elongated/extended 75; star of 9th magnitude north preceding 3 arcminutes';
		result = getDescription('eF;vS;E 75;*9 np 3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint';
		result = getDescription('eeF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; round; star of 10th magnitude preceding 15 arcseconds';
		result = getDescription('vF;eS;R;*10 p 15\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; gradually brighter middle; star of 8th magnitude suddenly/south 6 arcminutes';
		result = getDescription('vF;vS;R;gbM;*8 s 6\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; little/long elongated/extended; pretty suddenly little/long brighter middle';
		result = getDescription('F;cS;lE;pslbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; brighter middle';
		result = getDescription('F;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; faint stars close north';
		result = getDescription('F;S;F* close n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; little/long elongated/extended 70; brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;vS;lE 70;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; diffused';
		result = getDescription('F;pL;dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; gradually brighter middle; star of 9.5 magnitude preceding 3 arcseconds';
		result = getDescription('eF;eS;R;gbM;*9.5 p 3\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'south following NGC 3865; not so large';
		result = getDescription('sf NGC 3865;not so L');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; irregular round; very gradually pretty much brighter middle';
		result = getDescription('pB;L;iR;vgpmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;pL;R;gbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; diffused';
		result = getDescription('vF;L;dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; elongated/extended 160; gradually very little/long brighter middle';
		result = getDescription('eF;pS;E 160;gvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; elongated/extended 170; pounds';
		result = getDescription('cF;S;E 170;lbs');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; pretty much elongated/extended 57';
		result = getDescription('cF;pL;pmE 57');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('F;S;E;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; brighter middle Nucleus or to a Nucleus; star of 9.5 magnitude north preceding 4 arcminutes';
		result = getDescription('eF;eS;R;bMN;*9.5 np 4\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; between 2 very faint stars';
		result = getDescription('vF;S;bet 2 vf st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; irregular round; gradually much brighter middle; triangle 2 stars';
		result = getDescription('cB;pL;iR;gmbM;tri 2 st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; faint stars close preceding';
		result = getDescription('vF;S;F* close p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; gradually brighter middle Nucleus or to a Nucleus; star of 8.5 magnitude nearly north';
		result = getDescription('eF;vS;gbMN;*8.5 nearly n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; pretty suddenly brighter middle; preceding of 2';
		result = getDescription('F;S;R;psbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle; following of 2';
		result = getDescription('vF;S;R;bM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular figure';
		result = getDescription('vF;pL;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; gradually brighter middle';
		result = getDescription('eF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; little/long compressed';
		result = getDescription('Cl;pRi;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; preceding compressed; irregular round; stars from 10th to 14th magnitude';
		result = getDescription('Cl;pL;pC;iR;*10...14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; much compressed; stars extremely/excessively small';
		result = getDescription('Cl;mC;st eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; little/long compressed; stars from 12th to 14th magnitude';
		result = getDescription('Cl;pRi;lC;* 12...14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very bright; very large; little/long compressed; stars from 12th to 14th magnitude';
		result = getDescription('Cl;vB;vL;lC;* 12...14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty large; 30 stars';
		result = getDescription('pL;30*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; stars from 11th to 12th magnitude';
		result = getDescription('Cl;S;* 11...12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'large; very rich';
		result = getDescription('L;vRi');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; preceding compressed; considerably elongated/extended; stars 10th magnitude and fainter';
		result = getDescription('Cl;pL;pC;cE;st 10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/very remarkable object cluster; very large; rich; stars very bright (Kappa Crux)';
		result = getDescription('!!Cl;vL;Ri;st vB (Kappa Cru)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; irregular figure; brighter middle';
		result = getDescription('F;vS;iF;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; partially resolved some stars seen; stars 16th magnitude and fainter';
		result = getDescription('pF;pL;R;rr;st16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; star of 9th magnitude middle near';
		result = getDescription('eF;pL;*9M nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; little/long elongated/extended; brighter middle';
		result = getDescription('pB;S;lE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; round; very gradually brighter middle';
		result = getDescription('pB;cL;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large';
		result = getDescription('pF;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably large; irregular round; little/long brighter middle';
		result = getDescription('F;cL;iR;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; large; pretty much elongated/extended; very gradually brighter middle; 2 stars 11 near';
		result = getDescription('eF;L;pmE;vgbM;2*11 nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; irregular round; gradually brighter middle';
		result = getDescription('cF;S;iR;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; very gradually brighter middle';
		result = getDescription('vF;pL;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; poor small';
		result = getDescription('eF;PS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; extremely/excessively small; round; star of 170th magnitude degrees at 60 arcseconds';
		result = getDescription('F;eS;R;* 170deg/60\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular figure';
		result = getDescription('vF;pL;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round';
		result = getDescription('vF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;vS;R;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; round; very suddenly/south much brighter middle Nucleus or to a Nucleus; resolvable (mottled not resolved)';
		result = getDescription('vB;L;R;vsmbMN;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; elongated in position angle 130 degrees; suddenly/south brighter middle';
		result = getDescription('pB;pS;E130;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; irregular figure; brighter middle';
		result = getDescription('vF;iF;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; gradually brighter middle';
		result = getDescription('F;pS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; 4 arcminutes north of double nebula';
		result = getDescription('vF;4\' n of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; stellar; north preceding of 2';
		result = getDescription('F;vS;R;stellar;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; little/long brighter middle; south following of 2';
		result = getDescription('F;pL;R;lbM;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2 of 2; very faint; very small; following 4714';
		result = getDescription('2 of 2;vF;vS;f 4714');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; following 4714; with star of 11th magnitude 4 arcseconds following';
		result = getDescription('vF;vS;f 4714;w *11 4\'\'f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; much brighter middle';
		result = getDescription('pF;pS;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; irregular round; gradually brighter middle';
		result = getDescription('F;vS;iR;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; resolvable (mottled not resolved)';
		result = getDescription('vF;pS;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long brighter middle';
		result = getDescription('vF;S;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; much brighter middle; preceding of double nebula';
		result = getDescription('pF;pS;R;mbM;p of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; much brighter middle; following of double nebula';
		result = getDescription('pF;pS;R;mbM;f of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; round; 7 arcminutes north north preceding of 4794';
		result = getDescription('vS;R;7\'n np of 4794');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; 2 or 3 stars near';
		result = getDescription('vF;S;2 or 3* near');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; star of 10th magnitude attached';
		result = getDescription('vF;S;*10 att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; attached to pretty bright stars';
		result = getDescription('S;att to pB*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; 4111 north north following 6 arcminutes';
		result = getDescription('vF;4111 nnf 6\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty small; much elongated/extended 151; very suddenly/south very bright Nucleus or to a Nucleus';
		result = getDescription('vB;pS;mE151;vsvBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; 1 arcminutes suddenly/south of 4117';
		result = getDescription('eF;vS;1\' s of 4117');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; 2 faint stars involved/involving';
		result = getDescription('vF;pS;R;2 F* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; little/long fainter than 4135';
		result = getDescription('vF;pS;R;l fainter than 4135');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; little/long elongated/extended; very gradually brighter middle; stars north preceding';
		result = getDescription('B;pL;lE;vgbM;* np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; round; very gradually; very suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('cB;R;vg;vsbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; very large; very gradually little/long brighter middle';
		result = getDescription('B;vL;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; star of 12th magnitude south following';
		result = getDescription('F;S;*12 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; small; round; very suddenly/south much brighter middle bright Nucleus or to a Nucleus; preceding of 2';
		result = getDescription('vB;S;R;vsmbMBN;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; elongated/extended; very gradually brighter middle; following of 2; suddenly/south bright Nucleus or to a Nucleus; narrow bar';
		result = getDescription('pF;S;E;vgbM;f of 2;sBN;narrow bar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula star of 13th magnitude middle';
		result = getDescription('neb *13M');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; very little/long elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('vF;pL;vlE;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; very gradually brighter middle; double star small; = 4163';
		result = getDescription('F;pL;R;vgbM;**S;=4163');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; stellar';
		result = getDescription('eF;S;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably large; much elongated/extended 170; bright center; no defined Nucleus or to a Nucleus';
		result = getDescription('vF;cL;mE170;B center;no def. N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; little/long elongated/extended';
		result = getDescription('pB;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty small; round; very gradually little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cF;pS;R;vglbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably large; irregular elongated/extended; binuclear; = NGC 4208';
		result = getDescription('cB;cL;iE;biN;=NGC 4208');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; round; gradually brighter middle; (= 4214)';
		result = getDescription('vF;L;R;gbM;(=4214)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; much elongated/extended 45; double star north; preceding of 2';
		result = getDescription('pF;L;mE45;**n;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; pretty much elongated/extended 134; pretty suddenly brighter middle; suddenly/south bright Nucleus or to a Nucleus';
		result = getDescription('cB;pL;pmE134;psbM;sBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended; following of 2';
		result = getDescription('F;S;lE;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; very little/long elongated/extended; pretty suddenly brighter middle; south preceding of 2';
		result = getDescription('F;vS;vlE;psbM;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; little/long elongated/extended; pretty suddenly brighter middle; north following of 2';
		result = getDescription('cF;vS;lE;psbM;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; north of double nebula';
		result = getDescription('vF;vS;n of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; suddenly/south of double nebula';
		result = getDescription('vF;vS;s of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably large; irregular round; very gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;cL;iR;vgbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very large; extremely/excessively elongated/extended 43; very gradually brighter middle; very suddenly/south bright Nucleus or to a Nucleus or stars ?';
		result = getDescription('pB;vL;eE43;vgbM;vsBN or *?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; pretty much elongated/extended; pretty suddenly brighter middle';
		result = getDescription('vF;S;pmE;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object; very bright; very large; very much elongated/extended 0; suddenly/south brighter middle bright Nucleus or to a Nucleus';
		result = getDescription('!;vB;vL;vmE0;sbMBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; very gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;pS;R;vgbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; much elongated/extended 100; very suddenly/south much brighter middle bright Nucleus or to a Nucleus';
		result = getDescription('vF;S;mE100;vsmbMBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; gradually brighter middle; = 4381';
		result = getDescription('F;pS;gbM;=4381');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; = 4357';
		result = getDescription('F;S;=4357');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; small; round; much brighter middle Nucleus or to a Nucleus; resolvable (mottled not resolved)';
		result = getDescription('cB;S;R;mbMN;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; very gradually brighter middle';
		result = getDescription('cF;S;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; irregular elongated/extended; very gradually little/long brighter middle; suddenly/south bright narrow bar';
		result = getDescription('pB;pL;iE;vglbM;sB narrow bar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; forms trapezium with 4395; 4400; 4401';
		result = getDescription('vF;forms trapezium w 4395;4400;4401');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very large; north preceding of double nebula';
		result = getDescription('eF;vL;np of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very large; pretty suddenly little/long brighter middle; south following of double nebula';
		result = getDescription('vF;vL;pslbM;sf of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; considerably large; much elongated/extended; double or brighter if irregular diameter; well resolved clearly consisting of stars; stars faint; bright center with Nucleus or to a Nucleus or stars';
		result = getDescription('vB;cL;mE;D or bifid;rrr;*F;B center w N or *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; elongated in position angle 123 degrees; pretty suddenly brighter middle';
		result = getDescription('B;pL;E123;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; irregular round; north preceding of 2';
		result = getDescription('B;pS;iR;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; much elongated/extended 130; resolvable (mottled not resolved); south following of 2';
		result = getDescription('vB;vL;mE130;r;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; little/long brighter middle';
		result = getDescription('vF;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula star of 4th magnitude (8 Canes venatici)';
		result = getDescription('neb * 4mag (8 CVn)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; large; little/long elongated/extended; very gradually little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cF;L;lE;vglbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; nearly between 2 stars';
		result = getDescription('eeF;S;R;nearly bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round';
		result = getDescription('eF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - bright; large; scattered at 135X; 12 stars';
		result = getDescription('13\'\'-B;L;scattered at 135X; 12*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; little/long elongated/extended; brighter middle';
		result = getDescription('cF;S;lE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; irregular round; easily resolvable';
		result = getDescription('pF;S;iR;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; elongated/extended; much brighter middle; curved branch north';
		result = getDescription('B;L;E;mbM;curved branch n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; little/long brighter middle; star of 8th magnitude - 9 following';
		result = getDescription('F;pS;R;lbM;*8-9f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round';
		result = getDescription('pF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; north preceding of 2; bright middle no bright Nucleus or to a Nucleus';
		result = getDescription('F;S;R;np of 2;BM no BN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; extremely/excessively elongated/extended 70; brighter middle Nucleus or to a Nucleus; stars attached north';
		result = getDescription('vB;vL;eE70;bMN;* att n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably large; diffused; several Nucleus or to a Nucleus';
		result = getDescription('vF;cL;dif;sev N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar; star of 15th magnitude following';
		result = getDescription('vF;vS;stellar;*15 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; very much elongated/extended 34; south preceding of 2';
		result = getDescription('pB;L;vmE34;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; elongated in position angle 90 degrees; north following of 2';
		result = getDescription('pF;L;E90;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pF;pL;R;gbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; pretty suddenly brighter middle';
		result = getDescription('vF;vS;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; stellar';
		result = getDescription('S;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; gradually brighter middle';
		result = getDescription('cF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended; gradually little/long brighter middle; easily resolvable';
		result = getDescription('F;S;E;glbM;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; stellar';
		result = getDescription('vF;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; irregular round; very suddenly/south very much brighter middle; bright Nucleus or to a Nucleus; resolvable (mottled not resolved)';
		result = getDescription('vB;L;iR;vsvmbM;BN;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; pretty much elongated/extended';
		result = getDescription('eF;vS;pmE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; pretty suddenly brighter middle';
		result = getDescription('vF;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably small; round; brighter middle';
		result = getDescription('eF;cS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably small; round; pretty suddenly brighter middle; star of 14th magnitude preceding; very bright Nucleus or to a Nucleus';
		result = getDescription('pB;cS;R;psbM;*14 p;vBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round; brighter middle';
		result = getDescription('vF;S;iR;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebulous??';
		result = getDescription('neb?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; very much elongated/extended 30; between 2 stars';
		result = getDescription('vF;pL;vmE30;bet 2 st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; much brighter middle';
		result = getDescription('pB;S;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; little/long elongated/extended; between 2 stars';
		result = getDescription('pF;lE;bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually brighter middle';
		result = getDescription('pF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; star of 20th magnitude south preceding; star of 17th magnitude north following';
		result = getDescription('vF;*20 sp;*17 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably small; round; suddenly/south much brighter middle; star of 17th magnitude north preceding';
		result = getDescription('pB;cS;R;smbM;*17 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2 nebula Nucleus or to a Nucleus of and inline with 4914';
		result = getDescription('2 neb N of and inline w 4914');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2 nebula Nucleus or to a Nucleus of and inline with 4914';
		result = getDescription('2 neb N of and inline w 4914');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula; north following 4914 (?)';
		result = getDescription('neb;nf 4914 (?)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated/extended; brighter middle';
		result = getDescription('eF;S;E;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; very gradually little/long brighter middle';
		result = getDescription('cF;S;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; round; pretty suddenly brighter middle';
		result = getDescription('eF;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably small; round; suddenly/south much brighter middle';
		result = getDescription('pB;cS;R;smbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; round; brighter middle';
		result = getDescription('cF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; stellar; very small stars suddenly/south';
		result = getDescription('F;vS;R;stell;vS* s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar';
		result = getDescription('vF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; little/long brighter middle';
		result = getDescription('vF;vS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; stellar';
		result = getDescription('vF;S;R;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long brighter middle';
		result = getDescription('vF;pS;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; elongated/extended; star of 13th magnitude attached north';
		result = getDescription('vF;pL;E;*13 att n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; between 2 very small stars';
		result = getDescription('vF;R;bet 2vS*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; very much elongated/extended 66; very suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('vB;vL;vmE66;vsbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; elongated/extended; pretty suddenly brighter middle';
		result = getDescription('pF;S;E;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably small; round; star of 12th magnitude north following 90 arcseconds';
		result = getDescription('pF;cS;R;*12 nf 90\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; very much elongated/extended north suddenly/south; gradually very little/long brighter middle';
		result = getDescription('F;L;vmE ns;gvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; much elongated/extended 20; very little/long brighter middle';
		result = getDescription('pF;L;mE20;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; gradually brighter middle';
		result = getDescription('F;vS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended; star of 13th magnitude Nucleus or to a Nucleus';
		result = getDescription('vF;S;lE;*13N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; elongated in position angle 167 degrees; suddenly/south much brighter middle; very bright Nucleus or to a Nucleus';
		result = getDescription('vB;pL;E167;smbM;vBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular round; very gradually much brighter middle';
		result = getDescription('F;S;iR;vgmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; preceding middle elongated/extended 120; very suddenly/south much brighter middle; bright Nucleus or to a Nucleus';
		result = getDescription('vB;L;pME120;vsmbM;BN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round';
		result = getDescription('pF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; little/long brighter middle';
		result = getDescription('vF;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; round; brighter middle; south preceding of 2';
		result = getDescription('vF;cS;R;bM;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably small; elongated/extended';
		result = getDescription('pB;cS;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; considerably elongated/extended 0';
		result = getDescription('vF;S;cE0');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; irregular round; very gradually little/long brighter middle';
		result = getDescription('F;L;iR;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; triangle 2 stars 11 north preceding';
		result = getDescription('vF;L;tri 2*11 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually much brighter middle';
		result = getDescription('pF;S;R;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; gradually much brighter middle; double star preceding';
		result = getDescription('pB;pL;R;gmbM;**p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; little/long elongated/extended; Nucleus or to a Nucleus = star of 15th magnitude';
		result = getDescription('F;pS;lE;N=*15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; round; very suddenly/south much brighter middle stars; south preceding of 2';
		result = getDescription('cF;cS;R;vsmbM*;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; round; very suddenly/south much brighter middle stars; north following of 2';
		result = getDescription('F;cS;R;vsmbM*;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; very little/long elongated/extended; gradually little/long brighter middle';
		result = getDescription('pB;vS;vlE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty small; elongated/extended; brighter middle; south preceding of 2';
		result = getDescription('cF;pS;E;bM;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; north following of 2';
		result = getDescription('vF;pL;R;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; very little/long elongated/extended; brighter middle; preceding of 2';
		result = getDescription('F;pS;vlE;bM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round';
		result = getDescription('vF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; little/long elongated/extended; little/long brighter middle; following of 2';
		result = getDescription('pF;pL;lE;lbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; stellar';
		result = getDescription('F;vS;R;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; gradually little/long brighter middle';
		result = getDescription('vF;vS;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'a magnificent or otherwise interesting object; Great spiral nebula';
		result = getDescription('!!!;Great spiral nebula');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; little/long elongated/extended; very gradually brighter middle; involved/involving middle 51';
		result = getDescription('B;pS;lE;vgbM;inv M51');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; much brighter middle';
		result = getDescription('pF;pS;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended';
		result = getDescription('vF;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; little/long brighter middle';
		result = getDescription('vF;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty small; irregular round; little/long brighter middle';
		result = getDescription('cF;pS;iR;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; large; much elongated/extended; very difficult';
		result = getDescription('eF;L;mE;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; round; star of 10th magnitude preceding; preceding of 2';
		result = getDescription('F;cS;R;*10p;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; following of 2';
		result = getDescription('vF;vS;R;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; round; very little/long brighter middle';
		result = getDescription('cF;pL;R;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; very small stars near';
		result = getDescription('F;S;R;vS* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; little/long brighter middle';
		result = getDescription('vF;pL;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; elongated in position angle 65 degrees; binary ?';
		result = getDescription('cF;pL;E65;Bin?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round';
		result = getDescription('vF;S;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; much elongated/extended 0; star of 9th magnitude south preceding';
		result = getDescription('cF;S;mE0;*9 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; very little/long elongated/extended; easily resolvable';
		result = getDescription('F;cS;vlE;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle; small stars north preceding';
		result = getDescription('F;S;R;gbM;S* np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; gradually very little/long brighter middle';
		result = getDescription('vF;vS;R;gvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; round; gradually; pretty suddenly much brighter middle';
		result = getDescription('cB;pL;R;g;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/very remarkable object; extremely/excessively bright; very large; very suddenly/south much brighter middle; stars 11th magnitude and fainter..';
		result = getDescription('!!;eB;vL;vsmbM;st 11..');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle';
		result = getDescription('vF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually much brighter middle';
		result = getDescription('F;S;R;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small';
		result = getDescription('F;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; brighter middle';
		result = getDescription('eF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; brighter middle';
		result = getDescription('F;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle star of 14th magnitude';
		result = getDescription('F;S;R;gbM*14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular exactly round; resolvable (mottled not resolved) ?';
		result = getDescription('F;S;iRR;r?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended 90; suddenly/south brighter middle';
		result = getDescription('vF;vS;lE90;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; elongated in position angle 90 degrees; brighter middle Nucleus or to a Nucleus';
		result = getDescription('cB;pL;E90;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round; brighter middle; south preceding 5297';
		result = getDescription('R;bM;sp 5297');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; large; preceding middle elongated/extended 142; gradually brighter middle';
		result = getDescription('cB;L;pME142;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; large; very much elongated/extended 150';
		result = getDescription('cF;L;vmE150');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably small; little/long elongated/extended; faint double star involved/involving';
		result = getDescription('pF;cS;lE;F** inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; round; suddenly/south brighter middle; preceding of 2';
		result = getDescription('cF;cS;R;sbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; very little/long elongated/extended; gradually little/long brighter middle; following of 2';
		result = getDescription('pB;pS;vlE;glbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; stellar; 1 stars of 4';
		result = getDescription('vF;R;stellar;1st of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; round; gradually brighter middle';
		result = getDescription('cF;pL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; pretty suddenly brighter middle; 2 north diameter of 4';
		result = getDescription('F;S;R;psbM;2nd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; north of 5318; 3 resolvable (mottled not resolved) diameter of 4';
		result = getDescription('vF;R;n of 5318;3rd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round; suddenly/south very much brighter middle stars; 4 of 4';
		result = getDescription('eF;pL;R;svmbM*;4 of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; very little/long elongated/extended; suddenly/south brighter middle';
		result = getDescription('cF;S;vlE;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; very difficult; stars near';
		result = getDescription('eeF;pS;R;v diffic;* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; round; pretty suddenly brighter middle';
		result = getDescription('cF;pL;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round; star of 7th magnitude preceding';
		result = getDescription('vF;S;iR;*7p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'little/long elongated/extended; brighter middle; south preceding 5351';
		result = getDescription('lE;bM;sp 5351');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; irregular resolvable (mottled not resolved) round; gradually little/long brighter middle; resolvable (mottled not resolved) ?';
		result = getDescription('eF;pL;irrR;glbM;r?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'brighter middle; south preceding 5351';
		result = getDescription('bM;sp 5351');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably large; round; little/long brighter middle';
		result = getDescription('pF;cL;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; brighter middle; star of 7th magnitude preceding; 1 stars of 4';
		result = getDescription('cF;pL;bM;*7p;1st of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; 2 north diameter of 4';
		result = getDescription('pB;S;R;2nd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; 3 resolvable (mottled not resolved) diameter of 4';
		result = getDescription('pF;S;R;3rd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; large; little/long elongated/extended 90; very gradually brighter middle';
		result = getDescription('cF;L;lE90;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; little/long brighter middle; stars north following 90 arcseconds';
		result = getDescription('cF;S;R;lbM;* nf 90\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; 4th of 4';
		result = getDescription('vF;pS;4th of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; 2 very faint stars involved/involving';
		result = getDescription('vF;vS;R;2 vf * inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably small; elongated/extended';
		result = getDescription('eF;cS;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; elongated/extended';
		result = getDescription('pB;pL;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; round; brighter middle faint Nucleus or to a Nucleus';
		result = getDescription('pB;L;R;bMFN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; very gradually brighter middle; star of 9th magnitude north following';
		result = getDescription('F;L;vgbM;*9 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; much elongated/extended 42; suddenly/south much brighter middle Nucleus or to a Nucleus';
		result = getDescription('B;L;mE42;smbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; little/long elongated/extended; very gradually little/long brighter middle';
		result = getDescription('pB;lE;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; little/long brighter middle';
		result = getDescription('pB;pL;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; round; suddenly/south much brighter middle';
		result = getDescription('F;cS;R;smbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round; suddenly/south brighter middle stars';
		result = getDescription('vF;S;iR;sbM*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably large; round; gradually brighter middle';
		result = getDescription('cB;cL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; stars close';
		result = getDescription('F;vS;* close');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; north preceding of 2';
		result = getDescription('cF;S;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably large; elongated in position angle 15 degrees; little/long brighter middle; south following of 2';
		result = getDescription('cF;cL;E15;lbM;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; pretty much elongated/extended 90';
		result = getDescription('eF;vS;pmE90');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; elongated/extended';
		result = getDescription('cF;cS;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular figure';
		result = getDescription('vF;pL;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; little/long brighter middle';
		result = getDescription('F;pS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle; in cluster';
		result = getDescription('vF;vS;R;bM;in Cl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; brighter middle';
		result = getDescription('pF;pS;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; irregular resolvable (mottled not resolved) round; 2 very faint stars involved/involving';
		result = getDescription('F;irrR;2 vf * inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; considerably elongated/extended; between 2 stars';
		result = getDescription('vF;pL;cE;bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; little/long elongated/extended 0; brighter middle';
		result = getDescription('vF;cS;lE0;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably small; little/long elongated/extended; brighter middle; star of 11th magnitude south preceding';
		result = getDescription('pF;cS;lE;bM;*11 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; little/long elongated/extended; very suddenly/south much brighter middle';
		result = getDescription('pB;pL;lE;vsmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; star of 13th magnitude preceding';
		result = getDescription('F;*13p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; much elongated/extended; several very faint stars involved/involving';
		result = getDescription('pF;pL;mE;sev vF * inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; difficult';
		result = getDescription('eF;diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '11 arcseconds - extremely/excessively faint; pretty large; round; very little/long bright middle; low surface brightness';
		result = getDescription('11\'\'-eF; pL; R; vlBM; low surf brtness');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; stars very near';
		result = getDescription('F;vS;R;*v nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; faint stars small near';
		result = getDescription('eF;pS;R;F*S nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; 11 arcseconds - faint; very small; 3 arcseconds at 320X; orange hue';
		result = getDescription('vF;S; 11\'\'-F; vS; 3 arcsec at 320X; orange hue');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; very small; north bright middle; southeast in position angle 0 at 220X';
		result = getDescription('13\'\'-pB;vS;nBM;sE in PA0 at 220X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; preceding rich; little/long compressed; stars 11th magnitude and fainter th to 14th magnitude';
		result = getDescription('Cl;L;pRi;lC;st11..14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; very rich; stars from 11th to 15th magnitude';
		result = getDescription('Cl;vL;vRi;*11...15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; irregular figure; brighter middle';
		result = getDescription('pB;iF;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'planetary; bright; pretty large; round; star of 11th magnitude much';
		result = getDescription('Planetary;B;pL;R;*11m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar';
		result = getDescription('stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; little/long compressed; stars from 11th to 12th magnitude';
		result = getDescription('Cl;P;lC;*11...12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; 3 stars involved/involving';
		result = getDescription('eF;vS;3* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula; resolvable';
		result = getDescription('neb;resolvable');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty small; pretty much compressed; irregular round; stars from 12th to 16th magnitude';
		result = getDescription('Cl;pS;pmC;iR;*12..16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - could not find; 7/10 night at 165X';
		result = getDescription('13\'\'-could not find; 7/10 night at 165X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; small; irregular round; 8th magnitude stars involved at 100X';
		result = getDescription('13\'\'-pF;S;irR;8th mag* invol at 100X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '4 arcseconds - triangular shape; medium contrast';
		result = getDescription('4\'\'-triangular shape; medium contrast');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; among Milky Way stars';
		result = getDescription('F;am Milky Way st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; very rich; considerably compressed';
		result = getDescription('Cl;L;vRi;cC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; pretty large; suddenly/south bright middle; irregular round; 2 stars involved at 165X';
		result = getDescription('13\'\'-pB;pL;sBM;irR;2* invol at 165X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; stars large and small; double stars involved/involving';
		result = getDescription('Cl;st L&S;D* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; pretty large; arrowhead shape; 22 stars at 100X';
		result = getDescription('13\'\'-pB;pL;arrowhead shape; 22* at 100X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds 220X very faint; extremely/excessively small; round; very little/long brighter middle';
		result = getDescription('13\'\' 220X vF;eS;R;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; little/long compressed';
		result = getDescription('Cl;P;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - faint; pretty small; little/long brighter middle; round; averted vision helps at 165X';
		result = getDescription('13\'\'-F; pS; lbM; R; averted viz helps at 165X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; pretty large; suddenly/south compressed; north very rich; 22 stars magnitude 11th to 13th magnitude at 100X';
		result = getDescription('13\'\'-pF;pL;sC;nvRi; 22* mags 11..13 at 100X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint nebula';
		result = getDescription('F Neby');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '30 pretty faint stars in extremely/excessively faint nebula; small cluster';
		result = getDescription('30 pF * in eF neby;small cluster');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar';
		result = getDescription('stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar';
		result = getDescription('stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar';
		result = getDescription('stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; double star involved/involving';
		result = getDescription('Cl;pRi;** inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very large; very much elongated/extended; double star attached';
		result = getDescription('F;vL;vmE;** att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'ring nebula; faint; small; very very little/long elongated/extended';
		result = getDescription('ring neb;F;S;vvlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; stars from 8th to 13th magnitude';
		result = getDescription('Cl;st 8...13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; little/long compressed';
		result = getDescription('Cl;pRi;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - faint; pretty large; round at 100X; 10th magnitude star involved';
		result = getDescription('13\'\'-F;pL;R at 100X; 10th mag star invol');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; pretty large; north rich; suddenly/south compressed; 16 stars magnitude 11th to 13th magnitude at 100X';
		result = getDescription('13\'\'-pB;pL;nRi;sC; 16* mags 11..13 at 100X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster( + nebula)small; stars very small';
		result = getDescription('Cl(+ neb)S;st vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; pretty small; north rich; north compressed 19 stars magnitude 10th to 13th magnitude at 135X';
		result = getDescription('13\'\'-pF;pS;nRi;nC 19* mags 10..13 at 135X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty bright; pretty small; poor; preceding compressed; star of 20.12 magnitude';
		result = getDescription('Cl;pB;pS;P;pC;*20.12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; pretty small; north rich; little/long compressed; 22 stars at 135X';
		result = getDescription('13\'\'-pF;pS;nRi;lC; 22* at 135X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; faint stars near preceding; very difficult';
		result = getDescription('eeF;pS;F* nr p;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; little/long compressed; stars large and small';
		result = getDescription('Cl;P;lC;st L&S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very large; irregular round; diffused; 2 stars attached preceding';
		result = getDescription('vF;vL;iR;dif;2* att p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'Gamma Cygni nebula; large patches of faint nebulosity';
		result = getDescription('Gamma Cygni Neb;L patches of F nebulosity');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; small; north rich; north compressed at 100X; 6 stars involved/involving; not much';
		result = getDescription('13\'\'-pF; S; nRi; nC at 100X; 6* invl; not much');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '6 arcseconds - very faint; pretty large; irregular faint; averted vision only; 3 faint stars and fuzz';
		result = getDescription('6\'\'-vF; pL; irF; averted viz only; 3 F* and fuzz');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '6 arcseconds - bright; very large; north compressed; 24 stars magnitude 8 to 11; pretty well detached';
		result = getDescription('6\'\'-B; vL; nC; 24* mags 8 to 11; pretty well detached');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; pretty small; little/long compressed; north rich at 100X';
		result = getDescription('13\'\'-pF; pS; lC; nRi at 100X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; extremely/excessively irregular figure; Kappa Cygnus involved/involving';
		result = getDescription('pB;cL;eiF;Kappa Cyg invl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; diffused';
		result = getDescription('F;dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular elongated/extended; several faint stars following near';
		result = getDescription('vF;S;iE;sev F* f nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula stars; nebula considerably elongated/extended preceding following';
		result = getDescription('neb *;neby cE pf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; considerably large; stars south preceding';
		result = getDescription('Cl;cL;st sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very large; little/long elongated/extended north suddenly/south; stars involved/involving';
		result = getDescription('vF;vL;lE ns;st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'possible connection with NGC 6995';
		result = getDescription('Possibly conn w NGC 6995');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively large; extremely/excessively elongated/extended; extremely/excessively irregular figure; bright if irregular diameter';
		result = getDescription('eF;eL;eE;eiF;Bifid');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; little/long compressed';
		result = getDescription('Cl;P;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; poor; very little/long compressed';
		result = getDescription('Cl;L;P;vlC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; little/long compressed; stars large';
		result = getDescription('Cl;P;lC;st L');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '6 arcseconds - dark oval in rich field; good contrast';
		result = getDescription('6\'\'-dark oval in rich field; good contrast');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; extremely/excessively large; nebula and star in groups';
		result = getDescription('F;eL;neb&st in groups');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'naked eye at dark site; 8X42 binoculars great view';
		result = getDescription('naked eye at dark site; 8X42 binocs great view');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; large; elongated in position angle 45 degrees; resolvable (mottled not resolved); double star attached';
		result = getDescription('cB;L;E45;r;** att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; most extremely large; diffused nebulosity';
		result = getDescription('F;eeL;dif nebulosity');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; no description';
		result = getDescription('Cl;no description');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; small; elongated/extended 2X1 in position angle 15; thin dark lane in middle';
		result = getDescription('13\'\'-pB; S; E 2X1 in PA 15; thin dark lane in middle');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably small; round; pretty suddenly brighter middle; pretty bright stars north preceding';
		result = getDescription('pB;cS;R;psbM;pB* np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; little/long compressed; stars 10th magnitude and fainter th magnitude and fainter';
		result = getDescription('Cl;P;lC;st10...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; binuclear';
		result = getDescription('pB;biN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively bright; small';
		result = getDescription('eB;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster of triple stars; little/long compressed';
		result = getDescription('Cl of triple st;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; irregular figure; stars 11th magnitude and fainter th to 15th magnitude';
		result = getDescription('Cl;pRi;iF;st11...15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; preceding rich; elongated/extended; stars 10th magnitude and fainter...';
		result = getDescription('Cl;vL;pRi;E;st 10...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; faint; stars 13 magnitude';
		result = getDescription('S;F;stars 13 mag');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very faint; pretty large; very rich; very compressed; stars from 15th to 18th magnitude';
		result = getDescription('Cl;vF;pL;vRi;vC;st 15...18');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; diffused; irregular round; very little/long brighter middle';
		result = getDescription('pF;pL;dif;iR;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; no description';
		result = getDescription('Cl;no description');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; faint stars involved/involving';
		result = getDescription('vF;vS;R;F* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; little/long compressed';
		result = getDescription('Cl;P;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty small; preceding rich; preceding compressed; stars 13th magnitude and fainter th magnitude and fainter';
		result = getDescription('Cl;pS;pRi;pC;st13...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; (nebula)';
		result = getDescription('Cl;P;(neb)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; stars 10th magnitude and fainter th magnitude and fainter';
		result = getDescription('Cl;P;st10...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; compressed; considerably elongated/extended';
		result = getDescription('Cl;S;C;cE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; considerably rich; little/long compressed; stars 10th magnitude and fainter th to 13th magnitude';
		result = getDescription('Cl;L;cRi;lC;st10..13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; considerably large; very rich; preceding compressed; stars from 11th to 16th magnitude';
		result = getDescription('Cl;cL;vRi;pC;*11..16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; poor; very little/long compressed; stars from 7th to 10th magnitude';
		result = getDescription('Cl;vL;P;vlC;*7...10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; faint; stellar';
		result = getDescription('vS;F;Stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds 220X faint; very small; little/long elongated/extended 90; almost supernova';
		result = getDescription('13\'\' 220X F;vS;lE 90;alm SN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; little/long compressed';
		result = getDescription('Cl;P;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebulosity variable star';
		result = getDescription('nebulosity var*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; much elongated/extended';
		result = getDescription('vF;pL;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; poor; little/long compressed';
		result = getDescription('Cl;S;P;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; preceding rich; has a ruby star of 9.5 magnitude';
		result = getDescription('Cl;S;pRi;has a ruby *9.5');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; double star?(involved/involving in nebulous??)';
		result = getDescription('vF;D*?(inv in neb?)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula; no description';
		result = getDescription('neb;no description');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '6 arcseconds - excellent dark lane; Cocoon Nebula at end';
		result = getDescription('6\'\'-excellent dark lane; Cocoon Nebula at end');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; irregular round; star of 9.5 magnitude much involved/involving; brighter resolvable (mottled not resolved) + dark masses involved/involving';
		result = getDescription('F;L;iR;*9.5 m invl;br + drk masses invl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; preceding rich; little/long compressed';
		result = getDescription('Cl;vL;pRi;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar = 9.5 magnitude';
		result = getDescription('stellar=9.5m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; round; 4 small stars near';
		result = getDescription('B;pS;R;4S* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; attached to a small stars';
		result = getDescription('vF;S;att to a S*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; little/long elongated/extended';
		result = getDescription('eF;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; much elongated/extended';
		result = getDescription('pB;pL;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; much elongated/extended';
		result = getDescription('F;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; 6934 following';
		result = getDescription('pB;vS;6934 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; round; well resolved clearly consisting of stars; star of 16th magnitude th magnitude and fainter';
		result = getDescription('B;L;R;rrr;*16...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round';
		result = getDescription('pF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; very little/long compressed';
		result = getDescription('Cl;P;vlC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; stellar; double star attached';
		result = getDescription('vF;S;stell;** att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; very little/long elongated/extended';
		result = getDescription('F;S;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round';
		result = getDescription('eF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; elongated/extended';
		result = getDescription('F;pL;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - extremely/excessively faint; pretty large; irregular round; 3 stars involved at 135X; UHC helps';
		result = getDescription('13\'\'-eF;pL;irR;3* invol at 135X; UHC helps');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round';
		result = getDescription('eF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended; star of 15th magnitude close following';
		result = getDescription('vF;vS;lE;*15 close f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; round; gradually brighter middle';
		result = getDescription('B;pL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long elongated/extended';
		result = getDescription('vF;S;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; stellar';
		result = getDescription('vF;vS;R;stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; pretty much brighter middle; star of 8th magnitude north preceding';
		result = getDescription('F;vS;R;pmbM;*8 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely extremely/excessively faint; small; round; between 2 stars 12 and 13';
		result = getDescription('eeeF;S;R;bet 2*12&13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; very much elongated/extended 10; brighter middle';
		result = getDescription('B;L;vmE10;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; very little/long brighter middle';
		result = getDescription('eF;vS;R;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'only 3 very faint stars (not a nebula)';
		result = getDescription('only 3 vF * (not a nebula)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; round; suddenly/south much brighter middle; 2 stars 10 north following';
		result = getDescription('vB;vL;R;smbM;2*10 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; little/long elongated/extended; gradually brighter middle elongated/extended Nucleus or to a Nucleus; double star preceding';
		result = getDescription('pB;lE;gbMEN;**p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; round';
		result = getDescription('B;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty small; round; gradually much brighter middle; among 3 stars; a double nebula';
		result = getDescription('vB;pS;R;gmbM;am 3*;a Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; elongated in position angle 165 degrees; very gradually little/long brighter middle';
		result = getDescription('cF;S;E165;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; very large; very gradually; suddenly/south very much brighter middle; 15 diameter in RA';
		result = getDescription('B;vL;vg;svmbM;15d in RA');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; brighter middle';
		result = getDescription('pF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended; gradually little/long brighter middle';
		result = getDescription('F;S;E;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; much elongated/extended 15; suddenly/south much brighter middle; preceding of 2';
		result = getDescription('B;pL;mE15;smbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; little/long elongated/extended; following of 2';
		result = getDescription('eF;pL;lE;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; much elongated/extended 106; very gradually; very suddenly/south much brighter middle Nucleus or to a Nucleus 5 arcseconds';
		result = getDescription('B;L;mE106;vg;vsmbMN 5\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; preceding rich; pretty much compressed; stars from 11th to 16th magnitude';
		result = getDescription('Cl;pL;pRi;pmC;*11...16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle';
		result = getDescription('F;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; gradually brighter middle';
		result = getDescription('F;pS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually little/long brighter middle';
		result = getDescription('vF;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular round; resolvable (mottled not resolved)';
		result = getDescription('vF;pL;iR;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; suddenly/south much brighter middle Nucleus or to a Nucleus';
		result = getDescription('B;L;smbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; irregular round; pretty gradually much brighter middle';
		result = getDescription('pB;pL;iR;pgmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; elongated/extended; very little/long brighter middle';
		result = getDescription('vF;E;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; round; partially resolved some stars seen';
		result = getDescription('pB;L;R;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; gradually little/long brighter middle';
		result = getDescription('pB;pS;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; little/long elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('F;pS;lE;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty bright; small';
		result = getDescription('Cl;pB;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty faint; small; round; 2 north diameter of 3';
		result = getDescription('Cl;pF;S;R;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; small; elongated/extended or binuclear; brighter middle; south preceding 2';
		result = getDescription('vB;S;E or biN;bM;sp 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; suddenly/south brighter middle; 2 stars near; north following of 2';
		result = getDescription('vF;S;R;sbM;2* nr;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty bright; pretty small; pretty much elongated/extended; stars 12th magnitude and fainter';
		result = getDescription('Cl;pB;pS;pmE;st12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; very gradually little/long brighter middle';
		result = getDescription('F;pS;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; very gradually little/long brighter middle';
		result = getDescription('F;pS;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; round; very gradually little/long brighter middle; double star attached';
		result = getDescription('F;L;R;vglbM;** att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; round; resolvable (mottled not resolved)';
		result = getDescription('B;R;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; round; close double star in middle';
		result = getDescription('S;R;close ** in M');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; little/long rich; little/long compressed; stars 10th magnitude and fainter th to 15th magnitude';
		result = getDescription('Cl;pL;lRi;lC;st10...15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; round; gradually much brighter middle';
		result = getDescription('pB;L;R;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; 1 stars of 4';
		result = getDescription('vF;S;1st of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; gradually brighter middle';
		result = getDescription('eF;pS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; round; gradually brighter middle; resolvable (mottled not resolved); 2 north diameter of 4';
		result = getDescription('B;pL;R;gbM;r;2nd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; 2 stars attached';
		result = getDescription('pF;pS;R;2* att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; 3 resolvable (mottled not resolved) diameter of 4';
		result = getDescription('F;S;3rd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; round; 4th of 4';
		result = getDescription('pB;vS;R;4th of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; preceding of 2';
		result = getDescription('vF;R;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty small; little/long rich; stars very small';
		result = getDescription('Cl;pS;lRi;st vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; round; gradually brighter middle; following of 2';
		result = getDescription('vB;pL;R;gbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'no diameter extremely/excessively scattered resolvable (mottled not resolved) in Large Magellanic Cloud';
		result = getDescription('no descr in LMC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; much compressed; stars star of 9th magnitude middle';
		result = getDescription('Cl;L;mC;**9M');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; 3 very small stars involved/involving';
		result = getDescription('vF;S;3vS* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; very irregular much elongated/extended';
		result = getDescription('vB;vL;vimE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; irregular round; partially resolved some stars seen';
		result = getDescription('pB;pS;iR;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle';
		result = getDescription('F;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster + nebula; pretty large; preceding rich; stars from 11th to 18th magnitude';
		result = getDescription('Cl+ neb;pL;pRi;*11...18');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; irregular round; very suddenly/south much brighter middle';
		result = getDescription('B;L;iR;vsmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; pretty much brighter middle; partially resolved some stars seen';
		result = getDescription('pB;S;R;pmbM;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; suddenly/south much brighter middle; double star + nebula';
		result = getDescription('B;S;R;smbM;**+ neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; irregular round; 2 or 3 bright stars near';
		result = getDescription('pF;pL;iR;2 or 3 B st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; gradually little/long brighter middle';
		result = getDescription('cF;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually brighter middle';
		result = getDescription('vF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'no diameter extremely/excessively scattered resolvable (mottled not resolved) in Large Magellanic Cloud';
		result = getDescription('no descr in LMC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; much elongated/extended; gradually little/long brighter middle; star of 7th magnitude; 8 north preceding';
		result = getDescription('vF;mE;glbM;*7;8 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; large; round; very gradually pretty much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cB;L;R;vgpmbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2';
		result = getDescription('2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty small; little/long elongated/extended; very suddenly/south very much brighter middle; star of 9th magnitude';
		result = getDescription('vB;pS;lE;vsvmbM;* 9');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually little/long brighter middle';
		result = getDescription('F;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; little/long elongated/extended';
		result = getDescription('F;pL;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; very gradually little/long brighter middle; preceding of 2';
		result = getDescription('F;pL;R;vglbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle';
		result = getDescription('F;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; preceding rich';
		result = getDescription('Cl;vL;pRi');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually brighter middle; 2 north diameter of 2';
		result = getDescription('pF;S;R;gbM;2nd of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; gradually brighter middle';
		result = getDescription('pB;L;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; very small; very suddenly/south much brighter middle; stars + nebula';
		result = getDescription('B;vS;vsmbM;st+ neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; pretty much elongated/extended; very gradually little/long brighter middle';
		result = getDescription('pF;pS;pmE;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; little/long brighter middle; globular cluster following';
		result = getDescription('cF;S;R;lbM;globular cluster foll');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; suddenly/south of 2 in cluster';
		result = getDescription('vF;R;s of 2 in Cl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'III 1 much';
		result = getDescription('III 1 m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; 2 north diameter nebula in cluster';
		result = getDescription('vF;R;2nd neb in Cl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; rich; compressed; irregular figure';
		result = getDescription('Cl;pL;Ri;C;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; round; very much compressed; partially resolved some stars seen';
		result = getDescription('vB;pL;R;vmC;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'no description';
		result = getDescription('no description');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; 1 stars of 3';
		result = getDescription('F;S;R;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; 2 north diameter of 3';
		result = getDescription('F;pS;R;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; resolvable (mottled not resolved)';
		result = getDescription('F;pL;R;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '3';
		result = getDescription('3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; small; round; gradually much brighter middle; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('cB;S;R;gmbM;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; preceding of 2';
		result = getDescription('vF;S;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; extremely/excessively small; irregular elongated/extended';
		result = getDescription('B;eS;iE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; following of 2';
		result = getDescription('vF;S;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stars + nebula; 1 stars of several';
		result = getDescription('st+ neb;1st of sev');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stars + nebula; pretty bright; irregular figure; 2 north diameter of several';
		result = getDescription('st+ neb;pB;iF;2nd of several');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; very little/long compressed';
		result = getDescription('Cl;L;vlC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; round; gradually little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('B;L;R;glbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; very much elongated/extended 162';
		result = getDescription('vF;pL;vmE162');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; little/long elongated/extended; double star in middle';
		result = getDescription('B;S;lE;**in M');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very very following; resolvable (mottled not resolved); preceding of 2';
		result = getDescription('vvf;r;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; gradually brighter middle; following of 2';
		result = getDescription('pF;pL;R;gbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; round; very gradually little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;cL;R;vglbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; little/long elongated/extended; very much compressed middle; partially resolved some stars seen; remarkable object';
		result = getDescription('vB;L;lE;vmCM;rr;!');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; small; round; gradually brighter middle; 2 north diameter of 3';
		result = getDescription('cB;S;R;gbM;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very bright; large; round; stars 12th magnitude and fainter';
		result = getDescription('Cl;vB;L;R;st 12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; very gradually little/long brighter middle';
		result = getDescription('F;pL;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; round; gradually brighter middle; 12 arcseconds diameter RA';
		result = getDescription('B;pL;R;gbM;12\'\' diam RA');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended; gradually little/long brighter middle';
		result = getDescription('vF;S;lE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; irregular elongated/extended; binuclear; compressed large + nebula';
		result = getDescription('B;L;iE;biN;CL+ neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; very gradually brighter middle';
		result = getDescription('F;pL;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; very gradually brighter middle; star of 7th magnitude north following 6 arcminutes';
		result = getDescription('F;S;R;vgbM;*7 nf 6\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very small; round; resolvable (mottled not resolved) or stellar';
		result = getDescription('vB;vS;R;r or stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; much elongated/extended 45; very gradually very little/long brighter middle; stars north following';
		result = getDescription('F;S;mE45;vgvlbM;* nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; very gradually little/long brighter middle';
		result = getDescription('vF;pL;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; irregular round; very gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pF;L;iR;vgbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; irregular round; brighter middle; resolvable (mottled not resolved) or stellar';
		result = getDescription('F;pS;iR;bM;r or stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; gradually little/long brighter middle';
		result = getDescription('B;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; round; gradually brighter middle; 1 stars of group';
		result = getDescription('pB;R;gbM;1st of group');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula and cluster; binuclear';
		result = getDescription('neb and Cl;biN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '4th of group in cluster';
		result = getDescription('4th of group in Cl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; irregular round; binuclear; 2 north diameter in group';
		result = getDescription('pB;iR;biN;2nd in group');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; double star preceding';
		result = getDescription('vF;**p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; round; very gradually much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vB;L;R;vgmbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round';
		result = getDescription('eF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; 3 resolvable (mottled not resolved) diameter if group in cluster';
		result = getDescription('vF;3rd if group in Cl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; preceding rich; stars scattered';
		result = getDescription('Cl;L;pRi;st sc');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; little/long rich; 2 north diameter of several';
		result = getDescription('Cl;lRi;2nd of several');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; 3 resolvable (mottled not resolved) diameter of several';
		result = getDescription('Cl;3rd of sev');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; very gradually little/long brighter middle';
		result = getDescription('pB;pL;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; round; brighter middle';
		result = getDescription('pB;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; round; very gradually very little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pF;R;vgvlbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large';
		result = getDescription('eF;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; suddenly/south brighter middle; resolvable (mottled not resolved); stars involved/involving';
		result = getDescription('F;pL;R;sbM;r;st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; stars preceding 25 arcseconds';
		result = getDescription('vF;vS;R;*p25\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round';
		result = getDescription('F;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; gradually very little/long brighter middle';
		result = getDescription('pF;pL;R;gvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; brighter middle; little/long rich; stars 7th magnitude and fainter th magnitude and fainter';
		result = getDescription('Cl;bM;lRi;st7...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; elongated in position angle 90 degrees; very gradually little/long brighter middle';
		result = getDescription('cF;pL;E90;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; small; round; gradually much brighter middle';
		result = getDescription('vB;S;R;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; very gradually little/long brighter middle; 3 stars 10 preceding';
		result = getDescription('F;pS;R;vglbM;3*10p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; pretty much brighter middle; partially resolved some stars seen';
		result = getDescription('pB;pL;R;pmbM;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'no description in Large Magellanic Cloud';
		result = getDescription('no description in LMC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; resolvable (mottled not resolved)';
		result = getDescription('F;S;R;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; very gradually very much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('B;S;R;vgvmbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; preceding rich; irregular round; stars 11th magnitude and fainter th to 16th magnitude';
		result = getDescription('Cl;L;pRi;iR;st11..16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; round; very gradually little/long brighter middle';
		result = getDescription('vF;L;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'no diameter extremely/excessively scattered resolvable (mottled not resolved) in Large Magellanic Cloud';
		result = getDescription('no descr in LMC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; little/long elongated/extended; very gradually very little/long brighter middle; star of 7th magnitude north preceding';
		result = getDescription('F;pL;lE;vgvlbM;*7 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('vF;pS;lE;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round; gradually brighter middle; among stars';
		result = getDescription('F;R;gbM;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large';
		result = getDescription('eF;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'no diameter extremely/excessively scattered resolvable (mottled not resolved) in Large Magellanic Cloud';
		result = getDescription('no descr in LMC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; extremely/excessively faint; large; irregular round; much compressed; partially resolved some stars seen';
		result = getDescription('Cl;eF;L;iR;mC;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; very gradually brighter middle';
		result = getDescription('pB;pL;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; irregular round; resolvable (mottled not resolved); in diffused nebula';
		result = getDescription('pB;pL;iR;r;in dif neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; gradually brighter middle';
		result = getDescription('pF;pL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round';
		result = getDescription('vF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; preceding of group';
		result = getDescription('F;p of group');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very little/long rich; irregular compressed; stars 10th magnitude and fainter';
		result = getDescription('Cl;vlRi;iC;st10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2 north diameter nebula of group';
		result = getDescription('2nd neb of group');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; 3 resolvable (mottled not resolved) diameter of group';
		result = getDescription('pF;S;R;3rd of group');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; 4th of group';
		result = getDescription('pB;S;R;4th of group');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; suddenly/south much brighter middle; poor with 1933; position 260; 80 arcseconds';
		result = getDescription('pB;S;R;smbM;P w 1933;pos 260;80\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; round; stellar; poor with NGC 1932';
		result = getDescription('eF;R;stellar;P w NGC 1932');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; follows a group';
		result = getDescription('vF;pL;follows a group');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; round; brighter middle; 2 stars 9 and 10 following';
		result = getDescription('pB;vS;R;bM;2*9&10 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; nebula + stars';
		result = getDescription('vS;neb +st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively bright; most extremely large; much bright middle; much elongated/extended; well resolved clearly consisting of stars';
		result = getDescription('eB;eeL;mBM;mE;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; stellar; star of 14th magnitude + nebula';
		result = getDescription('eF;stell;*14+ neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely extremely/excessively faint; very very large; irregular resolvable (mottled not resolved) difficult';
		result = getDescription('eeeF;vvL;irr diff');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; pretty suddenly brighter middle';
		result = getDescription('pB;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; round; gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pF;R;gbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; gradually little/long brighter middle';
		result = getDescription('pB;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; irregular round; very gradually brighter middle; 2 north diameter of group!';
		result = getDescription('F;pL;iR;vgbM;2nd of group!');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; considerably large; rich; stars 13th magnitude and fainter';
		result = getDescription('Cl;cL;Ri;st 13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; little/long elongated/extended; suddenly/south brighter middle stars star of 10th magnitude and 11';
		result = getDescription('B;lE;sbM**10 & 11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; rich; 2 north diameter of several';
		result = getDescription('Cl;Ri;2nd of several');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; 1 stars of 4';
		result = getDescription('vF;pL;R;1st of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; 2 north following of 4';
		result = getDescription('F;S;2nf of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; 4th of group preceding of 7';
		result = getDescription('F;S;4th of grp of 7');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'no diameter extremely/excessively scattered resolvable (mottled not resolved) in Large Magellanic Cloud';
		result = getDescription('no descr in LMC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; round; gradually little/long brighter middle; star of 9th magnitude north preceding';
		result = getDescription('pB;L;R;glbM;*9 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; round; pretty suddenly little/long brighter middle; 3 resolvable (mottled not resolved) diameter of 4; in pretty large; irregular resolvable (mottled not resolved) cluster';
		result = getDescription('pB;R;pslbM;3rd of 4;in pL;irr Cl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '5th of group preceding of 7';
		result = getDescription('5th of grp of 7');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '6th of 7; double; a very small nebula north preceding';
		result = getDescription('6th of 7;D;a vS neb np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '4th of 4';
		result = getDescription('4th of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; rich; 3 resolvable (mottled not resolved) diameter of several';
		result = getDescription('Cl;Ri;3rd of several');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; preceding rich; irregular figure';
		result = getDescription('Cl;vL;pRi;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; place of double star';
		result = getDescription('Cl;place of **');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; irregular round';
		result = getDescription('Cl;L;irR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; 4th of several';
		result = getDescription('Cl;4th of sev');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; extremely/excessively small; stars 11th magnitude and fainter th to 16th magnitude';
		result = getDescription('Cl;eS;st11...16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'V';
		result = getDescription('V');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; little/long elongated/extended; very gradually pretty much brighter middle';
		result = getDescription('vB;vL;lE;vgpmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; stars 13th magnitude and fainter much';
		result = getDescription('Cl;st 13m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'no description; in Large Magellanic Cloud';
		result = getDescription('no description;in LMC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; small; round; double star + nebula in very large cluster';
		result = getDescription('vB;S;R;** + neb in vLCl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably small; round';
		result = getDescription('eF;cS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; preceding rich; compressed; stars 12th magnitude and fainter';
		result = getDescription('B;pL;pRi;C;st 12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; stellar; resolvable (mottled not resolved)';
		result = getDescription('B;S;stellar;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; gradually little/long brighter middle; in cluster';
		result = getDescription('pF;pS;R;glbM;in Cl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; extremely/excessively large; very rich; very bright very supernova middle';
		result = getDescription('Cl;eL;vRi;vBvSNM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; rich; very little/long compressed';
		result = getDescription('Cl;vL;Ri;vlC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; small; round; pretty suddenly much brighter middle';
		result = getDescription('vB;S;R;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; preceding compressed; irregular figure; stars 9th magnitude and fainter th to 15th magnitude';
		result = getDescription('Cl;pL;pC;iF;st9...15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very large; very little/long elongated/extended; very gradually little/long brighter middle';
		result = getDescription('F;vL;vlE;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; in pretty large cluster';
		result = getDescription('vF;S;R;in pLCl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; in Large Magellanic Cloud';
		result = getDescription('Cl;in LMC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; rich; stars from 9th to 11th magnitude';
		result = getDescription('Cl;vL;Ri;st 9...11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; gradually brighter middle; in considerably large cluster';
		result = getDescription('pB;pL;R;gbM;in cLCl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; in Large Magellanic Cloud';
		result = getDescription('Cl;in LMC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; elongated/extended; 2 north diameter of 3';
		result = getDescription('B;L;E;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; rich';
		result = getDescription('Cl;vL;Ri');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; round; brighter middle; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('B;L;R;bM;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; irregular round; gradually brighter middle; 1 stars of 3';
		result = getDescription('pB;L;iR;gbM;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; rich; stars 12th magnitude and fainter th to 15th magnitude';
		result = getDescription('Cl;vL;Ri;st12...15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; in Large Magellanic Cloud';
		result = getDescription('Cl;in LMC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; pretty much elongated/extended';
		result = getDescription('vF;L;pmE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; irregular round; gradually little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;L;iR;glbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; very gradually little/long brighter middle';
		result = getDescription('B;S;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster + nebula; much compressed; irregular figure; stars very small';
		result = getDescription('Cl+ neb;mC;iF;st vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; rich; stars from 10th to 15th magnitude';
		result = getDescription('Cl;vL;Ri;st 10...15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very very small; very gradually little/long brighter middle';
		result = getDescription('eF;vvS;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; little/long elongated/extended; gradually brighter middle';
		result = getDescription('F;pL;lE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula; no description; in Large Magellanic Cloud';
		result = getDescription('neb;no description;in LMC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'a magnificent or otherwise interesting object very bright; very large; looped';
		result = getDescription('!!! vB;vL;looped');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; elongated/extended';
		result = getDescription('F;L;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; much elongated/extended; 5 stars involved/involving';
		result = getDescription('pB;pL;mE;5* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round; preceding of double nebula';
		result = getDescription('F;R;p of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula; north preceding of group of 7';
		result = getDescription('neb;np of group of 7');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula; south preceding of group of 7';
		result = getDescription('neb;sp of group of 7');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; round; following of double nebula';
		result = getDescription('B;R;f of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; elongated/extended; gradually little/long brighter middle; 2 stars 10 suddenly/south';
		result = getDescription('vF;pS;E;glbM;2* 10 s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very faint; much compressed; stars + nebula';
		result = getDescription('Cl;vF;mC;st + neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula; north following of group of 7';
		result = getDescription('neb;nf of group of 7');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula; south following of group of 7';
		result = getDescription('neb;sf of group of 7');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; star of 10th magnitude very near';
		result = getDescription('vF;R;*10 vnr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; round; little/long brighter middle; star of 10th magnitude preceding';
		result = getDescription('B;pS;R;lbM;*10 p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; much elongated/extended; gradually little/long brighter middle; double ?';
		result = getDescription('vF;S;mE;glbM;D?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; partially resolved some stars seen';
		result = getDescription('vF;pL;R;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; round; gradually little/long brighter middle';
		result = getDescription('pF;L;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; irregular resolvable (mottled not resolved) round; partially resolved some stars seen';
		result = getDescription('B;pL;irr R;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula; no description; in Large Magellanic Cloud';
		result = getDescription('neb;no description;in LMC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula; no description; in Large Magellanic Cloud';
		result = getDescription('neb;no description;in LMC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'Globular; bright; small; partially resolved some stars seen';
		result = getDescription('Globular;B;S;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; faint; considerably small; irregular resolvable (mottled not resolved)';
		result = getDescription('Cl;F;cS;irr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; little/long elongated/extended';
		result = getDescription('eF;pL;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; irregular round; pretty suddenly little/long brighter middle star of 16th magnitude';
		result = getDescription('vF;pS;iR;pslbM *16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; gradually brighter middle';
		result = getDescription('F;pS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; very gradually little/long brighter middle';
		result = getDescription('F;pS;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; faint; small; irregular figure; very little/long compressed; partially resolved some stars seen';
		result = getDescription('Cl;F;S;iF;vlC;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; irregular round';
		result = getDescription('eF;pL;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; star of 11th magnitude preceding';
		result = getDescription('F;S;R;*11 p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very small; very suddenly/south much brighter middle; partially resolved some stars seen';
		result = getDescription('vB;vS;vsmbM;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; irregular round; very little/long brighter middle; well resolved clearly consisting of stars';
		result = getDescription('F;pL;iR;vlbM;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; round; very gradually little/long brighter middle';
		result = getDescription('cF;pL;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; gradually brighter middle';
		result = getDescription('vF;pS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; round; gradually much brighter middle';
		result = getDescription('pB;vS;R;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; round; gradually brighter middle';
		result = getDescription('pB;vS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; gradually little/long brighter middle';
		result = getDescription('F;pS;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; round; gradually much brighter middle; partially resolved some stars seen; stars from 14th to 16th magnitude';
		result = getDescription('pB;R;gmbM;rr;* 14...16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; following of 2';
		result = getDescription('vF;S;R;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; resolvable (mottled not resolved); among stars';
		result = getDescription('F;pS;R;r;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; irregular round; brighter middle';
		result = getDescription('pF;pS;iR;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; brighter middle';
		result = getDescription('eF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; very suddenly/south much brighter middle; stellar';
		result = getDescription('F;vS;R;vsmbM;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; brighter middle';
		result = getDescription('F;pS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; very gradually little/long brighter middle';
		result = getDescription('F;pL;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; small; round; very gradually very much brighter middle; partially resolved some stars seen';
		result = getDescription('vB;S;R;vgvmbM;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; gradually brighter middle; 1 stars of 3';
		result = getDescription('pB;S;R;gbM;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; little/long elongated/extended; star of 16th magnitude attached';
		result = getDescription('eeF;lE;*16 att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually brighter middle; star of 15th magnitude attached north following';
		result = getDescription('pF;S;R;gbM;*15 att nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; gradually brighter middle';
		result = getDescription('pF;pS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; very gradually little/long brighter middle';
		result = getDescription('F;pL;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; round; much compressed middle; partially resolved some stars seen';
		result = getDescription('vB;R;mCM;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle';
		result = getDescription('F;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably large; round; little/long brighter middle';
		result = getDescription('F;cL;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; very gradually little/long brighter middle';
		result = getDescription('F;pL;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty large; round; gradually brighter middle';
		result = getDescription('eeF;pL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; irregular round; little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;vS;iR;lbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; gradually brighter middle; double nebula; (companion very faint; round; gradually little/long brighter middle )';
		result = getDescription('pB;pS;R;gbM;Dneb;(comp vF;R;glbM)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; gradually brighter middle';
		result = getDescription('vF;pS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; irregular figure; gradually little/long brighter middle; 2 or 3 stars involved/involving';
		result = getDescription('F;iF;glbM;2 or 3* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '3';
		result = getDescription('3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; round; much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vB;pL;R;mbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; little/long elongated/extended; gradually brighter middle; well resolved clearly consisting of stars';
		result = getDescription('B;pS;lE;gbM;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; gradually very little/long brighter middle; double star following';
		result = getDescription('F;pL;R;gvlbM;** f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually little/long brighter middle';
		result = getDescription('F;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; 1 stars of 3';
		result = getDescription('eF;vS;R;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended; 2 north diameter of 3';
		result = getDescription('eF;S;lE;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('eF;S;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; star of 12th magnitude near';
		result = getDescription('vF;S;R;*12 nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; gradually little/long brighter middle';
		result = getDescription('vF;pL;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; very gradually brighter middle; double star preceding';
		result = getDescription('pB;pL;R;vgbM;** p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably large; round; very gradually little/long brighter middle; resolvable (mottled not resolved); 17 arcseconds diameter';
		result = getDescription('F;cL;R;vglbM;r;17   sec d');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; irregular figure; double stars following 3 arcminutes';
		result = getDescription('eF;S;iF;D* f 3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; irregular figure';
		result = getDescription('cB;pL;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle';
		result = getDescription('vF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; star of 13th magnitude near';
		result = getDescription('eF;*13 nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; resolvable (mottled not resolved)';
		result = getDescription('vF;pL;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; very little/long brighter middle; 2 small stars suddenly/south';
		result = getDescription('eF;pL;vlbM;2 S * s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; star of 13th magnitude attached following';
		result = getDescription('vF;S;R;*13 att f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; stellar; small stars following near';
		result = getDescription('cF;S;stellar;S* f nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; round; very gradually very suddenly/south very much brighter middle';
		result = getDescription('vB;L;R;vgvsvmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; elongated/extended; little/long brighter middle';
		result = getDescription('F;pL;E;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably large; easily resolvable [place?]';
		result = getDescription('cB;cL;er [place?]');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar; 1 stars of 3 in line; 1 arcminutes apart';
		result = getDescription('stellar;1st of 3 in line;1\' apart');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; 2 north diameter of 3';
		result = getDescription('vF;S;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('vF;S;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; much elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('eF;pS;mE;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; little/long elongated/extended; pretty suddenly much brighter middle';
		result = getDescription('pB;S;lE;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; very small; irregular figure';
		result = getDescription('cB;vS;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually brighter middle';
		result = getDescription('pF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; irregular elongated/extended; very gradually brighter middle';
		result = getDescription('pF;L;iE;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round; very gradually little/long brighter middle; double star north following';
		result = getDescription('eF;pL;R;vglbM;** nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint and extremely/excessively faint; double nebula; very near';
		result = getDescription('vF & eF;Dneb;v near');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very doubtful object';
		result = getDescription('very doubtful object');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; little/long brighter middle (place doubtful)';
		result = getDescription('F;pL;lbM (place doubtful)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; star of 17th magnitude near';
		result = getDescription('vF;pL;*17 nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; little/long elongated/extended; gradually brighter middle; star of 15th magnitude; 22; 70 arcseconds';
		result = getDescription('pF;pS;lE;gbM;*15;22;70\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; small; irregular round; south preceding much brighter middle Nucleus or to a Nucleus';
		result = getDescription('cB;S;iR;spmbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; place doubtful';
		result = getDescription('eF;S;place doubtful');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large';
		result = getDescription('pB;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; much elongated/extended 130; much brighter middle';
		result = getDescription('pB;L;mE 130;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; much elongated/extended 105';
		result = getDescription('F;pL;mE 105');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle';
		result = getDescription('vF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round (place doubtful)';
		result = getDescription('eF;vS;R (place doubtful)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; irregular figure; gradually very little/long brighter middle';
		result = getDescription('eF;S;iF;gvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; gradually brighter middle; following of 3';
		result = getDescription('B;S;R;gbM;f of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; little/long elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('F;vS;lE;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; considerably elongated/extended; much brighter middle';
		result = getDescription('pB;pL;cE;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; elongated/extended';
		result = getDescription('eF;vS;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; little/long elongated/extended; brighter middle; suddenly/south very bright Nucleus or to a Nucleus; spindle shape';
		result = getDescription('cB;lE;bM;svBN;spindle shape');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; round; gradually much brighter middle';
		result = getDescription('pB;cL;R;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; triangle 2 stars';
		result = getDescription('eF;pS;R;tri 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; star of 12th magnitude following; little/long north';
		result = getDescription('pB;pS;R;*12f;ln');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; very gradually brighter middle; suddenly/south bright Nucleus or to a Nucleus in narrow bright bar';
		result = getDescription('pF;pS;R;vgbM;sBN in narrow B bar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; pretty suddenly brighter middle; very suddenly/south very bright Nucleus or to a Nucleus on bright bar';
		result = getDescription('pB;S;R;psbM;vsvBN on B bar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively large; much elongated/extended 160; very gradually brighter middle';
		result = getDescription('vF;eL;mE160;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; irregular round; very gradually little/long brighter middle';
		result = getDescription('vF;pS;iR;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; pretty gradually brighter middle; very suddenly/south very bright Nucleus or to a Nucleus';
		result = getDescription('pB;S;R;pgbM;vsvBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; considerably elongated/extended 38; brighter middle bright Nucleus or to a Nucleus; suddenly/south bright Nucleus or to a Nucleus in bright bulge';
		result = getDescription('pB;L;cE38;bMBN;sBN in B bulge');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; round; little/long brighter middle; 3 stars following';
		result = getDescription('pB;vS;R;lbM;3*f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; very little/long elongated/extended; suddenly/south brighter middle; very suddenly/south very bright Nucleus or to a Nucleus in bar';
		result = getDescription('pB;pS;vlE;sbM;vsvBN in bar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; gradually brighter middle';
		result = getDescription('F;pL;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; elongated in position angle 0 degrees';
		result = getDescription('eF;E0');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; very little/long elongated/extended; very gradually brighter middle; bright bar; 2 faint smooth arms';
		result = getDescription('pF;S;vlE;vgbM;B bar;2 F smooth arms');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; irregular figure';
		result = getDescription('eF;pL;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; little/long elongated/extended; pretty suddenly much brighter middle';
		result = getDescription('pB;cL;lE;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; suddenly/south brighter middle; triple star south preceding';
		result = getDescription('cF;S;R;sbM;*** sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; irregular round; brighter middle';
		result = getDescription('pB;S;iR;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; round; star of 13th magnitude attached';
		result = getDescription('pF;vS;R;*13 att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very small; stars faint; much compressed';
		result = getDescription('Cl;vS;st F;mC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round; (very small; cluster?)';
		result = getDescription('F;R;(vS;CL?)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; pretty suddenly brighter middle';
		result = getDescription('pB;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; pretty much elongated/extended; pretty gradually brighter middle; star of 10th magnitude preceding 12 arcseconds';
		result = getDescription('pB;S;pmE;pgbM;*10 p 12sec');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; irregular round; very gradually brighter middle; small stars north following';
		result = getDescription('F;L;iR;vgbM;S* nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; integral-shaped body';
		result = getDescription('eF;S;integral-shaped body');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; large; little/long elongated/extended; pretty gradually much brighter middle';
		result = getDescription('cB;L;lE;pgmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably small; round; gradually brighter middle; double star preceding; very bright Nucleus or to a Nucleus';
		result = getDescription('pB;cS;R;gbM;**p;vBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; preceding little/long elongated/extended';
		result = getDescription('vF;plE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; round; very gradually; very suddenly/south brighter middle; very suddenly/south very bright Nucleus or to a Nucleus';
		result = getDescription('pB;L;R;vg;vsbM;vsvBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably large; elongated in position angle 135 degrees';
		result = getDescription('vF;cL;E135');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; irregular round; very little/long brighter middle';
		result = getDescription('eF;vS;iR;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; very gradually brighter middle';
		result = getDescription('vF;S;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round; brighter middle';
		result = getDescription('vF;S;iR;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; stellar';
		result = getDescription('F;S;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; pretty suddenly little/long brighter middle; star of 7th magnitude preceding 37 arcseconds';
		result = getDescription('pF;pS;R;pslbM;*7p37\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; elongated in position angle 0 degrees';
		result = getDescription('pB;pS;E0');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; little/long elongated/extended 0; very gradually much brighter middle';
		result = getDescription('B;L;lE0;vgmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round';
		result = getDescription('vF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended';
		result = getDescription('vF;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended; little/long brighter middle';
		result = getDescription('vF;pS;lE;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; resolvable';
		result = getDescription('vF;vS;resolvable');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; very difficult';
		result = getDescription('eF;pS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably small; round; very gradually brighter middle';
		result = getDescription('pF;cS;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; stellar';
		result = getDescription('eF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; considerably large; preceding middle elongated/extended 146; gradually brighter middle';
		result = getDescription('vB;cL;pME146;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; elongated/extended';
		result = getDescription('vF;pL;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; little/long elongated/extended; very difficult; stars following';
		result = getDescription('eF;pS;lE;v diffic;*f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; small; elongated/extended; much brighter middle round Nucleus or to a Nucleus; resolvable (mottled not resolved)';
		result = getDescription('cB;S;E;mbMRN;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; elongated in position angle 0 degrees';
		result = getDescription('pF;pS;E0');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; irregular round';
		result = getDescription('pF;pS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'ray; very much elongated/extended; parallel to 5907';
		result = getDescription('ray;vmE;parallel to 5907');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; very large; very much elongated/extended 155; very gradually bright middle Nucleus or to a Nucleus';
		result = getDescription('cB;vL;vmE155;vgBMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round';
		result = getDescription('pF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended 45; very gradually little/long brighter middle';
		result = getDescription('F;S;lE45;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; irregular figure';
		result = getDescription('pF;pS;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably large; little/long elongated/extended';
		result = getDescription('cF;cL;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively small; round; stellar';
		result = getDescription('eS;R;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; round; little/long brighter middle';
		result = getDescription('eeF;vS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round';
		result = getDescription('eeF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; much elongated/extended';
		result = getDescription('F;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; small; round; pretty suddenly brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cB;S;R;psbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; irregular elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('pB;cL;iE;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably small';
		result = getDescription('pF;cS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; much elongated/extended';
		result = getDescription('B;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; very difficult';
		result = getDescription('eeF;S;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; brighter middle; stars close';
		result = getDescription('pF;pS;R;bM;* close');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended';
		result = getDescription('vF;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; line with two stars';
		result = getDescription('eF;pS;R;line w/2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended; double stars near stars';
		result = getDescription('vF;pS;lE;D* nr *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; elongated/extended; stars near';
		result = getDescription('pF;vS;E;* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; much elongated/extended; 2 stars near';
		result = getDescription('vF;vS;mE;2st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; little/long elongated/extended';
		result = getDescription('pF;pS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; round';
		result = getDescription('pF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; brighter middle';
		result = getDescription('pF;pS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; bright stars near poor';
		result = getDescription('pF;pL;R;B* nr P');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; considerably elongated/extended; very difficult';
		result = getDescription('eeF;S;cE;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; very difficult';
		result = getDescription('eeF;S;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; irregular round';
		result = getDescription('cF;pL;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; irregular round; very gradually very little/long brighter middle';
		result = getDescription('pB;iR;vgvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; very difficult';
		result = getDescription('eeF;pS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; round; very difficult';
		result = getDescription('eeF;vS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; very difficult';
		result = getDescription('eF;eS;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular round';
		result = getDescription('vF;vS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long brighter middle';
		result = getDescription('vF;vS;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended';
		result = getDescription('vF;pS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; elongated/extended; 2 stars preceding';
		result = getDescription('pF;pL;E;2*p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; faint stars near';
		result = getDescription('vF;pS;R;F* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; 2 stars faint';
		result = getDescription('vF;vS;R;2*F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; stars faint';
		result = getDescription('eeF;pS;*F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; extremely/excessively small; round; stellar; 3 very faint stars near';
		result = getDescription('pF;eS;R;stell;3 vf * nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; south preceding of 2';
		result = getDescription('vF;pS;R;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; north following of 2';
		result = getDescription('eF;vS;R;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; much brighter middle';
		result = getDescription('F;S;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; little/long elongated/extended';
		result = getDescription('pF;pL;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; triangle with 2 stars from 12th to 14th magnitude';
		result = getDescription('F;S;tri w 2*12..14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated/extended';
		result = getDescription('eF;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large';
		result = getDescription('F;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round';
		result = getDescription('vF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty large; round; very difficult';
		result = getDescription('eeF;pL;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; extremely/excessively small; extremely/excessively faint stars near; very difficult';
		result = getDescription('eeF;eS;eF* nr;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; resolvable (mottled not resolved); between 2 stars; north following of 2';
		result = getDescription('vF;vS;r;bet 2*;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; irregular figure';
		result = getDescription('F;pS;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; several stars near south following';
		result = getDescription('eF;pS;R;sev * nr sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; bright stars and double stars preceding';
		result = getDescription('eF;vS;R;B*&D*p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; little/long elongated/extended; very difficult';
		result = getDescription('eeF;S;lE;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; south preceding of 2';
		result = getDescription('eF;vS;R;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; much elongated/extended; north following of 2';
		result = getDescription('eF;pL;mE;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; very difficult; north preceding of 2';
		result = getDescription('eeF;S;R;v diffic;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round';
		result = getDescription('eF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; very difficult';
		result = getDescription('eeF;pS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; stars close faint';
		result = getDescription('eF;pS;R;* close F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; extremely/excessively small; round';
		result = getDescription('eeF;eS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; elongated/extended; very difficult; faint stars near';
		result = getDescription('eF;E;v diffic;F st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; much elongated/extended; faint stars near';
		result = getDescription('eF;S;mE;F* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; between 2 stars; preceding of 2';
		result = getDescription('pB;pS;R;bet 2*;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; round; between 2 stars; following of 2';
		result = getDescription('vF;eS;R;bet 2*;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; much elongated/extended; near between 2 stars';
		result = getDescription('eF;pL;mE;nr bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended';
		result = getDescription('vF;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended; star of 13th magnitude near Nucleus or to a Nucleus';
		result = getDescription('vF;vS;lE;*13 nr N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; little/long elongated/extended';
		result = getDescription('F;pL;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; faint stars near; south preceding of 2';
		result = getDescription('eeF;S;R;F* nr;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; little/long brighter middle; north following of 2';
		result = getDescription('vF;vS;R;lbM;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; round; very gradually much brighter middle';
		result = getDescription('cF;pL;R;vgmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; very gradually little/long brighter middle';
		result = getDescription('F;S;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; round; 2 north diameter of 3';
		result = getDescription('eeF;vS;R;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('eeF;S;R;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; brighter middle Nucleus or to a Nucleus = star of 12th magnitude';
		result = getDescription('pB;S;R;bMN=*12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; much elongated/extended; near between 2 stars';
		result = getDescription('vF;pS;mE;near bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; double stars near north preceding';
		result = getDescription('eF;S;R;D* nr np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - very faint; very large; pretty much elongated/extended at 60X; low surface brightness';
		result = getDescription('13\'\'-vF; vL; pmE at 60X; low surf brightness');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty large; irregular round; extremely/excessively faint stars involved/involving';
		result = getDescription('eeF;pL;iR;eF st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; bright stars near Nucleus or to a Nucleus';
		result = getDescription('vF;vS;R;B* nr N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty large; very difficult';
		result = getDescription('eeF;pL;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; extremely/excessively small; round; very difficult';
		result = getDescription('eeF;eS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; little/long brighter middle';
		result = getDescription('eF;eS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; little/long elongated/extended; double stars north';
		result = getDescription('vF;pL;lE;D*n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; elongated/extended';
		result = getDescription('vF;pL;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round';
		result = getDescription('pF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; bright stars suddenly/south';
		result = getDescription('eF;S;R;B*s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; much elongated/extended; very difficult';
		result = getDescription('eeF;mE;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; nearly between 2 stars';
		result = getDescription('eF;vS;R;nearly bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; between 2 stars';
		result = getDescription('vF;pS;R;bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably large; round; very gradually brighter middle; partially resolved some stars seen';
		result = getDescription('cL;R;vgbM;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; suddenly/south of 2';
		result = getDescription('eF;pS;R;s of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; north of 2';
		result = getDescription('eF;pS;R;n of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; very difficult';
		result = getDescription('eeF;pS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; near between 2 stars; south preceding of 2';
		result = getDescription('eeF;S;R;nr bet 2*;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; gradually brighter middle';
		result = getDescription('vS;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; extremely/excessively small; round; very difficult';
		result = getDescription('eeF;eS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round';
		result = getDescription('vF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; extremely/excessively small; round; very difficult';
		result = getDescription('eeF;eS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; near between 2 stars';
		result = getDescription('eF;pS;R;nr bet 2st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; stellar; star of 8th magnitude suddenly/south';
		result = getDescription('vF;vS;R;stellar;*8s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; round; stars close following';
		result = getDescription('eeF;vS;R;* close f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round';
		result = getDescription('eF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; 5 stars near';
		result = getDescription('eF;pS;R;5st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; round; very faint double stars near following';
		result = getDescription('eeF;vS;R;vF D* nr f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; little/long elongated/extended; triple star near';
		result = getDescription('eeF;pS;lE;*** nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; extremely/excessively small; round; very difficult';
		result = getDescription('eeF;eS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; brighter middle';
		result = getDescription('F;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; very difficult; 2 of 6';
		result = getDescription('eeF;S;R;v diffic;2of6');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round';
		result = getDescription('vF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; extremely/excessively small; round; 5th of 6';
		result = getDescription('eeF;eS;R;5th of 6');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; resolvable (mottled not resolved); 3 resolvable (mottled not resolved) diameter of 6';
		result = getDescription('eeF;vS;r;3rd of 6');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; extremely/excessively small; round; stars near; 4th of 6';
		result = getDescription('eeF;eS;R;* nr;4th of6');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; little/long brighter middle';
		result = getDescription('vF;pS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; extremely/excessively small; round; stars near; very difficult';
		result = getDescription('eeF;eS;R;* nr;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; extremely/excessively small; round; (poor little/long north )';
		result = getDescription('F;eS;R;(Pln)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; little/long brighter middle';
		result = getDescription('vF;pS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; resolvable (mottled not resolved)';
		result = getDescription('eF;eS;R;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; suddenly/south of 4 stars';
		result = getDescription('eeF;pS;R;s of 4st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; suddenly/south of 2';
		result = getDescription('eeF;S;R;s of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; north of 3; 3 stars near';
		result = getDescription('eF;pS;R;n of3;3st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; between 2 stars';
		result = getDescription('eF;vS;R;bet 2st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; 3 stars north';
		result = getDescription('eF;pS;R;3st n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; very much elongated/extended; spindle';
		result = getDescription('pB;S;vmE;spindle');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; elongated/extended';
		result = getDescription('pF;pS;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; much elongated/extended; star of 9th magnitude following 4 arcminutes';
		result = getDescription('pF;L;mE;*9f4\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; 3 stars near';
		result = getDescription('vF;S;3st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty large; little/long elongated/extended; between 2 stars';
		result = getDescription('eeF;pL;lE;bet 2st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; extremely/excessively small; very faint stars attached; north preceding of 2';
		result = getDescription('pF;eS;vf * att;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; extremely/excessively small; round; (poor little/long north ? ); south following of 2';
		result = getDescription('F;eS;R;(Pln?);sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; round';
		result = getDescription('eeF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; little/long elongated/extended; stars near Nucleus or to a Nucleus; north preceding of 2';
		result = getDescription('eF;pS;lE;* nr N;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; faint stars very near; south following of 2';
		result = getDescription('pF;pS;R;F*v nr;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; little/long elongated/extended; between 2 extremely/excessively faint stars';
		result = getDescription('eF;vS;lE;bet 2eF st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; little/long elongated/extended; very difficult';
		result = getDescription('eeF;pS;lE;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; brighter middle';
		result = getDescription('F;pL;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; 1 stars of 3';
		result = getDescription('vF;R;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; 2 north diameter of 3';
		result = getDescription('vF;vS;2nd of3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('F;pL;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round';
		result = getDescription('eeF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round';
		result = getDescription('vF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; 2 bright stars near';
		result = getDescription('vF;vS;R;2B st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty small; suddenly/south brighter middle very supernova';
		result = getDescription('vB;pS;sbMvSN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round';
		result = getDescription('eeF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; much elongated/extended; 2 stars south preceding';
		result = getDescription('eF;S;mE;2st sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; irregular round';
		result = getDescription('F;pS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; brighter middle; between 2 stars';
		result = getDescription('F;pS;R;bM;bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; star of 16th magnitude near';
		result = getDescription('eF;vS;R;*16 nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round';
		result = getDescription('eF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; bright stars near';
		result = getDescription('vF;vS;R;B* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round';
		result = getDescription('eF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; very difficult';
		result = getDescription('eF;pS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; round; very faint stars near';
		result = getDescription('vF;eS;R;vF * nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended; faint stars near';
		result = getDescription('vF;pS;lE;F* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; little/long brighter middle; suddenly/south of 2';
		result = getDescription('pF;pS;R;lbM;s of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; little/long brighter middle; north of 2';
		result = getDescription('pF;pS;R;lbM;n of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty large; round; very difficult';
		result = getDescription('eeF;pL;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; elongated in position angle 50 degrees; 2 stars preceding';
		result = getDescription('pB;pL;E50;2st p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; 3 stars near';
		result = getDescription('eeF;pS;R;3* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 12th magnitude; 13 in north preceding bright; pretty large nebula';
		result = getDescription('*12;13 in np B;pL neby');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; little/long elongated/extended; very difficult';
		result = getDescription('eeF;pS;lE;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; pretty much elongated/extended; double star involved/involving';
		result = getDescription('S;pmE;** inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; little/long elongated/extended; very faint double stars near';
		result = getDescription('vF;pL;lE;vF D* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; much elongated/extended';
		result = getDescription('pB;pS;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round';
		result = getDescription('pF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; little/long elongated/extended; little/long brighter middle; very difficult';
		result = getDescription('eeF;pS;lE;lbM;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; close double';
		result = getDescription('eF;close double');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; much elongated/extended; very difficult';
		result = getDescription('eeF;S;mE;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; between stars very near and very faint double stars';
		result = getDescription('vF;vS;bet *v nr & vF D*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; 2 stars 12 magnitude north following and north preceding';
		result = getDescription('eF;vS;R;2 stars 12 mag nf and np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; star of 8th magnitude faint 7 arcminutes distance or distant';
		result = getDescription('vF;pS;*8F7\'dist');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; round; between 2 stars';
		result = getDescription('pF;L;R;bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round; between 2 stars';
		result = getDescription('eF;pL;R;bet 2st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; pretty bright stars small near';
		result = getDescription('vF;pL;R;pB*S nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty large; very difficult';
		result = getDescription('eeF;pL;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; much elongated/extended; faint stars close following';
		result = getDescription('pB;pS;mE;F* close f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; very difficult; several stars Nucleus or to a Nucleus';
		result = getDescription('eeF;pS;v diffic;sev*N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; little/long brighter middle';
		result = getDescription('vF;pS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very difficult; pretty bright stars south following';
		result = getDescription('eeF;v diffic;pB st sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; round; faint stars Nucleus or to a Nucleus';
		result = getDescription('pB;vS;R;F*N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; stellar';
		result = getDescription('vF;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; much elongated/extended; 3 faint stars involved/involving';
		result = getDescription('pF;mE;3F* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; much elongated/extended';
		result = getDescription('eF;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; considerably elongated/extended; faint stars near';
		result = getDescription('eF;vS;cE;F* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; very faint double stars close south preceding';
		result = getDescription('vF;S;R;vf D* close sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; 2 stars north following';
		result = getDescription('eeF;S;R;2st nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; 4 stars south following; extremely/excessively difficult';
		result = getDescription('eeF;pS;4* sf;e diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty large; round; very difficult';
		result = getDescription('eeF;pL;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; much elongated/extended north suddenly/south';
		result = getDescription('vF;pS;mE ns');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; little/long elongated/extended';
		result = getDescription('eeF;pS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; very difficult; faint stars near';
		result = getDescription('eF;vS;v diffic;F* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; pretty bright stars near suddenly/south; preceding of 2';
		result = getDescription('eF;pS;R;pB* nr s;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; following of 2';
		result = getDescription('eF;S;R;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; little/long compressed; stars 7th magnitude and fainter th magnitude and fainter';
		result = getDescription('Cl;vL;lC;st7...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round';
		result = getDescription('pB;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; large; little/long brighter middle; pretty bright stars near';
		result = getDescription('eF;L;lbM;pB* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; gradually little/long brighter middle';
		result = getDescription('vF;pS;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very large; much elongated/extended north suddenly/south';
		result = getDescription('eF;vL;mE ns');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round; little/long brighter middle';
		result = getDescription('eF;pL;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very large; round; very gradually very little/long brighter middle';
		result = getDescription('F;vL;R;vgvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; gradually brighter middle';
		result = getDescription('pB;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle';
		result = getDescription('vF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; little/long elongated/extended; star of 12th magnitude attached';
		result = getDescription('pB;pL;lE;*12 att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; 2 stars 11 near';
		result = getDescription('pF;S;R;2*11 nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; gradually little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pF;pS;R;glbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very very faint; small; round; gradually very little/long brighter middle';
		result = getDescription('vvF;S;R;gvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; little/long elongated/extended; gradually brighter middle; star of 8th magnitude south following 3 arcminutes';
		result = getDescription('vF;pL;lE;gbM;*8 sf 3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; between 2 stars in parallel';
		result = getDescription('F;S;R;bet 2* in parallel');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; brighter middle Nucleus or to a Nucleus; 1 stars of 3';
		result = getDescription('F;vS;R;bMN;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round';
		result = getDescription('eF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; little/long elongated/extended; brighter middle Nucleus or to a Nucleus; 2 north diameter of 3';
		result = getDescription('F;pS;lE;bMN;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;vS;R;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; suddenly/south brighter middle Nucleus or to a Nucleus; brighter of 2';
		result = getDescription('vF;vS;R;sbMN;b of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; little/long elongated/extended; brighter middle Nucleus or to a Nucleus; 3 resolvable (mottled not resolved) diameter 3';
		result = getDescription('F;vS;lE;bMN;3rd 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; little/long elongated/extended';
		result = getDescription('eeF;pS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; much elongated/extended; south preceding of 2';
		result = getDescription('eeF;pS;mE;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; elongated/extended; gradually pretty much brighter middle';
		result = getDescription('vB;pL;E;gpmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; north following of 2';
		result = getDescription('eeF;S;R;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; elongated/extended; star of 15th magnitude involved/involving; star of 11th magnitude following';
		result = getDescription('eeF;S;E;*15 inv;*11f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; extremely/excessively small; round; (faint stars )';
		result = getDescription('F;eS;R;(F*)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round';
		result = getDescription('eF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; pretty much elongated/extended; gradually little/long brighter middle';
		result = getDescription('pF;pL;pmE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle';
		result = getDescription('vF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; elongated in position angle 348 degrees';
		result = getDescription('eF;pL;E348');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; elongated/extended preceding following';
		result = getDescription('eF;vS;E pf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; much elongated/extended';
		result = getDescription('F;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended; gradually brighter middle';
		result = getDescription('vF;S;lE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; 1132 following';
		result = getDescription('eeF;S;R;1132 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended 45; 2 stars north preceding; north following';
		result = getDescription('vF;vS;lE45;2* np;nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;S;R;gbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; gradually brighter middle; star of 8th magnitude following';
		result = getDescription('eF;pL;gbM;*8f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; stellar';
		result = getDescription('pB;S;R;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; pretty much elongated/extended; 2 stars stars following';
		result = getDescription('F;pL;pmE;2 * st f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; elongated in position angle 0 degrees; star of 9.5 magnitude following 6 arcminutes';
		result = getDescription('eF;vS;E0;*9.5f6\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;S;R;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; very difficult; north preceding of 2';
		result = getDescription('eF;pS;R;v diffic;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; (nebulous??); near 1150';
		result = getDescription('eF;S;R;(neb?);nr 1150');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;S;R;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; very difficult; south following of 2; stars suddenly/south';
		result = getDescription('eeF;S;R;v diffic;sf of 2;*s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long brighter middle; south preceding of 2';
		result = getDescription('eF;S;lbM;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; elongated in position angle 0 degrees; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;pS;E0;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long brighter middle; north following of 2';
		result = getDescription('eF;S;lbM;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round; gradually little/long brighter middle; stellar';
		result = getDescription('F;R;glbM;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; much elongated/extended 75';
		result = getDescription('vF;pS;mE75');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; pretty suddenly brighter middle';
		result = getDescription('pF;pL;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;vS;R;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;vS;R;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; gradually brighter middle; star of 12th magnitude following 1 arcminutes';
		result = getDescription('eF;pS;gbM;*12f1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably large; pretty much elongated/extended; gradually brighter middle star of 16th magnitude; resolvable (mottled not resolved)';
		result = getDescription('pF;cL;pmE;gbM*16;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; elongated in position angle 15 degrees';
		result = getDescription('eF;pS;E15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; preceding 1209';
		result = getDescription('eF;vS;R;p1209');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; preceding 1209';
		result = getDescription('eF;vS;R;p1209');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; elongated in position angle 120 degrees; star of 10th magnitude south preceding 2.5 arcminutes';
		result = getDescription('eF;pS;E120;*10 sp 2.5\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; preceding 1209';
		result = getDescription('eF;vS;R;p1209');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; star of 12th magnitude south following; 1196 south following';
		result = getDescription('eF;eS;*12 sf;1196 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; elongated in position angle 25 degrees; star of 9.5 magnitude 3 arcminutes south preceding';
		result = getDescription('eF;pS;E25;*9.5 3\' sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; preceding 1209';
		result = getDescription('eF;vS;R;p1209');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; south preceding of 2';
		result = getDescription('vF;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty small; irregular round; suddenly/south much brighter middle';
		result = getDescription('cB;pS;iR;smbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably large; irregular round; brighter middle; north following of 2';
		result = getDescription('pF;cL;iR;bM;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; elongated in position angle 45 degrees; resolvable (mottled not resolved); several stars involved/involving';
		result = getDescription('eF;E45;r;sev * inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; 2 stars 4 arcminutes north following';
		result = getDescription('eF;S;2*4\' nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle Nucleus or to a Nucleus; (nebulous??)';
		result = getDescription('vF;S;R;bMN;(neb?)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; considerably elongated/extended; pretty suddenly brighter middle';
		result = getDescription('B;S;cE;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; very little/long elongated/extended 0';
		result = getDescription('eF;vS;vlE0');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; little/long elongated/extended 80; little/long brighter middle';
		result = getDescription('pB;S;lE80;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; elongated/extended(nebula)';
		result = getDescription('eF;pL;E(neb)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; irregular round; 1208 preceding';
		result = getDescription('F;pS;iR;1208p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; stellar; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('eF;S;stellar;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; gradually brighter middle; preceding of 2';
		result = getDescription('eF;eS;R;gbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; gradually brighter middle; following of 2';
		result = getDescription('eF;eS;R;gbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; elongated in position angle 170 degrees; stars small';
		result = getDescription('eF;vS;E170;*S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; gradually brighter middle Nucleus or to a Nucleus; preceding of 2';
		result = getDescription('eF;S;R;gbMN;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 12th magnitude in extremely/excessively faint nebula';
		result = getDescription('*12 in eF neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; following of 2';
		result = getDescription('eF;vS;R;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint star in pretty faint; small; round nebula';
		result = getDescription('vF*in pF;S;R neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; irregular round; stars or stars involved/involving';
		result = getDescription('eF;S;iR;* or st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; round; gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;cL;R;gbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated in position angle 170 degrees; (double stars )';
		result = getDescription('vF;S;E170;(D*)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; 1247 north following';
		result = getDescription('vF;pS;R;1247 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; stellar';
		result = getDescription('eF;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; very gradually little/long brighter middle; star of 9th magnitude north';
		result = getDescription('F;pL;R;vglbM;*9n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round';
		result = getDescription('F;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; elongated in position angle 80 degrees';
		result = getDescription('F;pL;E80');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; little/long elongated/extended; brighter middle; star of 9th magnitude north 5 arcminutes';
		result = getDescription('cF;S;lE;bM;*9 n 5\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended; almost stellar; star of 8th magnitude north preceding';
		result = getDescription('F;S;E;alm stell;*8 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; very little/long elongated/extended; 12 arcminutes north of 1256';
		result = getDescription('eF;pS;vlE;12\'n of 1256');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 12th magnitude with nebula following; 90 arcseconds long';
		result = getDescription('*12 w neb f;90\'\'long');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; irregular round; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;pS;iR;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended; suddenly/south brighter middle';
		result = getDescription('vF;S;lE;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; star of 13th magnitude south preceding 2 arcminutes';
		result = getDescription('vF;pS;*13 sp 2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; round; gradually much brighter middle';
		result = getDescription('vB;R;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; round; much brighter middle; easily resolvable';
		result = getDescription('vB;pL;R;mbM;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; 2 stars suddenly/south';
		result = getDescription('eF;vS;2 * s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; 4 bright stars suddenly/south';
		result = getDescription('eF;eS;R;4B * s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small';
		result = getDescription('pF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular round';
		result = getDescription('vF;vS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; 4 stars following';
		result = getDescription('vF;S;R;4*f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small';
		result = getDescription('F;pS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small';
		result = getDescription('eF;eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; very large; very much elongated/extended; pretty suddenly very much brighter middle';
		result = getDescription('cB;vL;vmE;psvmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; gradually brighter middle Nucleus or to a Nucleus; star of 10th magnitude following 3 arcminutes';
		result = getDescription('eF;vS;gbMN;*10f3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; star of 13th magnitude south preceding';
		result = getDescription('F;pS;R;*13 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long elongated/extended; gradually brighter middle; easily resolvable';
		result = getDescription('vF;S;vlE;gbM;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; much elongated/extended 135';
		result = getDescription('vF;mE 135');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; several stars involved/involving';
		result = getDescription('vF;sev * inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; star of 9.5 magnitude north following';
		result = getDescription('eF;vS;R;*9.5 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; star of 16th magnitude attached';
		result = getDescription('pB;pS;R;*16 att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably large; irregular round; gradually brighter middle; star of 8th magnitude south preceding 4 arcminutes';
		result = getDescription('cB;cL;iR;gbM;*8 sp 4\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; irregular figure; among 3 or 4 stars';
		result = getDescription('eF;S;iF;am 3 or 4 *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 10th magnitude with extremely/excessively faint; considerably large; elongated/extended nebula suddenly/south';
		result = getDescription('*10 w eF;cL;E neb s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; gradually brighter middle';
		result = getDescription('pB;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle; preceding of 2';
		result = getDescription('F;S;R;bM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; much elongated/extended 239; cometic; star of 9.5 magnitude attached';
		result = getDescription('F;mE239;com;*9.5 att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle';
		result = getDescription('F;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended preceding following; double or binuclear';
		result = getDescription('F;S;E pf;D or biN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle';
		result = getDescription('vF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; star of 13th magnitude south preceding 25 arcseconds';
		result = getDescription('eF;eS;*13 sp 25\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; pretty much elongated/extended';
		result = getDescription('vF;pS;pmE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; round; brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;eS;R;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; gradually little/long brighter middle';
		result = getDescription('F;pS;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; small; elongated in position angle 114 degrees; suddenly/south much brighter middle Nucleus or to a Nucleus';
		result = getDescription('vB;S;E114;smbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very large; much elongated/extended north suddenly/south';
		result = getDescription('eF;vL;mE ns');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round; little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;S;iR;lbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; pretty suddenly little/long brighter middle';
		result = getDescription('vF;S;R;pslbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; elongated in position angle 130 degrees; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;pS;E130;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; brighter middle; star of 13th magnitude preceding';
		result = getDescription('eF;eS;R;bM;*13p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty suddenly little/long brighter middle; difficult; star of 8th magnitude south following';
		result = getDescription('eF;pslbM;diff;*8 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; irregular elongated/extended; much brighter middle';
		result = getDescription('pB;cL;iE;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended; gradually little/long brighter middle';
		result = getDescription('vF;S;lE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; little/long brighter middle; star of 9th magnitude north following';
		result = getDescription('pF;pL;R;lbM;*9 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small';
		result = getDescription('pF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; between 2 stars';
		result = getDescription('vF;S;bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; round; very gradually little/long brighter middle';
		result = getDescription('F;L;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; gradually brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;eS;gbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; star of 7th magnitude south preceding 3.5 arcminutes; south preceding of 2';
		result = getDescription('vF;S;R;*7 sp 3.5\';sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long elongated/extended; north following of 2';
		result = getDescription('vF;S;vlE;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; little/long brighter middle';
		result = getDescription('vF;vS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; between 2 stars 14';
		result = getDescription('vF;S;R;bet 2*14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle';
		result = getDescription('F;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint';
		result = getDescription('F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; gradually little/long brighter middle';
		result = getDescription('vF;vS;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; irregular round; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('eF;pL;iR;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint';
		result = getDescription('F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round';
		result = getDescription('vF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; pretty suddenly much brighter middle';
		result = getDescription('pF;S;R;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; elongated in position angle 260 degrees';
		result = getDescription('vF;pS;E260');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint';
		result = getDescription('F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; little/long brighter middle';
		result = getDescription('vF;vS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; elongated/extended; pretty suddenly much brighter middle';
		result = getDescription('B;pS;E;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually little/long brighter middle';
		result = getDescription('F;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; gradually brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;S;R;gbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; elongated in position angle 170 degrees; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;vS;E170;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; nebula stars';
		result = getDescription('vF;eS;neb *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty small; round; pretty suddenly much brighter middle';
		result = getDescription('cB;pS;R;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended';
		result = getDescription('vF;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; round; suddenly/south very much brighter middle Nucleus or to a Nucleus';
		result = getDescription('vB;L;R;svmbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; little/long brighter middle';
		result = getDescription('eF;vS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; much elongated/extended 150; gradually little/long brighter middle; faint stars involved/involving';
		result = getDescription('eF;pL;mE150;glbM;F st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; pretty suddenly brighter middle';
		result = getDescription('pF;pS;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; little/long elongated/extended; pretty gradually little/long brighter middle; stars south following';
		result = getDescription('pB;S;lE;pglbM;* sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; much elongated/extended 0; brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;pS;mE0;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; star of 8.6 magnitude north 2 arcminutes';
		result = getDescription('eF;S;R;*8.6 n2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; elongated in position angle 80 degrees';
		result = getDescription('eF;pS;E80');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; little/long elongated/extended; little/long brighter middle; stars south following';
		result = getDescription('pF;pL;lE;lbM;* sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended; star of 11th magnitude south following 1 arcminutes';
		result = getDescription('vF;S;E;*11 sf 1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably large; much elongated/extended 0; resolvable (mottled not resolved)';
		result = getDescription('F;cL;mE 0;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; star of 13th magnitude preceding';
		result = getDescription('F;vS;*13p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; very difficult';
		result = getDescription('eeF;S;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; little/long elongated/extended; brighter middle';
		result = getDescription('pF;S;lE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; star of 10th magnitude; 11 north preceding';
		result = getDescription('vF;*10;11 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated in position angle 20 degrees; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;S;E20;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty much elongated/extended; pretty gradually brighter middle';
		result = getDescription('vB;pmE;pgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very large; round; gradually little/long brighter middle';
		result = getDescription('F;vL;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; elongated in position angle 0 degrees; gradually brighter middle Nucleus or to a Nucleus; following of 2';
		result = getDescription('eF;vS;E0;gbMN;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; gradually pretty much brighter middle';
		result = getDescription('F;pS;gpmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; star of 9th magnitude north preceding 2 arcminutes';
		result = getDescription('vF;S;R;*9 np 2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; suddenly/south much brighter middle star of 13th magnitude';
		result = getDescription('pB;pS;R;smbM*13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; brighter middle; (= 1440)';
		result = getDescription('pB;vS;bM;(=1440)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; nebulous??';
		result = getDescription('vF; vS; R; neb?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; much elongated/extended; Nucleus or to a Nucleus; star of 10th magnitude following 1 arcminutes';
		result = getDescription('eF;mE;N;*10 f1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round; little/long brighter middle; hazy stars';
		result = getDescription('F;R;lbM;hazy *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended 30; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;S;lE30;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; (double; distance or distant ars 0th magnitude and fainter. 4 arcminutes)';
		result = getDescription('eF;pS;R;(D;dist 0.4\')');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular elongated/extended; star of 12th magnitude following';
		result = getDescription('vF;S;iE;*12 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; star of 7.8 magnitude following 3 arcminutes';
		result = getDescription('vF;S;R;*7.8 f 3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; north following 1441';
		result = getDescription('vF;nf 1441');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; round; (stars); star of 9.5 magnitude south preceding 3 arcminutes';
		result = getDescription('vF;eS;R;(*);*9.5 sp 3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; following 1441';
		result = getDescription('eF;f 1441');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; very little/long elongated/extended';
		result = getDescription('vF;vS;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended';
		result = getDescription('vF;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; star of 8.5 magnitude following 25; north 3 arcminutes';
		result = getDescription('eF;S;R;*8.5f 25;n 3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; stars attached';
		result = getDescription('F;S;R;* att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; star of 17th magnitude much';
		result = getDescription('pB;S;R;*17 m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; little/long elongated/extended; much brighter middle Nucleus or to a Nucleus';
		result = getDescription('pB;S;lE;mbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; 2 stars near';
		result = getDescription('pF;S;R;2* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; elongated in position angle 45 degrees';
		result = getDescription('vF;vS;E45');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; star of 9th magnitude suddenly/south 4 arcminutes';
		result = getDescription('eF;vS;R;*9 s 4\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle';
		result = getDescription('vF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated in position angle 0 degrees';
		result = getDescription('eF;S;E0');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; stellar north north; 1 stars of 3';
		result = getDescription('vF;eS;stelln n;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; star of 14th magnitude north preceding 4 arcminutes';
		result = getDescription('eF;eS;R;*14 np 4\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; 2 north diameter of 3';
		result = getDescription('eF;vS;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('eF;vS;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; irregular round; faint of 2 stars; star of 10th magnitude following 30';
		result = getDescription('eF;S;iR;F of 2 *;*10 f 30');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated/extended; preceding of 2';
		result = getDescription('eF;S;E;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; elongated/extended; very gradually very little/long brighter middle';
		result = getDescription('vF;L;E;vgvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; 2 bright stars faint; preceding of 2';
		result = getDescription('eF;S;R;2B*F;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; very little/long elongated/extended; 2 stars 10 near; following of 2';
		result = getDescription('F;S;vlE;2*10 nr;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; gradually brighter middle; 2 stars triangle';
		result = getDescription('pB;pL;R;gbM;2* triangle');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; elongated in position angle 190 degrees';
		result = getDescription('eF;pS;E190');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; compressed';
		result = getDescription('Cl;S;C');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; gradually brighter middle';
		result = getDescription('eF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; gradually brighter middle';
		result = getDescription('eF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended; faint stars near preceding';
		result = getDescription('vF;vS;lE;F* nr p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; much elongated/extended; very little/long brighter middle; easily resolvable';
		result = getDescription('vF;pL;mE;vlbM;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; pretty much elongated/extended; gradually brighter middle; star of 8th magnitude south preceding';
		result = getDescription('B;L;pmE;gbM;*8 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; elongated/extended; pretty suddenly much brighter middle; easily resolvable';
		result = getDescription('eeF;S;E;psmbM;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended; very small stars involved/involving';
		result = getDescription('vF;S;lE;vS* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; gradually brighter middle; double nebula with 1525';
		result = getDescription('eF;pS;R;gbM;D neb with 1525');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; gradually brighter middle; at 340; 0 arcminutes 5 from 1524';
		result = getDescription('eF;pS;R;gbM;at 340;0\'5 from 1524');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; round; brighter middle';
		result = getDescription('pB;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; brighter middle; north preceding of 2';
		result = getDescription('pB;pL;R;bM;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; very large; very much elongated/extended 32; pretty suddenly much brighter middle';
		result = getDescription('B;vL;vmE32;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty small; little/long elongated/extended; pretty suddenly very much brighter middle';
		result = getDescription('vB;pS;lE;psvmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; small; round; pretty small; very suddenly/south brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vB;S;R;pS;vsbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; gradually brighter middle';
		result = getDescription('eF;vS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; elongated/extended; gradually very little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;vS;E;gvlbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; irregular round; (cluster or nebula with stars )';
		result = getDescription('pF;pS;iR;(Cl or neb w*)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty small; little/long elongated/extended; very gradually brighter middle; star of 11th magnitude south preceding';
		result = getDescription('cF;pS;lE;vgbM;*11 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; round; gradually little/long brighter middle';
		result = getDescription('vF;eS;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; little/long brighter middle; poor with NGC 1564';
		result = getDescription('eF;vS;R;lbM;P w NGC 1564');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended 170; gradually little/long brighter middle; star of 8th magnitude preceding 6 arcseconds';
		result = getDescription('vF;vS;lE170;glbM;*8p 6\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; little/long brighter middle; poor with NGC 1563';
		result = getDescription('eF;vS;R;lbM;P w NGC 1563');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; little/long elongated/extended';
		result = getDescription('eF;pS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; nearly between 2 stars';
		result = getDescription('eF;vS;R;nearly bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; star of 9.5 magnitude small 2 arcminutes';
		result = getDescription('vF;pS;R;*9.5S2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; brighter middle; between 2 stars';
		result = getDescription('eF;bM;bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; little/long brighter middle; stars near suddenly/south';
		result = getDescription('vF;pL;R;lbM;* nr s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; extremely/excessively small; round; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('F;eS;R;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; resolvable (mottled not resolved)';
		result = getDescription('vF;vS;R;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('F;vS;R;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; gradually brighter middle';
		result = getDescription('pF;pS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; irregular figure; very little/long brighter middle; between double star and star of 14th magnitude';
		result = getDescription('vF;iF;vlbM;bet **&*14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small';
		result = getDescription('vF;pS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; gradually brighter middle';
		result = getDescription('eF;vS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; very little/long brighter middle';
		result = getDescription('vF;vS;R;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; gradually much brighter middle';
		result = getDescription('pB;pL;R;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; between stars and double stars';
		result = getDescription('eF;S;R;bet *&D*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; little/long brighter middle';
		result = getDescription('F;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;vS;R;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; star of 17th magnitude 45 arcseconds north';
		result = getDescription('vF;eS;*17 45\'\'n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated in position angle 90 degrees';
		result = getDescription('eF;S;E90');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; gradually much brighter middle';
		result = getDescription('vF;vS;R;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; much brighter middle';
		result = getDescription('F;vS;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; little/long brighter middle';
		result = getDescription('pF;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; gradually brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;vS;R;gbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular figure; little/long brighter middle; 2 stars south following';
		result = getDescription('F;S;iF;lbM;2* sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; nonexistent?';
		result = getDescription('eeF;S;R;nonexistent?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; little/long brighter middle';
		result = getDescription('eF;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; star of 8th magnitude north preceding';
		result = getDescription('eF;vS;R;*8 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; much elongated/extended 140; bright double star north following';
		result = getDescription('vF;pL;mE140;B** nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; star of 20th magnitude preceding 5 stars; 1618 preceding';
		result = getDescription('vF;S;*20p5*;1618p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; elongated in position angle 141 degrees; suddenly/south brighter middle; faint stars attached north preceding';
		result = getDescription('vF;E141;sbM;F* att np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round';
		result = getDescription('eF;eS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round; 2 stars south following; suddenly/south of 2';
		result = getDescription('eF;pL;R;2* sf;s of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; much elongated/extended north suddenly/south; north of 2';
		result = getDescription('vF;pS;mE ns;n of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle; star of 11th magnitude north following 12 small';
		result = getDescription('F;S;R;bM;*11 nf 12S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; very gradually brighter middle; resolvable (mottled not resolved); stars north following 1 arcminutes';
		result = getDescription('vF;pS;R;vgbM;r;* nf 1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; between 2 stars';
		result = getDescription('eF;vS;R;bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; large; round; very gradually brighter middle';
		result = getDescription('cB;L;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; little/long elongated/extended';
		result = getDescription('F;pL;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; elongated in position angle 40 degrees; gradually brighter middle';
		result = getDescription('vF;pS;E40;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; irregular round; brighter middle';
		result = getDescription('eF;vS;iR;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; 1643 north preceding';
		result = getDescription('vF;pS;R;1643 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; irregular round; brighter middle; star of 7th magnitude north preceding';
		result = getDescription('F;vS;iR;bM;*7 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; very difficult; 1646 south preceding';
		result = getDescription('eeF;pS;v diffic;1646 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; elongated in position angle 0 degrees; brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;pS;E0;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; round; little/long brighter middle';
		result = getDescription('F;cS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; little/long brighter middle; (resolvable (mottled not resolved)); preceding of 2';
		result = getDescription('F;S;R;lbM;(r);p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'large; stellar Nucleus or to a Nucleus in faint nebula elongated/extended north preceding south following';
		result = getDescription('L;stell N in F neb E npsf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'fainter; larger than 1654';
		result = getDescription('fainter;larger than 1654');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; irregular elongated/extended 90; brighter middle';
		result = getDescription('pF;pS;iE90;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round; little/long brighter middle';
		result = getDescription('eF;pL;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round';
		result = getDescription('vF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; (resolvable (mottled not resolved))';
		result = getDescription('pF;pS;R;(r)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; little/long elongated/extended';
		result = getDescription('pB;pS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; little/long elongated/extended';
		result = getDescription('pF;pL;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; very little/long brighter middle';
		result = getDescription('vF;S;R;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; much elongated/extended 30';
		result = getDescription('eF;vS;mE30');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; suddenly/south brighter middle';
		result = getDescription('vF;vS;R;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; small; much brighter middle stars';
		result = getDescription('cB;S;mbM*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; between 2 stars; 1700';
		result = getDescription('eeF;pS;R;bet 2*;1700');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; little/long brighter middle; 1726 near';
		result = getDescription('pF;pL;lbM;1726 nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; between 2 stars 9; 10 north and suddenly/south; 3 resolvable (mottled not resolved) diameter stars following';
		result = getDescription('F;bet 2*9;10n&s;3rd*f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round; star of 13th magnitude; suddenly/south';
		result = getDescription('F;R;*13;s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; pretty much elongated/extended; 2 or 3 stars 11 north following';
		result = getDescription('F;pL;pmE;2 or 3 * 11 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very large diffused nebula in zigzags??';
		result = getDescription('vL dif neb in zigzags??');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively large; strongly suspected';
		result = getDescription('eL;strongly susp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; gradually pretty much brighter middle';
		result = getDescription('pB;S;R;gpmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; very faint stars north preceding';
		result = getDescription('eeF;S;R;vf * np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; very little/long elongated/extended';
		result = getDescription('vF;vS;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; gradually brighter middle; easily resolvable; 2 stars near';
		result = getDescription('vF;vS;R;gbM;er;2* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; gradually brighter middle';
		result = getDescription('vF;pL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; gradually brighter middle; suddenly/south stars small south preceding';
		result = getDescription('vF;pL;R;gbM;s*S sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle';
		result = getDescription('F;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round';
		result = getDescription('eeF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; elongated/extended; brighter middle';
		result = getDescription('pB;S;E;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually little/long brighter middle';
		result = getDescription('pF;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; very suddenly/south very much brighter middle star of 13th magnitude';
		result = getDescription('F;S;R;vsvmbM*13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very faint double stars involved/involving';
		result = getDescription('vF;vf D* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty small; little/long elongated/extended 0; gradually brighter middle';
		result = getDescription('cF;pS;lE0;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; small; elongated/extended; pretty suddenly much brighter middle';
		result = getDescription('cB;S;E;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; pretty suddenly brighter middle; star of 10th magnitude following 35 arcseconds';
		result = getDescription('pB;S;R;psbM;*10 f 35\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; round; gradually pretty much brighter middle';
		result = getDescription('cF;pL;R;gpmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'inner regions very Black--MCG';
		result = getDescription('Inner Regions Very Black--MCG');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; much elongated/extended 215';
		result = getDescription('pB;pS;mE215');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; pretty much elongated/extended; suddenly/south brighter middle; bi-nucleus';
		result = getDescription('pB;L;pmE;sbM;BI-N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; faint';
		result = getDescription('vS;F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '6 arcseconds - extremely/excessively faint; very large; round; low surface brightness at 25X';
		result = getDescription('6\'\'-eF; vL; R; Low Surface Brightness at 25X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; pretty much elongated/extended; suddenly/south brighter middle';
		result = getDescription('B;pL;pmE;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; very much elongated/extended 151; very brighter middle Nucleus or to a Nucleus';
		result = getDescription('vB;L;vmE151;vbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; irregular round; gradually brighter middle; star of 9th magnitude north following 1 arcminutes';
		result = getDescription('eF;eS;iR;gbM;*9 nf 1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; elongated/extended; very little/long brighter middle';
		result = getDescription('vF;pL;E;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty small; very little/long elongated/extended; resolvable (mottled not resolved); small stars near';
		result = getDescription('cB;pS;vlE;r;S* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; pretty suddenly brighter middle';
		result = getDescription('pF;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; irregular round; gradually brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;vS;iR;gbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; faint stars close preceding';
		result = getDescription('F;pL;F* close p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; resolvable (mottled not resolved); very gradually little/long brighter middle; considerably elongated/extended north suddenly/south';
		result = getDescription('vF;L;r;vglbM;cE ns');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; little/long elongated/extended; very gradually brighter middle; small double stars near';
		result = getDescription('F;pS;lE;vgbM;SD* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; round; pretty suddenly very much brighter middle; star of 9th magnitude north preceding 1 arcminutes';
		result = getDescription('S;R;psvmbM;*9 np 1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; gradually brighter middle; star of 10.5 magnitude following 4 arcminutes';
		result = getDescription('vF;vS;gbM;*10.5 f4\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; very gradually very little/long brighter middle';
		result = getDescription('vF;pL;R;vgvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; considerably large; very little/long elongated/extended; very suddenly/south very much brighter middle Nucleus or to a Nucleus';
		result = getDescription('vB;cL;vlE;vsvmbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; pretty suddenly brighter middle';
		result = getDescription('pB;pS;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint';
		result = getDescription('F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty small; very suddenly/south very much brighter middle Nucleus or to a Nucleus';
		result = getDescription('pS;vsvmbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; 3 very faint stars close (no nebula)';
		result = getDescription('eF;vS;3 vF st close (no neb)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long elongated/extended; gradually brighter middle';
		result = getDescription('vF;S;vlE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; much elongated/extended 140; star of 12th magnitude extremely/excessively following';
		result = getDescription('F;S;mE 140;*12ef');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty small; round; pretty suddenly brighter middle; double stars preceding';
		result = getDescription('cB;pS;R;psbM;D* p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty small; little/long elongated/extended; pretty suddenly brighter middle; (1344)';
		result = getDescription('vB;pS;lE;psbM;(1344)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; irregular round; very gradually brighter middle';
		result = getDescription('cB;pL;iR;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; pretty suddenly brighter middle';
		result = getDescription('pB;pS;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; much elongated/extended; very much brighter middle round Nucleus or to a Nucleus';
		result = getDescription('B;L;mE;vmbMRN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 8th magnitude in bright; large nebula; elongated/extended north suddenly/south';
		result = getDescription('*8in B;L neb;E ns');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/very remarkable object; very bright; very large; much elongated/extended; bright Nucleus or to a Nucleus';
		result = getDescription('!!;vB;vL;mE;BN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular figure; little/long brighter middle';
		result = getDescription('vF;S;iF;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; very little/long elongated/extended; pretty suddenly brighter middle';
		result = getDescription('pB;pL;vlE;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; preceding of 3';
		result = getDescription('eF;vS;p of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; little/long elongated/extended; gradually much brighter middle; 2 north diameter of 3';
		result = getDescription('vB;pL;lE;gmbM;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; little/long elongated/extended; pretty much brighter middle; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('B;S;lE;pmbM;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint';
		result = getDescription('F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; round; gradually pretty much brighter middle';
		result = getDescription('B;pL;R;gpmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; round; pretty suddenly brighter middle';
		result = getDescription('vB;L;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint';
		result = getDescription('F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint';
		result = getDescription('F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; round; gradually much brighter middle';
		result = getDescription('vB;pL;R;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint';
		result = getDescription('F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; gradually pretty much brighter middle';
		result = getDescription('pB;pS;R;gpmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; pretty suddenly brighter middle; partially resolved some stars seen';
		result = getDescription('vB;pL;psbM;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably large; round; very much brighter middle';
		result = getDescription('cB;cL;R;vmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; round; pretty suddenly much brighter middle';
		result = getDescription('vB;pL;R;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint';
		result = getDescription('F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably large; very much elongated/extended; very gradually little/long brighter middle; star of 7th magnitude north preceding';
		result = getDescription('F;cL;vmE;vglbM;*7 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended; gradually brighter middle; stars south following 2 arcminutes';
		result = getDescription('F;S;E;gbM;* sf 2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; irregular round; gradually brighter middle';
		result = getDescription('F;pL;iR;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; pretty suddenly much brighter middle';
		result = getDescription('pF;S;R;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint';
		result = getDescription('F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; gradually brighter middle';
		result = getDescription('eF;pS;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; 40 or 50 stars from 8th to 15th magnitude';
		result = getDescription('Cl;pL;40 or 50* 8...15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; about 20 faint stars';
		result = getDescription('Cl;S;about 20 F stars');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty small; much compressed; very rich; irregular resolvable (mottled not resolved) triangle stars extremely/excessively small';
		result = getDescription('Cl;pS;mC;vRi;irr triangle * eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - extremely/excessively faint; large; round; 5 stars involved at 100X with UHC filter';
		result = getDescription('13\'\'-eF;L;R; 5* invol at 100X with UHC filter');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; Eridanus; preceding compressed; stars 9th magnitude and fainter th to 16th magnitude';
		result = getDescription('Cl;vL;eRi;pC;st9...16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; narrow curved';
		result = getDescription('F;narrow curved');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '11 arcseconds - pretty bright; very large; north compressed; not well detached at 60X';
		result = getDescription('11\'\'-pB; vL; nC; not well detached at 60X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula; star of 9.5 magnitude involved/involving';
		result = getDescription('Neb;* 9.5 inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint cluster';
		result = getDescription('F Cl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; bright';
		result = getDescription('vS;B');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding compressed; with nebulous??';
		result = getDescription('Cl;pC;w neb?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; extremely/excessively large; preceding rich; little/long compressed; stars large and small';
		result = getDescription('Cl;eL;pRi;lC;st L & S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small cluster';
		result = getDescription('small cluster');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; pretty small; little/long elongated/extended 1.2X1 in position angle 135; in rich field of view';
		result = getDescription('13\'\'-pB; pS; lE 1.2X1 in PA 135; in rich FOV');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; 30 or 40 stars from 12th to 13th magnitude';
		result = getDescription('Cl;P;30 or 40* 12...13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty small; extremely/excessively compressed; rich; stars from 11th to 15th magnitude';
		result = getDescription('Cl;pS;eC;Ri;st 11..15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; brighter middle';
		result = getDescription('F;S;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very small; little/long rich';
		result = getDescription('Cl;vS;lRi');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar nucleus; = 2275 ?';
		result = getDescription('vF;vS;stellar Nucl;=2275?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; resolvable (mottled not resolved)';
		result = getDescription('F;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; resolvable (mottled not resolved) ?';
		result = getDescription('eF;eS;r?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round';
		result = getDescription('cF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; gradually brighter middle';
		result = getDescription('F;S;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; =IC 2173';
		result = getDescription('eF;vS;=IC 2173');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint';
		result = getDescription('eeF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; rich; much compressed; stars very small';
		result = getDescription('Cl;pL;Ri;mC;st vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; very little/long compressed; small cluster involved/involving';
		result = getDescription('Cl;L;vlC;S Cl inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; gradually little/long brighter middle';
		result = getDescription('pB;pL;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle';
		result = getDescription('vF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; little/long elongated/extended; very little/long brighter middle';
		result = getDescription('pF;S;lE;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty small; preceding rich; much compressed; stars from 15th to 16th magnitude';
		result = getDescription('Cl;pS;pRi;mC;*15..16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; little/long compressed';
		result = getDescription('Cl;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; large; much elongated/extended; brighter middle; faint stars involved/involving';
		result = getDescription('eF;L;mE;bM;F* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; pretty suddenly brighter middle';
		result = getDescription('vF;pS;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; elongated/extended';
		result = getDescription('eF;vS;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; brighter middle Nucleus or to a Nucleus; preceding of double nebula';
		result = getDescription('B;S;R;bMN;p of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; brighter middle Nucleus or to a Nucleus; following of double nebula';
		result = getDescription('pB;S;R;bMN;f of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; 2379 following 17 suddenly/south; 1 arcminutes suddenly/south';
		result = getDescription('eF;vS;2379 f 17s;1\' s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; compressed';
		result = getDescription('Cl;pRi;C');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2 very faint close stars in extremely/excessively faint nebula; 2379 following 2 suddenly/south; 1 arcminutes suddenly/south';
		result = getDescription('2 vF close st in eF neb;2379 f 2s;1\' s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle';
		result = getDescription('vF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar';
		result = getDescription('stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle';
		result = getDescription('vF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - faint; pretty large; elongated/extended at 100X with UHC; crescent shape';
		result = getDescription('13\'\'-F;pL;E at 100X with UHC; crescent shape');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; pretty suddenly brighter middle';
		result = getDescription('vF;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; star of 9th magnitude middle; stars 8 north following 100 arcseconds';
		result = getDescription('B;S;R;*9M;*8 nf 100\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; little/long elongated/extended; diffused; resolvable (mottled not resolved) ?';
		result = getDescription('eF;pS;lE;dif;r?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; brighter middle; double nebula?';
		result = getDescription('vF;eS;bM;Dneb?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; very supernova ?';
		result = getDescription('eF;eS;vSN?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; very supernova ?';
		result = getDescription('eF;eS;vSN?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round';
		result = getDescription('vF;S;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 14th magnitude slightly nebulous';
		result = getDescription('*14 slightly nebs');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; several very faint stars involved/involving';
		result = getDescription('eF;vS;sev vf * inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; brighter middle';
		result = getDescription('vF;eS;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; considerably large; rich; compressed; stars from 11th to 18th magnitude';
		result = getDescription('Cl;cL;Ri;C;st 11...18');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long brighter middle';
		result = getDescription('F;S;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('eF;eS;R;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; small stars involved/involving';
		result = getDescription('eF;vS;S* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; round; brighter middle';
		result = getDescription('vF;eS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; elongated/extended north preceding south following; close north preceding 2481';
		result = getDescription('vF;E np sf;close np 2481');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended; brighter middle; easily resolvable';
		result = getDescription('F;S;lE;bM;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; pretty suddenly brighter middle';
		result = getDescription('vF;S;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; gradually brighter middle';
		result = getDescription('vF;S;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; star of 13th magnitude 1 arcminutes following; preceding of 2';
		result = getDescription('vF;S;R;*13 1\'f;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle; following of 2';
		result = getDescription('vF;S;R;bM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;vS;R;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably large; little/long elongated/extended; gradually very little/long brighter middle; preceding of 2';
		result = getDescription('F;cL;lE;gvlbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; very gradually little/long brighter middle; following of 2';
		result = getDescription('F;S;R;vglbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; round; pretty gradually brighter middle';
		result = getDescription('cF;cS;R;pgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; round; considerably small; pretty suddenly brighter middle';
		result = getDescription('B;R;cS;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; very gradually brighter middle; star of 6th magnitude following 40 arcseconds';
		result = getDescription('eF;pL;vgbM;*6f40\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; gradually brighter middle';
		result = getDescription('cF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; very little/long elongated/extended; much brighter middle';
		result = getDescription('B;S;vlE;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably large; round; very gradually little/long brighter middle';
		result = getDescription('vF;cL;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually little/long brighter middle; preceding of 2';
		result = getDescription('F;S;R;glbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually little/long brighter middle; following of 2';
		result = getDescription('F;S;R;glbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle';
		result = getDescription('F;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty small; round; much brighter middle Nucleus or to a Nucleus';
		result = getDescription('vB;pS;R;mbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; in triangle of stars 13th magnitude and fainter';
		result = getDescription('B;S;R;in triangle of st 13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; little/long elongated/extended; stars attached; annular';
		result = getDescription('pB;L;lE;* att;annular');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably large; considerably elongated/extended; gradually little/long brighter middle';
		result = getDescription('cF;cL;cE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; small; very little/long elongated/extended; suddenly/south much brighter middle Nucleus or to a Nucleus';
		result = getDescription('cB;S;vlE;smbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; star of 8th magnitude north preceding';
		result = getDescription('eF;S;R;*8 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty small; round; gradually brighter middle';
		result = getDescription('vB;pS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; pretty much elongated/extended; pretty suddenly brighter middle; preceding of 2';
		result = getDescription('pB;S;pmE;psbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; star of 8th magnitude following; following of 2';
		result = getDescription('F;vS;R;*8 f;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; faint stars near preceeding';
		result = getDescription('eeF;S;R;F * nr preceeding');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; round; doubtful object';
		result = getDescription('eeF;R;doubtful obj');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; preceding of 2';
		result = getDescription('eF;S;R;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; following of 2';
		result = getDescription('eF;S;R;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; pretty much elongated/extended';
		result = getDescription('F;pL;pmE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long elongated/extended; gradually brighter middle';
		result = getDescription('vF;S;vlE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; (= 7322)';
		result = getDescription('eeF;(=7322)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; faint stars south following';
		result = getDescription('pF;pL;R; F * sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; double stars following 40 suddenly/south';
		result = getDescription('eeF;S;R;D* f 40s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; little/long elongated/extended; gradually little/long brighter middle';
		result = getDescription('F;cS;lE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; star of 12th magnitude attached north preceding';
		result = getDescription('eF;vS;R;*12 att np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; little/long elongated/extended; gradually little/long brighter middle; very small stars involved/involving';
		result = getDescription('pF;lE;glbM;vS * inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; large; very much elongated/extended 43; much brighter middle';
		result = getDescription('cB;L;vmE43;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very large; star of 7th magnitude north following';
		result = getDescription('eF;vL;*7 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; very large; very little/long elongated/extended; very gradually little/long brighter middle';
		result = getDescription('cB;vL;vlE;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; large; very little/long elongated/extended; gradually pretty much brighter middle; partially resolved some stars seen';
		result = getDescription('cB;L;vlE;gpmbM;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; cometic; Nucleus or to a Nucleus = 12 much';
		result = getDescription('F;pS;com;N=12 m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; much brighter middle';
		result = getDescription('pB;S;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably large; very little/long elongated/extended; very gradually much brighter middle';
		result = getDescription('F;cL;vlE;vgmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably large; little/long elongated/extended; 4 stars preceeding';
		result = getDescription('vF;cL;lE;4 stars preceeding');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; much elongated/extended 34; very gradually little/long brighter middle';
		result = getDescription('vF;L;mE34;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty small; very much elongated/extended 5; star of 11th magnitude north preceding';
		result = getDescription('cF;pS;vmE5;*11 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round; gradually little/long brighter middle; star of 11th magnitude north preceding';
		result = getDescription('eF;pL;R;glbM;*11 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; triangle with 2 stars 7th magnitude and fainter much';
		result = getDescription('F;S;R;triangle w 2 st 7m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; little/long elongated/extended; very gradually brighter middle star of 13th magnitude';
		result = getDescription('pB;cL;lE;vgbM *13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; little/long elongated/extended; pretty gradually brighter middle';
		result = getDescription('pB;S;lE;pgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; very little/long elongated/extended; very gradually very little/long brighter middle; star of 10th magnitude attached';
		result = getDescription('F;S;vlE;vgvlbM;*10 att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; much elongated/extended 90; very suddenly/south brighter middle star of 13th magnitude';
		result = getDescription('B;S;mE90;vsbM *13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; pretty much elongated/extended; gradually brighter middle';
		result = getDescription('pB;L;pmE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; pretty much elongated/extended; gradually brighter middle; preceding of 2';
		result = getDescription('pB;pL;pmE;gbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; pretty much elongated/extended; gradually brighter middle; following of 2';
		result = getDescription('F;pL;pmE;gbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; little/long brighter middle';
		result = getDescription('F;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'double; both extremely/excessively faint; small; round; 4 stars preceding';
		result = getDescription('D;both eF;S;R;4 st p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; irregular round; little/long brighter middle';
		result = getDescription('eF;vS;iR;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; no nucleus';
		result = getDescription('vF;pS;no Nucl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; partly verified';
		result = getDescription('eF;pL;partly verified');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; round; brighter middle';
		result = getDescription('pF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; little/long elongated/extended; very little/long brighter middle; north preceding of 2';
		result = getDescription('vF;pL;lE;vlbM;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; little/long elongated/extended; south following of 2';
		result = getDescription('vF;pL;lE;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; round; very difficult';
		result = getDescription('eeF;vS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; faint stars close';
		result = getDescription('vF;eS;F* close');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; round; stellar';
		result = getDescription('pF;vS;R;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small';
		result = getDescription('F;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; round; south preceding of 3 in line';
		result = getDescription('eeF;vS;R;sp of 3 in line');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; little/long elongated/extended; (4th of 10)';
		result = getDescription('eeF;pS;lE;(4th of 10)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; round; very faint stars close preceding';
		result = getDescription('eeF;vS;R;vF * close p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - 5 galaxies extremely/excessively faint; small; 4 are round; 1 irregular suddenly/south southeast at 165X';
		result = getDescription('13\'\'-5 gals eF;S; 4 areR; 1 is sE at 165X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; round; very difficult';
		result = getDescription('eeF;vS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; round; pretty small; faint stars close north';
		result = getDescription('eF;R;pS;F* close n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; irregular round; (= 6064)';
		result = getDescription('F;pL;iR;(=6064)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; pretty bright stars south following';
		result = getDescription('vF;vS;pB* sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; very difficult';
		result = getDescription('eeF;S;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; very difficult';
		result = getDescription('eeF;pS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very difficult';
		result = getDescription('eeF;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; little/long elongated/extended; faint stars south preceding';
		result = getDescription('eeF;pS;lE;F* sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; very difficult';
		result = getDescription('eeF;S;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; extremely/excessively small; round';
		result = getDescription('eeF;eS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; elongated/extended; suddenly/south brighter middle';
		result = getDescription('eF;E;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; 4 bright stars suddenly/south';
		result = getDescription('eeF;S;R;4B*s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; round; very little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('eF;R;vlbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; resolvable';
		result = getDescription('vF;S;resolvable');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; brighter middle';
		result = getDescription('eF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; stars or stars involved/involving; partially resolved some stars seen ?';
		result = getDescription('F;vS;R;* or st inv;rr?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; faint; stellar';
		result = getDescription('S;F;Stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; brighter middle';
		result = getDescription('eF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle';
		result = getDescription('vF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; difficult';
		result = getDescription('eF;vS;diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; very difficult';
		result = getDescription('eeF;pS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; star of 8th magnitude following 41 suddenly/south; north preceding of 2';
		result = getDescription('eF;vS;R;*8f41s;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; south following of 2';
		result = getDescription('eF;vS;R;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; little/long elongated/extended; very gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;pL;lE;vgbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; no nucleus';
		result = getDescription('vF;pS;no nucl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; very little/long brighter middle';
		result = getDescription('eF;vS;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle';
		result = getDescription('vF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round; brighter middle';
		result = getDescription('F;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; one of 3';
		result = getDescription('eF;one of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; round; brighter middle';
		result = getDescription('cF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; little/long brighter middle; easily resolvable';
		result = getDescription('vF;S;R;lbM;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; irregular figure; gradually brighter middle';
		result = getDescription('F;pS;iF;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; with stars';
		result = getDescription('vF;S;w st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '11 arcseconds pretty faint; pretty large; north compressed; north rich; 12 stars';
		result = getDescription('11\'\' pF;pL;nC;nRi; 12*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; pretty bright stars near suddenly/south';
		result = getDescription('vF;pS;R;pB* nr s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round; little/long brighter middle';
		result = getDescription('vF;S;iR;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - very faint; large; round; north bright middle; averted vision helps';
		result = getDescription('13\'\'-vF; L; R; nBM; averted viz helps');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular figure';
		result = getDescription('F;S;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; round; gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cF;pL;R;gbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long brighter middle';
		result = getDescription('vF;S;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long brighter middle';
		result = getDescription('F;S;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long brighter middle';
		result = getDescription('vF;S;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; very little/long elongated/extended; very gradually much brighter middle';
		result = getDescription('pF;S;vlE;vgmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; round; brighter middle';
		result = getDescription('cF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular elongated/extended; partially resolved some stars seen; stars near';
		result = getDescription('vF;pL;iE;rr;* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; much brighter middle';
		result = getDescription('eF;vS;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; brighter middle Nucleus or to a Nucleus; 4 arcminutes north following 6177';
		result = getDescription('vF;S;bMN;4\' nf 6177');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; much elongated/extended; faint stars at preceding end';
		result = getDescription('eeF;mE;F*at p end');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; very little/long brighter middle';
		result = getDescription('eF;vS;R;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; very little/long elongated/extended; pretty gradually much brighter middle';
		result = getDescription('pB;pL;vlE;pgmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle; star of 11th magnitude north preceding';
		result = getDescription('F;S;R;gbM;*11 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; elongated/extended';
		result = getDescription('eF;vS;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually brighter middle; between 2 stars';
		result = getDescription('vF;S;R;gbM;bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; suddenly/south brighter middle star of 12th magnitude';
		result = getDescription('vF;vS;sbM*12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar';
		result = getDescription('vF;vS; stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; elongated/extended; stellar';
		result = getDescription('eF;E;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/very remarkable object extremely/excessively bright; very rich; very gradually extremely/excessively compressed middle; star of 11th magnitude th magnitude and fainter';
		result = getDescription('!!eB;vRi;vgeCM;*11...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; elongated in position angle 45 degrees; very gradually much brighter middle';
		result = getDescription('pB;pL;E45;vgmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very small; round; disc';
		result = getDescription('vB;vS;R;disc');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small';
		result = getDescription('F;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; round; disc; resolvable (mottled not resolved)';
		result = getDescription('vB;L;R;disc;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; little/long elongated/extended; pretty bright stars north round Nucleus or to a Nucleus; north - 2';
		result = getDescription('eeF;vS;lE;pB* nRN;n-2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; little/long elongated/extended; faint stars involved/involving; suddenly/south - 2';
		result = getDescription('eF;vS;lE;Fst inv;s-2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; elongated/extended; binuclear; north preceding south following';
		result = getDescription('vF;E;bi-N;np sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small';
		result = getDescription('eF;pS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually brighter middle';
		result = getDescription('pF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; very difficult';
		result = getDescription('eeF;pS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular figure; diffused';
		result = getDescription('vF;vS;iF;dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably large; elongated in position angle 90 degrees';
		result = getDescription('eF;cL;E90');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; (very suddenly/south double stars ); faint double stars north following';
		result = getDescription('vF;(vsD*);F D* nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; irregular figure';
		result = getDescription('eF;eS;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; little/long brighter middle';
		result = getDescription('vF;pL;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round';
		result = getDescription('vF;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended; coarse double stars north preceding';
		result = getDescription('vF;pS;lE;coarse D* np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; irregular round';
		result = getDescription('vF;cS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; stellar';
		result = getDescription('vF;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; stellar';
		result = getDescription('F;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; little/long elongated/extended; between 2 faint stars';
		result = getDescription('eeF;vS;lE;bet 2F*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; round';
		result = getDescription('pB;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; irregular resolvable (mottled not resolved) round; diffused; very small stars involved/involving';
		result = getDescription('eF;irrR;dif;vS* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '11 arcseconds faint; pretty large; north compressed; north rich; 12 stars; including chain of 8stars';
		result = getDescription('11\'\' F;pL;nC;nRi; 12*; incl chain of 8*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; suddenly/south brighter middle';
		result = getDescription('vF;S;R;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; brighter middle';
		result = getDescription('F;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; star of 13th magnitude preceding 0 . 5 suddenly/south';
		result = getDescription('eF;*13p0.5s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; difficult';
		result = getDescription('eF;vS;diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; difficult';
		result = getDescription('eF;vS;diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle';
		result = getDescription('vF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; irregular round; pretty small; very little/long brighter middle';
		result = getDescription('eF;iR;pS;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; oval; little/long bright middle';
		result = getDescription('vF;oval;lBM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle';
		result = getDescription('vF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; irregular round; south preceding of 2';
		result = getDescription('vF;L;iR;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; extremely/excessively compressed middle; stars 12th magnitude and fainter...';
		result = getDescription('vB;vL;eCM;st 12...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended; north following of 2';
		result = getDescription('vF;S;lE;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; star of 12th magnitude north following; near';
		result = getDescription('F;S;R;*12 nf;nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; irregular round; little/long brighter middle';
		result = getDescription('eF;vS;iR;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; gradually brighter middle';
		result = getDescription('pF;pS;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; round; little/long brighter middle; preceding of 2';
		result = getDescription('vF;eS;R;lbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; fainter than preceding';
		result = getDescription('vF;vS;fainter than p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; irregular round; diffused';
		result = getDescription('eF;iR;dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; 3 suddenly/south stars involved/involving; star of 10th magnitude north following 1 arcminutes';
		result = getDescription('pB;pS;3s* inv;*10 nf 1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually brighter middle';
		result = getDescription('vF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; round; brighter middle star of 13th magnitude';
		result = getDescription('pF;vS;R;bM*13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint star in very faint; very small; round nebula';
		result = getDescription('vF*in vf;vS;R neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; north preceding of 2';
		result = getDescription('vF;S;R;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; irregular figure; south following of 2';
		result = getDescription('vF;pS;iF;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round';
		result = getDescription('F;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large';
		result = getDescription('vF;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular figure; extremely/excessively round';
		result = getDescription('F;S;iF;eR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; stellar';
		result = getDescription('vF;eS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular round; gradually brighter middle';
		result = getDescription('F;S;iR;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; very little/long brighter middle';
		result = getDescription('pF;S;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar';
		result = getDescription('vF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; stellar';
		result = getDescription('vF;S;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; pretty much elongated/extended; brighter middle';
		result = getDescription('vF;S;pmE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; stellar';
		result = getDescription('F;S;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; little/long elongated/extended';
		result = getDescription('eF;pS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; much elongated/extended';
		result = getDescription('vF;S;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; irregular round';
		result = getDescription('eF;vS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; irregular round; gradually brighter middle';
		result = getDescription('pF;S;iR;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; bright stars following 2 arcminutes';
		result = getDescription('vF;vS;B*f2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small';
		result = getDescription('eeF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; stellar';
		result = getDescription('eF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular round';
		result = getDescription('vF;pL;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended';
		result = getDescription('vF;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; very suddenly/south very much brighter middle; very small round Nucleus or to a Nucleus';
		result = getDescription('vF;S;R;vsvmbM;vSRN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; much brighter middle';
		result = getDescription('eF;vS;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small stars slightly nebula suddenly/south';
		result = getDescription('vS* slightly neb s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle';
		result = getDescription('F;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '11 arcseconds - pretty bright; very small; round at 200X; light grey-green color';
		result = getDescription('11\'\'-pB; vS; R at 200X; light grey-green color');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar';
		result = getDescription('vF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small double stars in nebula';
		result = getDescription('S D*in neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; south preceding of 2';
		result = getDescription('vF;vS;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; north following of 2';
		result = getDescription('vF;vS;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very much elongated/extended; suddenly/south brighter middle';
		result = getDescription('F;vmE;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; little/long elongated/extended';
		result = getDescription('pF;pS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar';
		result = getDescription('vF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2 very faint; closest in very faint nebula';
		result = getDescription('2 vF;closest in vF neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; round';
		result = getDescription('eeF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; elongated/extended; much brighter middle';
		result = getDescription('F;vS;E;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; irregular round';
		result = getDescription('eeF;pS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular round; near 6548';
		result = getDescription('vF;pL;iR;near 6548');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; little/long elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('cF;S;lE;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; several faint stars involved/involving';
		result = getDescription('vF;pS;R;sev F* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; round; very gradually little/long brighter middle';
		result = getDescription('F;L;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; stellar';
		result = getDescription('eF;vS;stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round';
		result = getDescription('pB;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round';
		result = getDescription('eeF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round';
		result = getDescription('pB;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended; much brighter middle; round';
		result = getDescription('F;S;E;mbM;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; diffused; between 2 faint stars';
		result = getDescription('eF;dif;bet 2F st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; extremely/excessively elongated/extended; between several bright stars';
		result = getDescription('eeF;S;eE;bet sev B st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; preceding of double nebula';
		result = getDescription('F;p of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; following of double nebula';
		result = getDescription('F;f of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; stellar';
		result = getDescription('F;vS;R;stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; stellar';
		result = getDescription('eeF;vS;stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; little/long brighter middle';
		result = getDescription('vF;vS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; round; gradually brighter middle; small stars attached following';
		result = getDescription('pF;vS;R;gbM;S* att f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; stellar';
		result = getDescription('F;vS;stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very small; stars following 30 arcseconds';
		result = getDescription('Cl;vS;st f 30\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; much elongated/extended; 2 faint stars near';
		result = getDescription('vF;eS;mE;2F st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended';
		result = getDescription('F;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; brighter middle';
		result = getDescription('pF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended; brighter middle';
		result = getDescription('vF;S;lE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large';
		result = getDescription('vF;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle';
		result = getDescription('F;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle';
		result = getDescription('vF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; little/long elongated/extended';
		result = getDescription('F;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; little/long compressed';
		result = getDescription('Cl;P;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; much brighter middle; between 2 stars';
		result = getDescription('pB;pS;R;mbM;bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; gradually brighter middle';
		result = getDescription('F;vS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large';
		result = getDescription('eF;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; irregular round; brighter middle';
		result = getDescription('F;pS;iR;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; close to a small stars';
		result = getDescription('eF;S;close to a S*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; stellar';
		result = getDescription('F;vS;stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; 2 or 3 very faint stars near';
		result = getDescription('eF;S;R;2or3 vF * nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; preceding of 2';
		result = getDescription('eF;S;R;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle; star of 11th magnitude suddenly/south 2 arcminutes';
		result = getDescription('F;S;R;gbM;*11s2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; gradually little/long brighter middle';
		result = getDescription('F;pS;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round; gradually brighter middle';
		result = getDescription('F;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round; gradually brighter middle';
		result = getDescription('F;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; pretty much elongated/extended; gradually brighter middle';
		result = getDescription('F;S;pmE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually little/long brighter middle';
		result = getDescription('pF;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; very much elongated/extended 80; very gradually brighter middle';
		result = getDescription('B;L;vmE80;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster of 18 or 20 stars';
		result = getDescription('Cl of 18 or 20 *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; round; partially resolved some stars seen';
		result = getDescription('B;L;R;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; much elongated/extended 37; gradually brighter middle';
		result = getDescription('F;pL;mE37;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended';
		result = getDescription('F;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular round; gradually brighter middle; stars near';
		result = getDescription('vF;pL;iR;gbM;* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; spiral';
		result = getDescription('F;pL;R;spiral');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; round; suddenly/south much brighter middle';
		result = getDescription('B;pS;R;smbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; pretty much elongated/extended; very suddenly/south very much brighter middle star of 10th magnitude';
		result = getDescription('vB;L;pmE;vsvmbM*10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; very much elongated/extended 222';
		result = getDescription('pB;L;vmE222');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; extremely/excessively elongated/extended 42; very gradually pretty much brighter middle';
		result = getDescription('pF;pL;eE42;vgpmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; large; extremely/excessively elongated/extended 80 degree; very much brighter middle';
		result = getDescription('cB;L;eE 80 deg;vmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; elongated in position angle 90 degrees; gradually brighter middle';
		result = getDescription('cF;S;E90;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; round; very gradually little/long brighter middle';
		result = getDescription('cF;pL;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably large; round; very gradually little/long brighter middle';
		result = getDescription('F;cL;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; round; very gradually very little/long brighter middle; 3 stars north';
		result = getDescription('F;L;R;vgvlbM;3*n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended 90; very gradually very little/long brighter middle';
		result = getDescription('eF;S;lE90;vgvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; very gradually much brighter middle';
		result = getDescription('F;pL;R;vgmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; considerably large; round; brighter middle';
		result = getDescription('B;cL;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; elongated in position angle 77 degrees; very suddenly/south much brighter middle round Nucleus or to a Nucleus';
		result = getDescription('pB;pS;E77;vsmbMRN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round';
		result = getDescription('F;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; elongated/extended; gradually brighter middle';
		result = getDescription('pF;S;E;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; preceding rich; pretty much compressed; stars from 9th to 13th magnitude';
		result = getDescription('Cl;vL;pRi;pmC;* 9..13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; irregular figure; 3 small stars involved/involving ?';
		result = getDescription('vF;cS;iF;3 S * inv?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; 2 stars triangle';
		result = getDescription('vF;S;R;2* triangle');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; partially resolved some stars seen; star of 7.5 magnitude north following 5 arcminutes';
		result = getDescription('eF;pS;rr;*7.5 nf 5\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; suddenly/south brighter middle Nucleus or to a Nucleus; 1 stars of 4';
		result = getDescription('vF;S;R;sbMN;1st of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; 2 north diameter of 4';
		result = getDescription('vF;S;R;2nd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; 3 resolvable (mottled not resolved) diameter of 4';
		result = getDescription('vF;S;R;3rd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; 4th of 4 (nebulous??)';
		result = getDescription('eF;pS;R;4th of 4 (neb?)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; little/long elongated/extended; nonexistent?';
		result = getDescription('pF;pS;lE;nonexistent?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint stars involved/involving in very faint; very small; little/long elongated/extended nebula';
		result = getDescription('F* inv in vF;vS;lE neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; attached to star of 13th magnitude; stars 7 north following';
		result = getDescription('F;S;att to *13;*7 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended; pretty suddenly brighter middle; between 2 stars';
		result = getDescription('F;S;E;psbM;bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; little/long elongated/extended; little/long brighter middle; faint stars involved/involving resolvable (mottled not resolved)';
		result = getDescription('F;pS;lE;lbM;F* inv r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; stars near north following';
		result = getDescription('vF;S;R;* nr nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; 2 very faint stars involved/involving';
		result = getDescription('eF;vS;2 vF * inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; irregular figure';
		result = getDescription('eF;pL;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; gradually brighter middle; 2 bright stars suddenly/south; one following';
		result = getDescription('vF;pL;gbM;2 B * s;one f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular resolvable (mottled not resolved) oval; several small points';
		result = getDescription('vF;pL;irr oval;sev S points');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle; star of 15th magnitude near';
		result = getDescription('vF;vS;R;bM;*15 nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle Nucleus or to a Nucleus';
		result = getDescription('F;S;R;gbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; nonexistent?';
		result = getDescription('eF;S;nonexistent?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; stellar';
		result = getDescription('eF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; elongated/extended';
		result = getDescription('pF;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably small; round';
		result = getDescription('pF;cS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; star of 9th magnitude north preceding 4 arcminutes';
		result = getDescription('vF;pS;R;*9 np 4\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; star of 15th magnitude north preceding';
		result = getDescription('vF;S;R;*15 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; 1 arcminutes north of 2699';
		result = getDescription('eF;vS;1\'n of 2699');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; little/long elongated/extended; doubtful';
		result = getDescription('eF;lE;doubtful');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; 4 arcminutes north following 2699';
		result = getDescription('vF;vS;4\' nf 2699');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; 3 stars 14 following; north following';
		result = getDescription('vF;vS;3* 14 f;nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; elongated/extended; 2 stars near';
		result = getDescription('pF;pS;E;2* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; round; brighter middle';
		result = getDescription('vF;L;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; much elongated/extended; stars near following';
		result = getDescription('vF;pS;mE;* nr f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended; north north following 2708';
		result = getDescription('vF;pS;lE;nnf 2708');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; irregular round; much brighter middle';
		result = getDescription('pB;iR;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; much brighter middle';
		result = getDescription('F;S;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; elongated/extended; among 3 stars';
		result = getDescription('F;pL;E;am 3*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar';
		result = getDescription('vF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; round';
		result = getDescription('eF;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; round; very gradually brighter middle';
		result = getDescription('cF;pL;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; 1 stars of 3';
		result = getDescription('eF;S;R;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; 2 north diameter of 3; only a double stars; distance or distant ars 12th magnitude and fainter arcseconds';
		result = getDescription('eF;2nd of 3;only a D*;dist 12\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated/extended 0 degree; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('eF;S;E 0 deg;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; brighter middle; small star of 30th magnitude arcseconds north';
		result = getDescription('vF;pS;bM;S* 30\'\' n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; elongated/extended; gradually brighter middle; easily resolvable';
		result = getDescription('vF;pL;E;gbM;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'inner regions very Black--MCG';
		result = getDescription('Inner Regions Very Black--MCG');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; very little/long elongated/extended; pretty suddenly much brighter middle';
		result = getDescription('B;S;vlE;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; much elongated/extended 64 degree; gradually much brighter middle';
		result = getDescription('B;L;mE 64 deg;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; elongated/extended; pretty suddenly much brighter middle';
		result = getDescription('pB;pS;E;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended; gradually brighter middle';
		result = getDescription('F;S;lE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round';
		result = getDescription('vF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; star of 10th magnitude involved/involving following; between 2 stars 9th magnitude and fainter';
		result = getDescription('F;*10 inv f;bet 2 st 9');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; round; brighter middle; stars following 8 s. 5';
		result = getDescription('eF;R;bM;* f 8s.5');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small cluster (nebulous??); star of 10th magnitude south following 4 arcminutes';
		result = getDescription('vS Cl (neb?);*10 sf 4\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; involved/involving in 2848; north preceding';
		result = getDescription('vF;S;inv in 2848;np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably large; elongated/extended 45 degree; gradually little/long brighter middle; star of 11th magnitude north following 3 arcminutes';
		result = getDescription('vF;cL;E 45 deg;glbM;*11 nf 3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; much elongated/extended; following 2848';
		result = getDescription('eF;pS;mE;f 2848');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; much brighter middle';
		result = getDescription('vF;vS;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; gradually much brighter middle Nucleus or to a Nucleus';
		result = getDescription('pB;pL;R;gmbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; much brighter middle';
		result = getDescription('vF;S;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; gradually brighter middle';
		result = getDescription('B;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; 10 suddenly/south preceding 2869';
		result = getDescription('eF;S;R;10s p 2869');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; irregular round; star of 14th magnitude following';
		result = getDescription('pF;S;iR;*14 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; elongated/extended; between 2 stars 12; 16';
		result = getDescription('cF;S;E;bet 2* 12;16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; elongated/extended 170 degree; gradually brighter middle; between 2 faint stars';
		result = getDescription('eF;pS;E 170 deg;gbM;bet 2 F st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; little/long elongated/extended';
		result = getDescription('vF;pL;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; several very faint stars involved/involving';
		result = getDescription('F;S;sev vF * inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; little/long brighter middle';
		result = getDescription('vF;vS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long elongated/extended';
		result = getDescription('vF;S;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long elongated/extended';
		result = getDescription('vF;S;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; 2 stars 9th magnitude and fainter. 5 and 10.5 south following';
		result = getDescription('eF;pS;2 st 9.5 & 10.5 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; resolvable (mottled not resolved) ?';
		result = getDescription('F;S;r?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;S;R;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty large';
		result = getDescription('eeF;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; very little/long elongated/extended; very gradually little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pF;pS;vlE;vglbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended';
		result = getDescription('vF;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty large; round';
		result = getDescription('eeF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar';
		result = getDescription('vF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; little/long elongated/extended; much brighter south following';
		result = getDescription('pF;S;lE;mb sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; preceding of 2';
		result = getDescription('eF;S;R;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; much brighter middle';
		result = getDescription('pF;S;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended; very gradually little/long brighter middle; following of 2';
		result = getDescription('vF;pS;lE;vglbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round';
		result = getDescription('pB;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; irregular round; gradually brighter middle';
		result = getDescription('eF;pL;iR;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; very little/long elongated/extended; gradually much brighter middle';
		result = getDescription('pB;pS;vlE;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; irregular round; suddenly/south brighter middle; star of 9.5 magnitude following 30 suddenly/south';
		result = getDescription('eF;pS;iR;sbM;*9.5 f 30s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; irregular round';
		result = getDescription('vF;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually little/long brighter middle; 2 or 3 small stars near';
		result = getDescription('F;S;R;glbM;2 or 3 S st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; like a nebulous star';
		result = getDescription('F;S;like a neb*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'inner regions completely Black--MCG';
		result = getDescription('Inner Regions Completely Black--MCG');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; star of 9.5 magnitude south following 4 arcminutes';
		result = getDescription('vF;vS;R;*9.5 sf 4\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; elongated/extended';
		result = getDescription('pF;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; gradually brighter middle';
		result = getDescription('vF;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; very little/long elongated/extended; pretty suddenly brighter middle';
		result = getDescription('F;vS;vlE;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; gradually brighter middle';
		result = getDescription('eeF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; brighter middle; resolvable (mottled not resolved); stellar';
		result = getDescription('F;pS;R;bM;r;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; irregular round; much brighter middle';
		result = getDescription('pB;pS;iR;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round; gradually brighter middle; double stars following';
		result = getDescription('F;R;gbM;D* f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; brighter middle; stellar; preceding of 2';
		result = getDescription('cF;S;R;bM;stellar;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; brighter middle; stellar; following of 2';
		result = getDescription('cF;S;R;bM;stellar;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; star of 9th magnitude following 1 arcminutes';
		result = getDescription('vF;S;*9 f 1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; star of 9th magnitude suddenly/south';
		result = getDescription('eF;vS;R;*9 s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; little/long brighter middle';
		result = getDescription('F;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; brighter middle';
		result = getDescription('eF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; little/long brighter middle';
		result = getDescription('F;pS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; little/long brighter middle; south preceding of 2';
		result = getDescription('vF;pS;R;lbM;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; double or binuclear';
		result = getDescription('eF;pL;D or biN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; gradually little/long brighter middle; north following of 2';
		result = getDescription('F;pL;R;glbM;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; irregular resolvable (mottled not resolved) oblong';
		result = getDescription('pB;L;irr oblong');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended; gradually little/long brighter middle';
		result = getDescription('vF;pS;lE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; much brighter middle';
		result = getDescription('pB;S;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; little/long brighter middle; triangle small stars north preceding';
		result = getDescription('vF;cS;lbM;tri S st np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; much elongated/extended 90';
		result = getDescription('vF;S;mE 90');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; irregular round; brighter middle; preceding of 2';
		result = getDescription('pB;pS;iR;bM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; round; little/long brighter middle; following of 2';
		result = getDescription('eF;R;lbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very large; very much elongated/extended 82; little/long brighter middle';
		result = getDescription('cF;vL;vmE 82;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round';
		result = getDescription('eF;eS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; much elongated/extended 170; little/long brighter middle';
		result = getDescription('eF;pL;mE 170;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; much elongated/extended 45';
		result = getDescription('eF;pL;mE 45');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; little/long brighter middle; double stars suddenly/south';
		result = getDescription('F;pL;R;lbM;D* s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; 1 stars of 2';
		result = getDescription('eF;vS;R;1st of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; 2 north diameter of 2';
		result = getDescription('eF;S;R;2nd of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; suddenly/south brighter middle Nucleus or to a Nucleus; 1 stars of 2';
		result = getDescription('eF;pS;R;sbMN;1st of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; 2 north diameter of 2';
		result = getDescription('eF;vS;R;2nd of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small';
		result = getDescription('F;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; much elongated/extended; very gradually suddenly/south little/long brighter middle; lambda Hydra north preceding 8 arcminutes';
		result = getDescription('F;pL;mE;vgslbM;lambda Hya np 8\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; gradually brighter middle';
		result = getDescription('eF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; irregular round';
		result = getDescription('eF;pS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; gradually brighter middle';
		result = getDescription('eF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; gradually pretty much brighter middle';
		result = getDescription('pB;pL;gpmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; elongated/extended 160; brighter middle Nucleus or to a Nucleus';
		result = getDescription('pB;E 160;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; considerably elongated/extended; gradually brighter middle';
		result = getDescription('pB;S;cE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; irregular round; gradually brighter middle';
		result = getDescription('eF;pL;iR;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; irregular figure; stellar Nucleus or to a Nucleus';
		result = getDescription('eF;pL;iF;stell N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; stars near';
		result = getDescription('eF;S;R;* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object very bright; little/long elongated/extended 147; 45 arcseconds diameter; blue';
		result = getDescription('! vB;lE 147;45\'\' d;blue');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint stars in extremely/excessively faint; very small nebula; between 2 stars';
		result = getDescription('eF * in eF;vS neb;bet 2 st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; binuclear';
		result = getDescription('F;biN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; brighter middle; double or stars involved/involving';
		result = getDescription('eF;pL;bM;D or st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; brighter middle';
		result = getDescription('eF;pS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; irregular round';
		result = getDescription('eF;S;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; little/long elongated/extended; gradually brighter middle; 1 stars of 9';
		result = getDescription('pB;S;lE;gbM;1st of 9');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended 0; gradually brighter middle; bright stars north 6 arcminutes';
		result = getDescription('eF;S;lE 0;gbM;B* n 6\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; 2 north diameter of 9';
		result = getDescription('vF;S;R;2nd of 9');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; 3 resolvable (mottled not resolved) diameter of 9';
		result = getDescription('eeF;3rd of 9');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; 4th of 9';
		result = getDescription('F;S;R;4th of 9');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; round; preceding of double nebula; 5th of 9';
		result = getDescription('B;L;R;p of Dneb;5th of 9');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; round; following of double nebula; 6th of 9';
		result = getDescription('B;L;R;f of Dneb;6th of 9');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '36 arcseconds 58 galaxies in four fields of view';
		result = getDescription('36\'\' 58 galaxies in four fields of view');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; elongated/extended; gradually brighter middle; 7th of 9';
		result = getDescription('cF;E;gbM;7th of 9');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '8th of 9 nebula';
		result = getDescription('8th of 9 neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular round; gradually very little/long brighter middle; star of 1th magnitude arcminutes north preceding';
		result = getDescription('vF;pL;iR;gvlbM;* 1\' np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; irregular round; gradually brighter middle Nucleus or to a Nucleus; star of 15th magnitude suddenly/south 3 arcseconds';
		result = getDescription('eF;pS;iR;gbMN;*15 s 3\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle; 9th of 9';
		result = getDescription('F;S;R;bM;9th of 9');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula stars; 5 arcminutes north of NGC 3316';
		result = getDescription('neb *;5\' n of NGC 3316');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; much elongated/extended 160; stars north preceding end';
		result = getDescription('eF;pS;mE 160;* np end');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; irregular figure; stars preceding';
		result = getDescription('F;iF;* p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round; gradually brighter middle';
		result = getDescription('vF;S;iR;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long elongated/extended 0';
		result = getDescription('vF;S;vlE 0');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; little/long elongated/extended; gradually little/long brighter middle';
		result = getDescription('vF;pL;lE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula; no description';
		result = getDescription('neb;no description');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; irregular round; gradually little/long brighter middle';
		result = getDescription('F;pL;iR;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'inner regions very Black--MCG';
		result = getDescription('Inner Regions Very Black--MCG');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; pretty much elongated/extended 0';
		result = getDescription('F;S;pmE 0');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; round; very gradually little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;L;R;vglbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; pretty suddenly brighter middle; 2 stars 10th magnitude and fainter following';
		result = getDescription('F;S;R;psbM;2st 10f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; pretty gradually brighter middle Nucleus or to a Nucleus; star of 8.5 magnitude suddenly/south 6 arcminutes';
		result = getDescription('eF;vS;R;pgbMN;*8.5 s 6\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very large; elongated/extended preceding following';
		result = getDescription('pB;vL;E pf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated/extended 200; 2 very faint stars involved/involving';
		result = getDescription('eF;S;E 200;2 vF st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round';
		result = getDescription('F;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; little/long brighter middle';
		result = getDescription('F;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2 nebula; faint; round';
		result = getDescription('2 neb;F;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2 nebula; faint; round';
		result = getDescription('2 neb;F;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle';
		result = getDescription('F;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; elongated/extended 125';
		result = getDescription('eF;pL;E 125');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually little/long brighter middle';
		result = getDescription('F;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; brighter middle; among stars';
		result = getDescription('pF;S;R;bM;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; elongated/extended; very suddenly/south much brighter middle Nucleus or to a Nucleus; 2 bright stars triangle';
		result = getDescription('B;pL;E;vsmbMN;2 B st tri');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; gradually brighter middle';
		result = getDescription('eF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle';
		result = getDescription('F;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; very large; elongated/extended 160; among 4 stars';
		result = getDescription('cB;vL;E 160;am 4 st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very large; gradually very little/long brighter middle; star of 7th magnitude suddenly/south 6 arcminutes';
		result = getDescription('F;vL;gvlbM;*7 s 6\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; much elongated/extended; star of 13th magnitude attached';
		result = getDescription('pB;S;mE;*13 att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; very little/long elongated/extended; brighter middle; very faint stars south following';
		result = getDescription('cF;vS;vlE;bM;vF * sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; much brighter middle';
		result = getDescription('pB;S;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; little/long elongated/extended; gradually much brighter middle; resolvable (mottled not resolved); very small stars south preceding involved/involving';
		result = getDescription('B;pL;lE;gmbM;r;vS* sp inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably large; very much elongated/extended 59';
		result = getDescription('vF;cL;vmE 59');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; brighter middle';
		result = getDescription('pB;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; considerably elongated/extended';
		result = getDescription('vF;L;cE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; pretty suddenly brighter middle; resolvable (mottled not resolved); preceding of 2';
		result = getDescription('pF;pS;R;psbM;r;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; pretty gradually brighter middle; following of 2';
		result = getDescription('pF;pS;R;pgbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; elongated/extended north suddenly/south; little/long brighter Nucleus or to a Nucleus';
		result = getDescription('eF;pL;Ens;lbN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very large; round; very gradually very little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;vL;R;vgvlbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; star of 13th magnitude attached';
		result = getDescription('eeF;vS;*13 att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'large; Eridanus; very compressed; irregular round; well resolved clearly consisting of stars; stars 13th magnitude and fainter...';
		result = getDescription('L;eRi;vC;iR;rrr;st 13...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; round; gradually very little/long brighter middle';
		result = getDescription('F;cS;R;gvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle';
		result = getDescription('F;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; round; gradually brighter middle';
		result = getDescription('F;cS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; gradually little/long brighter middle';
		result = getDescription('F;pL;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very large; considerably elongated/extended; very gradually brighter middle';
		result = getDescription('vF;vL;cE;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular figure';
		result = getDescription('vF;pL;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably small; round';
		result = getDescription('eF;cS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably small; round; suddenly/south little/long brighter middle; among stars';
		result = getDescription('pF;cS;R;slbM;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; round; very gradually very little/long brighter middle; star of 9th magnitude preceding';
		result = getDescription('F;L;R;vgvlbM;*9p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; round; south preceding of 2';
		result = getDescription('pF;R;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'north following of 2';
		result = getDescription('nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; small; round; very suddenly/south much brighter middle; star of 1th magnitude 0 following';
		result = getDescription('vB;S;R;vsmbM;*1Of');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; considerably elongated/extended; pretty suddenly brighter middle; star of 7th magnitude 8 arcminutes following';
		result = getDescription('pB;pS;cE;psbM;*7 8\' f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; round; very gradually little/long brighter middle';
		result = getDescription('F;L;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty small; little/long elongated/extended; pretty suddenly brighter middle stars';
		result = getDescription('cB;pS;lE;psbM*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; elongated/extended';
		result = getDescription('pB;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; pretty suddenly little/long brighter middle; stars following 2 arcminutes';
		result = getDescription('cF;S;R;pslbM;*f2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; preceding of double nebula';
		result = getDescription('vF;S;R;p of D neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; following pretty faint double nebula';
		result = getDescription('pF;S;f pF Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; very little/long elongated/extended; star of 7th magnitude north following 10 arcminutes';
		result = getDescription('vF;pL;vlE;*7 nf 10\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; elongated in position angle 55 degrees; extremely/excessively suddenly/south bright middle Nucleus or to a Nucleus; south preceding irregular';
		result = getDescription('vB;vL;E55;esBMN;spir');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; 3 stars following in a line';
		result = getDescription('eF;pL;3*f in a line');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; very little/long brighter middle';
		result = getDescription('vF;pL;R;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; suddenly/south little/long bright middle';
		result = getDescription('pB;S;R;slBM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; very difficult';
		result = getDescription('eeF;S;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'large; faint; supernova; very much elongated/extended; edge on spiral';
		result = getDescription('L;F;SN;vmE;edge on spiral');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually little/long brighter middle';
		result = getDescription('vF;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; pretty suddenly little/long brighter middle';
		result = getDescription('pF;S;R;pslbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle; stars south following';
		result = getDescription('vF;S;R;bM;* sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; large; suddenly/south stars involved/involving';
		result = getDescription('eF;L;s* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended; gradually very little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;S;E;gvlbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably small; round; pretty suddenly brighter middle; resolvable (mottled not resolved); star of 9.5 magnitude south preceding';
		result = getDescription('cB;cS;R;psbM;r;* 9.5 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; pretty suddenly brighter middle stars; resolvable (mottled not resolved)';
		result = getDescription('B;S;R;psbM*;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; very gradually little/long brighter middle';
		result = getDescription('vF;pS;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; irregular round; very gradually little/long brighter middle';
		result = getDescription('vF;iR;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; round; star of 13th magnitude preceding 100 arcseconds';
		result = getDescription('eeF;vS;R;*13 p 100\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually brighter middle';
		result = getDescription('pF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; irregular round; gradually little/long brighter middle; star of 7th magnitude following';
		result = getDescription('pF;pS;iR;glbM;* 7 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; round; gradually very little/long brighter middle';
		result = getDescription('cF;pL;R;gvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; much elongated/extended 121; gradually brighter middle';
		result = getDescription('pB;pS;mE121;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very little/long compressed; approximately 20 scattered stars';
		result = getDescription('Cl;vlC;appx 20 sc *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; gradually little/long brighter middle';
		result = getDescription('vF;pL;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; star of 12th magnitude attached south preceding';
		result = getDescription('vF;*12 att sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; round; gradually little/long brighter middle; resolvable (mottled not resolved); preceding of 2';
		result = getDescription('pB;cL;R;glbM;r;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; round; suddenly/south little/long bright middle; following of 2';
		result = getDescription('vF;cS;R;slBM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; pretty suddenly little/long brighter middle';
		result = getDescription('pB;pL;R;pslbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; considerably elongated/extended; little/long brighter middle';
		result = getDescription('vF;pS;cE;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'brighter middle';
		result = getDescription('bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; little/long elongated/extended; gradually brighter middle';
		result = getDescription('pB;S;lE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended; preceding of 2';
		result = getDescription('vF;S;E;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; very little/long elongated/extended; very gradually brighter middle; following of 2';
		result = getDescription('F;pL;vlE;vgbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; very little/long elongated/extended; gradually pretty much brighter middle; bright stars preceding 1 arcminutes';
		result = getDescription('pF;S;vlE;gpmbM;B*p1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; very much elongated/extended 0; star of 13th magnitude attached north';
		result = getDescription('eeF;vS;vmE0;*13 att n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; round; brighter middle';
		result = getDescription('cF;cS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; round; little/long brighter middle; star of 11th magnitude following';
		result = getDescription('eF;R;lbM;*11f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; pretty suddenly brighter middle; among stars';
		result = getDescription('pB;S;R;psbM;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; brighter middle; 2 stars 12 north';
		result = getDescription('pF;S;R;bM;2*12n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; bright triple star south following';
		result = getDescription('eeF;S;R;B*** sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; considerably small; round; pretty gradually much brighter middle';
		result = getDescription('B;cS;R;pgmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; little/long elongated/extended; gradually brighter middle';
		result = getDescription('pB;pL;lE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; considerably small; considerably elongated/extended; pretty suddenly much brighter middle; star of 10th magnitude following';
		result = getDescription('B;cS;cE;psmbM;*10f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty small; elongated/extended; much brighter middle';
		result = getDescription('vB;pS;E;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'large; faint; brighter middle';
		result = getDescription('L;F;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; round';
		result = getDescription('eeF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; very much elongated/extended 91; stars suddenly/south';
		result = getDescription('eF;pL;vmE91;*s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably large; very little/long elongated/extended; very gradually pretty much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pF;cL;vlE;vgpmbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; very much elongated/extended 127; gradually; pretty suddenly little/long brighter middle';
		result = getDescription('pB;pL;vmE127;g;pslbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; very small double star north following';
		result = getDescription('vF;S;R;vS** nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably small; little/long elongated/extended; very gradually little/long brighter middle';
		result = getDescription('eF;cS;lE;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; pretty much elongated/extended; very gradually brighter middle';
		result = getDescription('pB;L;pmE;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round; south preceding of 2';
		result = getDescription('eF;pL;R;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; little/long elongated/extended; gradually brighter middle; north following of 2';
		result = getDescription('pB;pS;lE;gbM;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; very gradually brighter middle; star of 9th magnitude following';
		result = getDescription('pB;S;R;vgbM;*9f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably small; round; brighter middle';
		result = getDescription('pF;cS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; round; gradually pretty suddenly much brighter middle; (= 7140)';
		result = getDescription('F;L;R;gpsmbM;(=7140)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; little/long elongated/extended; very gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;pL;lE;vgbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; little/long elongated/extended; much brighter middle';
		result = getDescription('pB;S;lE;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; pretty suddenly brighter middle';
		result = getDescription('pB;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably large; considerably elongated/extended 150 degrees; considerably brighter middle';
		result = getDescription('F;cL;cE 150 degrees; cbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty small; very gradually brighter middle';
		result = getDescription('cF;pS;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; small; round; among stars';
		result = getDescription('cB;S;R;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; pretty much brighter middle';
		result = getDescription('pB;S;R;pmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended; very gradually brighter middle';
		result = getDescription('vF;S;lE;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; suddenly/south much brighter middle';
		result = getDescription('pF;S;R;smbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; pretty suddenly little/long brighter middle; star of 11th magnitude preceding 3 arcminutes';
		result = getDescription('vF;S;R;pslbM;*11 p 3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; considerably elongated/extended; gradually pretty suddenly little/long brighter middle';
		result = getDescription('pB;L;cE;gpslbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually brighter middle';
		result = getDescription('pF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; elongated in position angle 90 degrees; pretty suddenly brighter middle';
		result = getDescription('F;vS;E90;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; pretty suddenly little/long brighter middle; star of 10th magnitude preceding 22 suddenly/south';
		result = getDescription('eF;vS;R;pslbM;*10 p 22s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; considerably elongated/extended; very gradually little/long brighter middle; easily resolvable';
		result = getDescription('F;cS;cE;vglbM;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; considerably rich; preceding compressed; stars 9th magnitude and fainter th to 12th magnitude';
		result = getDescription('Cl;L;cRi;pC;st9...12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; little/long elongated/extended; resolvable (mottled not resolved); among 3 stars';
		result = getDescription('eF;pS;lE;r;am 3st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'fine cluster; 6 branches; stars 12th magnitude and fainter- 15 magnitude';
		result = getDescription('fine cl;6 branches;st 12-15 mag');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; little/long brighter middle; north preceding of 2';
		result = getDescription('vF;vS;R;lbM;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; little/long brighter middle; south following of 2';
		result = getDescription('F;vS;R;lbM;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; easily resolvable';
		result = getDescription('eF;S;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; poor; little/long compressed; stars very large';
		result = getDescription('Cl;L;P;lC;st vL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; compressed; stars extremely/excessively small';
		result = getDescription('Cl;C;st eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; stars attached north; preceding of 2';
		result = getDescription('eF;eS;* att n;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long brighter middle; following of 2';
		result = getDescription('vF;S;lbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster of nebula stars';
		result = getDescription('Cl of neb stars');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; much brighter middle';
		result = getDescription('vF;vS;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; much elongated/extended 165';
		result = getDescription('vF;S;mE165');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; much elongated/extended';
		result = getDescription('vF;pS;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; much brighter middle';
		result = getDescription('F;vS;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar';
		result = getDescription('stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; round; much brighter middle';
		result = getDescription('vS;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; much brighter middle';
		result = getDescription('pF;vS;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; much brighter middle';
		result = getDescription('vF;vS;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; diffused; between 3 stars';
		result = getDescription('eF;pL;dif;bet 3*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - extremely/excessively faint; pretty large; round; north bright middle at 150X; UHC helps';
		result = getDescription('13\'\'-eF; pL; R; nBM at 150X; UHC helps');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; little/long compressed; stars 12th magnitude and fainter th to 13th magnitude';
		result = getDescription('Cl;P;lC;st12...13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; irregular round; little/long compressed; stars very small';
		result = getDescription('Cl;iR;lC;st vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; little/long elongated/extended; brighter middle';
		result = getDescription('pB;S;lE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; little/long brighter middle';
		result = getDescription('eF;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very poor';
		result = getDescription('Cl;vP');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; brighter middle';
		result = getDescription('eF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; round; stellar; double stars preceding';
		result = getDescription('vF;cS;R;stellar;D* p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended; brighter middle';
		result = getDescription('F;S;E;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; 2872 south following 1 arcminutes';
		result = getDescription('eF;2872 sf 1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; brighter middle';
		result = getDescription('pF;pS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; north of elongated/extended nebula';
		result = getDescription('vF;vS;R;n of E neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; much elongated/extended';
		result = getDescription('vF;pL;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; north following 2874';
		result = getDescription('eF;nf 2874');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; elongated/extended';
		result = getDescription('F;pL;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; elongated/extended 90 degree';
		result = getDescription('eF;vS;E 90 deg');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; elongated/extended; easily resolvable; 2 or 3 stars involved/involving';
		result = getDescription('vF;E;er;2 or 3* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; very suddenly/south brighter middle star of 12th magnitude';
		result = getDescription('vF;S;R;vsbM *12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; star of 17th magnitude attached';
		result = getDescription('F;vS;R;*17 att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; little/long elongated/extended; gradually brighter middle';
		result = getDescription('F;pS;lE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; very large; elongated/extended; gradually much brighter middle; resolvable (mottled not resolved); south preceding of 2';
		result = getDescription('cB;vL;E;gmbM;r;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably large; round; pretty suddenly brighter middle; resolvable (mottled not resolved); north following of 2';
		result = getDescription('vF;cL;R;psbM;r;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'no description';
		result = getDescription('no description');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably large; round; pretty suddenly brighter middle; resolvable (mottled not resolved); north following of 2';
		result = getDescription('vF;cL;R;psbM;r;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; gradually brighter middle; preceding of 2';
		result = getDescription('F;pL;R;gbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; 2911 south preceding';
		result = getDescription('eF;2911 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular round';
		result = getDescription('vF;pL;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle Nucleus or to a Nucleus; following of 2';
		result = getDescription('vF;S;R;bMN;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small';
		result = getDescription('F;pS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; very little/long elongated/extended';
		result = getDescription('F;S;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; round; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;cS;R;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle';
		result = getDescription('vF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; little/long brighter middle';
		result = getDescription('F;pL;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; little/long elongated/extended; very little/long brighter middle; 1 stars of 3';
		result = getDescription('eF;vS;lE;vlbM;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; 2 north diameter of 3';
		result = getDescription('eF;S;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('eF;vS;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; little/long elongated/extended; south preceding of 2';
		result = getDescription('F;vS;lE;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; north following of 2';
		result = getDescription('eF;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long elongated/extended; brighter middle; triangle stars north following';
		result = getDescription('vF;S;vlE;bM;triangle st nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; 5 arcminutes north of 2939';
		result = getDescription('vF;S;5\' n of 2939');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; little/long elongated/extended; preceding of 2';
		result = getDescription('eF;vS;lE;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular round; brighter middle; following of 2';
		result = getDescription('F;S;iR;bM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended';
		result = getDescription('vF;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; very gradually brighter middle';
		result = getDescription('vF;pL;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; little/long brighter middle';
		result = getDescription('F;vS;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; double?';
		result = getDescription('vF;double?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; suspected';
		result = getDescription('eeF;suspected');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; north of 2';
		result = getDescription('vF;S;R;n of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; very little/long brighter middle';
		result = getDescription('vF;pS;R;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; very large; little/long elongated/extended; very gradually brighter middle; south preceding of 3';
		result = getDescription('B;vL;lE;vgbM;sp of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; little/long elongated/extended; very gradually little/long brighter middle; 2 north diameter of 3';
		result = getDescription('pB;pL;lE;vglbM;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; north following of 3';
		result = getDescription('F;nf of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; brighter middle';
		result = getDescription('eF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; preceding 2991';
		result = getDescription('eF;p 2991');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; brighter middle; south preceding south preceding 2';
		result = getDescription('F;vS;bM;sp sp 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle; north following of 2';
		result = getDescription('F;S;R;bM;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; extremely/excessively small; stellar';
		result = getDescription('eeF;eS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; preceding of 2';
		result = getDescription('vF;S;R;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; following of 2';
		result = getDescription('eF;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; little/long elongated/extended 0; resolvable (mottled not resolved)';
		result = getDescription('eF;pS;lE 0;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('eF;pL;E;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; little/long elongated/extended; very difficult';
		result = getDescription('eeF;pS;lE;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; suddenly/south brighter middle star of 12th magnitude; between 2 bright stars';
		result = getDescription('F;S;sbM *12;bet 2 B st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; round; very gradually little/long brighter middle; partially resolved some stars seen; 2 bright stars south preceding';
		result = getDescription('F;L;R;vglbM;rr;2 B st sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; faint stars very near';
		result = getDescription('vF;vS;F * vnr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long elongated/extended; gradually brighter middle';
		result = getDescription('vF;S;vlE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; very little/long elongated/extended; extremely/excessively round';
		result = getDescription('vF;cS;vlE;eR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; gradually much brighter middle Nucleus or to a Nucleus; among 3 stars';
		result = getDescription('pB;pS;R;gmbMN;am 3 st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; elongated/extended 106; gradually brighter middle; star of 9th magnitude 4 arcminutes elongated/extended';
		result = getDescription('pB;pL;E 106;gbM;*9 4\' E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; extremely/excessively small; stellar (?)';
		result = getDescription('eeF;eS;stellar (?)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula star of 13th magnitude';
		result = getDescription('neb *13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very very faint; star of 14th magnitude attached; star of 11th magnitude following';
		result = getDescription('vvF;*14 att;*11 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; brighter middle; star of 9th magnitude 30 arcseconds south following';
		result = getDescription('F;bM;*9 30\'\' sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; elongated/extended 85; pretty suddenly brighter middle Nucleus or to a Nucleus';
		result = getDescription('pB;S;E 85;psbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; little/long elongated/extended';
		result = getDescription('eF;eS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; irregular round; star of 8th magnitude 148; 112 arcseconds';
		result = getDescription('pF;pL;iR;*8 148;112\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; gradually little/long brighter middle; star of 9.5 magnitude north preceding';
		result = getDescription('pF;pL;glbM;*9.5 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; pretty suddenly brighter middle; star of 5th magnitude south following';
		result = getDescription('eF;S;psbM;*5 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably small; very little/long elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('eF;cS;vlE;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; pretty much elongated/extended; gradually brighter middle';
		result = getDescription('pB;pS;pmE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; disc';
		result = getDescription('vF;disc');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; very little/long elongated/extended; round; stars involved/involving';
		result = getDescription('eF;pL;vlE;R;st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; little/long brighter middle';
		result = getDescription('F;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably large; round; very gradually little/long brighter middle; resolvable (mottled not resolved); small stars involved/involving';
		result = getDescription('pF;cL;R;vglbM;r;S* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; star of 11th magnitude preceding';
		result = getDescription('pB;pL;R;*11 p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; pretty suddenly brighter middle';
		result = getDescription('cF;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; gradually much brighter middle';
		result = getDescription('pF;pL;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; gradually brighter middle; several faint stars near';
		result = getDescription('pF;vS;gbM;sev F st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; elongated/extended';
		result = getDescription('vF;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very very faint; much elongated/extended';
		result = getDescription('vvF;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; elongated/extended; pretty suddenly brighter middle Nucleus or to a Nucleus';
		result = getDescription('B;pS;E;psbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; very little/long elongated/extended; pretty suddenly little/long brighter middle; star of 9.5 magnitude; 354; 80 arcseconds';
		result = getDescription('B;S;vlE;pslbM;*9.5;354;80\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; little/long elongated/extended';
		result = getDescription('eeF;pS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; gradually brighter middle';
		result = getDescription('eF;pL;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; has a stars';
		result = getDescription('F;S;R;has a *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; resolvable (mottled not resolved)';
		result = getDescription('vF;vS;R;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; brighter middle';
		result = getDescription('vF;pS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; much elongated/extended; ray';
		result = getDescription('eF;mE;ray');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; little/long brighter middle; partially resolved some stars seen; binary?';
		result = getDescription('F;lbM;rr;bin?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; round; double';
		result = getDescription('pB;cL;R;D');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; disc';
		result = getDescription('vF;disc');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; round; double';
		result = getDescription('pB;cL;R;D');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; suddenly/south brighter middle star of 14th magnitude; star of 9th magnitude - 10 suddenly/south 19 arcseconds';
		result = getDescription('pF;pS;sbM *14;*9-10 s 19\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; star of 9th magnitude involved/involving near middle';
		result = getDescription('vF;*9 inv nr M');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; pretty suddenly brighter middle';
		result = getDescription('pB;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round';
		result = getDescription('vF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; 3 bright stars south preceding';
		result = getDescription('vF;pL;3 B * sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; elongated/extended; gradually little/long brighter middle';
		result = getDescription('cF;vS;E;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; gradually little/long brighter middle; double stars following';
		result = getDescription('F;pL;R;glbM;D* f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; much elongated/extended';
		result = getDescription('F;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; double stars preceding 24 arcseconds; suddenly/south 4arcminutes';
		result = getDescription('F;pL;D* p 24\'\';s 4\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably large; round; very gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('eF;cL;R;vgbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; round; pretty much brighter middle; resolvable (mottled not resolved); among bright stars';
		result = getDescription('cF;cS;R;pmbM;r;am B st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; small; little/long elongated/extended 53; pretty suddenly brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cB;S;lE 53;psbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; much brighter middle Nucleus or to a Nucleus = star of 13th magnitude; star of 11th magnitude near';
		result = getDescription('B;pS;mbMN=*13;*11 nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; very little/long elongated/extended; gradually little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;vS;vlE;glbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; cluster; not nebulous';
		result = getDescription('vS;Cl;not nebs');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended 130';
		result = getDescription('vF;S;lE 130');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small';
		result = getDescription('eF;eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably large; elongated/extended; very gradually brighter middle; star of 7th magnitude preceding 10 arcseconds';
		result = getDescription('F;cL;E;vgbM;*7 p 10\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint (if anything)';
		result = getDescription('eeF (if anything)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very large; round; very gradually very little/long brighter middle; easily resolvable';
		result = getDescription('cF;vL;R;vgvlbM;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; round; pretty gradually much brighter middle Nucleus or to a Nucleus';
		result = getDescription('B;L;R;pgmbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; brighter middle Nucleus or to a Nucleus';
		result = getDescription('pB;S;R;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; brighter middle; star of 9th magnitude suddenly/south 150 arcseconds';
		result = getDescription('vF;pS;R;bM;*9 s 150\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; much brighter middle';
		result = getDescription('F;S;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;pS;R;lbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; irregular round; little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;pS;iR;lbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; irregular round; very gradually little/long brighter middle; resolvable (mottled not resolved); 1 stars of 3';
		result = getDescription('pB;cL;iR;vglbM;r;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; little/long elongated/extended; very suddenly/south very much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vB;vL;lE;vsvmbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; very little/long elongated/extended; gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cB;pL;vlE;gbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; considerably large; little/long elongated/extended; suddenly/south very much brighter middle bright Nucleus or to a Nucleus';
		result = getDescription('vB;cL;lE;svmbMBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; considerably large; round; pretty suddenly brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vB;cL;R;psbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; round; 2 north following of 3';
		result = getDescription('eF;R;2nf of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; round; pretty suddenly much brighter middle; 2 north diameter of 3';
		result = getDescription('vB;L;R;psmbM;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('F;R;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; elongated/extended preceding following; very gradually little/long brighter middle; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('F;L;E pf;vglbM;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; between 2 stars; near';
		result = getDescription('F;S;R;bet 2 st;nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small';
		result = getDescription('F;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; extremely/excessively small; almost stellar; close to small stars';
		result = getDescription('F;eS;alm stell;close to S*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; little/long elongated/extended 135; suddenly/south much brighter middle Nucleus or to a Nucleus';
		result = getDescription('B;S;lE 135;smbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; almost stellar';
		result = getDescription('eF;vS;alm stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; almost stellar; small stars very near';
		result = getDescription('F;vS;R;alm stell;S* vnr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round';
		result = getDescription('F;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round';
		result = getDescription('eF;eS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula; no diameter extremely/excessively scattered resolvable (mottled not resolved)';
		result = getDescription('neb;no descr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended; gradually little/long brighter middle';
		result = getDescription('vF;S;lE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; round';
		result = getDescription('pF;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; double stars north';
		result = getDescription('pF;S;R;D* n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; very gradually little/long brighter middle';
		result = getDescription('F;pS;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very large; round; very gradually brighter middle';
		result = getDescription('vF;vL;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; almost stellar';
		result = getDescription('vF;eS;alm stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; almost stellar';
		result = getDescription('eeF;vS;alm stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively small';
		result = getDescription('eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright';
		result = getDescription('pB');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; little/long elongated/extended 120; gradually brighter middle';
		result = getDescription('pB;pL;lE 120;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; round';
		result = getDescription('eeF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; pretty much elongated/extended';
		result = getDescription('eF;vS;pmE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very large; very gradually very little/long brighter middle; bright double star south preceding';
		result = getDescription('eF;vL;vgvlbM;B ** sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; little/long elongated/extended; north preceding of 2';
		result = getDescription('pF;lE;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; elongated/extended; gradually brighter middle; resolvable (mottled not resolved); south following of 2';
		result = getDescription('pF;S;E;gbM;r;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2 or 3 small stars and nebula';
		result = getDescription('2 or 3 S st and neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; round; no stars near';
		result = getDescription('pB;R;no * nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint nebula 5 arcminutes north following NGC 3460';
		result = getDescription('F neb 5\' nf NGC 3460');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; very little/long elongated/extended; pretty suddenly brighter middle';
		result = getDescription('vF;vS;vlE;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; star of 9th magnitude 90; preceding of 2';
		result = getDescription('vF;*9 90;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; very suddenly/south much brighter middle star of 12th magnitude; following of 2';
		result = getDescription('vF;R;vsmbM *12;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; elongated/extended; between 2 stars';
		result = getDescription('vF;E;bet 2 st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; suddenly/south of NGC 3473';
		result = getDescription('vF;pS;R;s of NGC 3473');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; almost stellar';
		result = getDescription('eF;vS;alm stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; stellar';
		result = getDescription('S;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; extremely/excessively small; stellar';
		result = getDescription('eeF;eS;stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; gradually brighter middle; star of 13th magnitude 1 arcminutes north (2arcminutes suddenly/south ? )';
		result = getDescription('vF;R;gbM;*13 1\' n (2\' s?)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; round; gradually little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;L;R;glbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; little/long elongated/extended 80; suddenly/south much brighter middle Nucleus or to a Nucleus';
		result = getDescription('vB;pL;lE 80;smbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably small; round; brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;cS;R;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; very difficult';
		result = getDescription('eeF;pS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; star of 9.5 magnitude preceding 20 arcseconds; 1arcminutes suddenly/south';
		result = getDescription('pF;S;*9.5 p 20\'\';1\' s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; NGC 3495 6 arcminutes suddenly/south';
		result = getDescription('vS;NGC 3495 6\' s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; much elongated/extended';
		result = getDescription('vF;pL;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large';
		result = getDescription('eF;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; much elongated/extended north suddenly/south; gradually brighter middle; 3 arcminutes long';
		result = getDescription('vF;mE ns;gbM;3\' long');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; round; very gradually very little/long brighter middle';
		result = getDescription('vF;cS;R;vgvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; round; suddenly/south brighter middle small stars; star of 9th magnitude attached 25';
		result = getDescription('cF;pL;R;sbMS *;*9 att 25');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended ?';
		result = getDescription('eF;S;lE?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably large; much elongated/extended 140; very suddenly/south much brighter middle Nucleus or to a Nucleus';
		result = getDescription('cB;cL;mE 140;vsmbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended; pretty suddenly brighter middle; 2 stars north preceding in line';
		result = getDescription('F;S;lE;psbM;2 st np in line');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; little/long elongated/extended';
		result = getDescription('pF;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very much elongated/extended 50';
		result = getDescription('eF;vmE 50');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended 50; star of 11th magnitude at south preceding end';
		result = getDescription('E 50;*11 at sp end');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; round; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cF;vS;R;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; star of 9th magnitude north preceding 3 arcminutes';
		result = getDescription('vF;*9 np 3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; round; south preceding of 2';
		result = getDescription('eeF;vS;R;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; north following of 2';
		result = getDescription('vF;R;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended; very little/long brighter middle';
		result = getDescription('F;S;lE;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; little/long elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('eF;pS;lE;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle';
		result = getDescription('F;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; round; suddenly/south brighter middle; resolvable (mottled not resolved)';
		result = getDescription('eF;R;sbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; star of 8th magnitude much 2 arcminutes north';
		result = getDescription('pF;pL;*8m 2\'n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle';
		result = getDescription('vF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; star of 14th magnitude following';
		result = getDescription('vF;*14 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; 4 arcseconds following Delta Leo (and 8 arcminutes south)';
		result = getDescription('vF;cS;4 sec foll Delta Leo (& 8\' south)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; pretty much elongated/extended 60';
		result = getDescription('eF;S;pmE 60');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; considerably large; elongated/extended 90; pretty suddenly much brighter middle';
		result = getDescription('B;cL;E 90;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; round; gradually little/long brighter middle';
		result = getDescription('pF;L;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; stellar; stars north';
		result = getDescription('F;vS;stell;* n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; round; pretty gradually much brighter middle';
		result = getDescription('B;pS;R;pgmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; almost stellar';
		result = getDescription('vF;pS;alm stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; almost stellar';
		result = getDescription('eeF;vS;alm stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; south preceding of 3';
		result = getDescription('F;S;R;sp of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; round; very much brighter middle; 2 north diameter of 3';
		result = getDescription('vB;L;R;vmbM;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; round; pretty suddenly brighter middle; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('B;pL;R;psbM;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; little/long elongated/extended; much brighter middle';
		result = getDescription('pB;S;lE;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably small; irregular round; pretty suddenly much brighter middle; star of 10th magnitude north preceding 3 arcminutes';
		result = getDescription('pF;cS;iR;psmbM;*10 np 3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; brighter middle';
		result = getDescription('pF;S;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; suddenly/south much brighter middle; stellar; preceding of 2';
		result = getDescription('cF;vS;smbM;stellar;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large';
		result = getDescription('eF;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty large; diffused; star of 10th magnitude - 11 north following 2 arcminutes';
		result = getDescription('pL;dif;*10-11 nf 2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; following of 2';
		result = getDescription('vF;S;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; very large; much elongated/extended 165; gradually brighter middle bright Nucleus or to a Nucleus';
		result = getDescription('B;vL;mE 165;gbMBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; very little/long elongated/extended; suddenly/south brighter middle';
		result = getDescription('B;S;vlE;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; stars involved/involving';
		result = getDescription('pB;* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; very large; much elongated/extended 150; much brighter middle; 2 stars north preceding';
		result = getDescription('B;vL;mE 150;mbM;2 st np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very large; very much elongated/extended 102';
		result = getDescription('pB;vL;vmE 102');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; suddenly/south much brighter middle Nucleus or to a Nucleus';
		result = getDescription('pB;S;R;smbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; elongated/extended; brighter middle';
		result = getDescription('pB;S;E;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; 2 stars near';
		result = getDescription('vF;S;R;2 st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; large; round; very gradually very little/long brighter middle';
		result = getDescription('cF;L;R;vgvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; round; pretty suddenly brighter middle';
		result = getDescription('B;pL;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; almost stellar; NGC 3640 2 arcminutes north';
		result = getDescription('F;vS;alm stell;NGC 3640 2\' n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; very little/long brighter middle; 15 arcminutes following NGC 3626';
		result = getDescription('pF;S;R;vlbM;15\' f NGC 3626');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint nebulous star';
		result = getDescription('eF neb*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably large; little/long elongated/extended; gradually brighter middle; south preceding of 2';
		result = getDescription('cF;cL;lE;gbM;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably large; round; resolvable (mottled not resolved); very near very bright stars';
		result = getDescription('eF;cL;R;r;v nr vB*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; gradually brighter middle; north following of 2';
		result = getDescription('vF;pS;R;gbM;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; round; brighter middle; north preceding of 2';
		result = getDescription('cF;vS;R;bM;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; south following of 2';
		result = getDescription('vF;vS;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; between 2 stars';
		result = getDescription('eF;S;R;bet 2 st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; irregular round; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;pS;iR;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; little/long elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('cF;S;lE;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; attached to star of 13th magnitude';
		result = getDescription('vF;S;att to *13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; binuclear';
		result = getDescription('pF;biN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; elongated/extended 90; star of 6th magnitude following 34 arcseconds; 5arcminutes north';
		result = getDescription('F;E 90;*6 f 34\'\';5\' n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; pretty suddenly brighter middle; star of 12th magnitude north following';
		result = getDescription('vF;S;R;psbM;*12 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; round; brighter middle';
		result = getDescription('B;pS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; elongated/extended; very gradually brighter middle';
		result = getDescription('pB;pL;E;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; very little/long elongated/extended; very gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;L;vlE;vgbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; little/long elongated/extended; brighter middle';
		result = getDescription('pB;pL;lE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; little/long elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('F;pS;lE;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; much elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('F;mE;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; elongated/extended 90';
		result = getDescription('eF;vS;E 90');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; little/long elongated/extended';
		result = getDescription('pF;pL;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; very suddenly/south much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pF;pL;R;vsmbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually brighter middle';
		result = getDescription('vF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small';
		result = getDescription('eF;eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; star of 7th magnitude - 8 north following 5 arcminutes';
		result = getDescription('F;S;*7-8 nf 5\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; round; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('F;cS;R;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; north preceding of 2';
		result = getDescription('vF;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; south following of 2';
		result = getDescription('vF;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle';
		result = getDescription('F;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; between 2 stars 12th magnitude and fainter';
		result = getDescription('vF;bet 2 st 12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; star of 9th magnitude 1 arcminutes south following';
		result = getDescription('F;S;R;*9 1\' sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; little/long brighter middle';
		result = getDescription('eF;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; brighter middle; star of 8.5 magnitude 3 arcminutes following';
		result = getDescription('pB;S;R;bM;*8.5 3\' f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle';
		result = getDescription('vF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; stellar';
		result = getDescription('vF;eS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; brighter middle';
		result = getDescription('vF;S;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round';
		result = getDescription('pB;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round';
		result = getDescription('pB;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round';
		result = getDescription('pB;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('vF;S;E;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; round; considerably brighter middle; 1 stars of 3 in line';
		result = getDescription('pB;R;cbM;1st of 3 in line');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; elongated/extended 45';
		result = getDescription('F;L;E 45');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; 2 north diameter of 3 in line';
		result = getDescription('pB;pL;2nd of 3 in line');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; 3 resolvable (mottled not resolved) diameter of 3 in line';
		result = getDescription('vF;R;3rd of 3 in line');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; round; pretty suddenly brighter middle';
		result = getDescription('cF;cS;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle';
		result = getDescription('vF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; gradually much brighter middle';
		result = getDescription('vF;vS;R;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; round; brighter middle';
		result = getDescription('vF;eS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; star of 15th magnitude preceding';
		result = getDescription('vF;vS;R;*15 p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; pretty much elongated/extended; suddenly/south brighter middle; 2 small stars following; 1 stars of 3';
		result = getDescription('cF;vS;pmE;sbM;2 S st f;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; little/long elongated/extended; stellar; resolvable (mottled not resolved)';
		result = getDescription('F;cS;lE;stellar;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; round; preceding of 2';
		result = getDescription('cF;R;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; elongated/extended; pretty gradually little/long brighter middle; resolvable (mottled not resolved); following of 2';
		result = getDescription('F;pS;E;pglbM;r;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; brighter middle; resolvable (mottled not resolved); 2 north diameter of 3';
		result = getDescription('pF;pL;R;bM;r;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; resolvable (mottled not resolved); 2 very bright stars preceding; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('vF;pS;r;2 vB st p;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably small; round; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cB;cS;R;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; star of 9th magnitude - 10 suddenly/south 5 arcminutes';
		result = getDescription('F;pL;*9-10 s 5\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; very little/long elongated/extended';
		result = getDescription('B;L;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; round; 1 stars of 3; star of 6th magnitude south following 3 arcminutes';
		result = getDescription('cF;vS;R;1st of 3;*6 sf 3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; nebulous star; preceding NGC 3815';
		result = getDescription('vS;nebs*;p NGC 3815');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('cF;S;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; brighter middle';
		result = getDescription('F;S;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round (very faint stars ? )';
		result = getDescription('vF;S;R (vf *?)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; 1 stars of 4';
		result = getDescription('F;1st of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; 2 north diameter of 4';
		result = getDescription('vF;2nd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; NGC 3819 suddenly/south';
		result = getDescription('eF;vS;NGC 3819 s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; round; brighter middle; between 2 stars';
		result = getDescription('vF;cS;R;bM;bet 2 st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; pretty suddenly brighter middle; stellar';
		result = getDescription('pF;S;R;psbM;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long brighter middle';
		result = getDescription('F;S;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; diffused';
		result = getDescription('vF;S;dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; 2 suspected nebula near';
		result = getDescription('vF;pL;2 suspected neb nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; suddenly/south little/long brighter middle Nucleus or to a Nucleus star of 13th magnitude';
		result = getDescription('vF;vS;slbMN *13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; 1 stars of 5';
		result = getDescription('cF;S;R;1st of 5');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; little/long brighter middle';
		result = getDescription('vF;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended';
		result = getDescription('F;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; 2 north diameter of 5';
		result = getDescription('cF;S;R;2nd of 5');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; very gradually little/long brighter middle; 3 resolvable (mottled not resolved) diameter of 5';
		result = getDescription('F;S;R;vglbM;3rd of 5');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended';
		result = getDescription('vF;pS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; 4th of 5';
		result = getDescription('vF;pS;4th of 5');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; 5th of 5';
		result = getDescription('eF;vS;R;5th of 5');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - 1 galaxy pretty faint; pretty large; round 4 others very faint; small 10 others near';
		result = getDescription('13\'\'-1 gal pF;pL;R 4 others vF;S 10 others nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; round; brighter middle';
		result = getDescription('S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; much brighter middle';
		result = getDescription('vF;vS;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; resolvable (mottled not resolved)';
		result = getDescription('vF;vS;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; little/long brighter middle; resolvable (mottled not resolved) ?';
		result = getDescription('eF;vS;R;lbM;r?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle';
		result = getDescription('F;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; star of 17th magnitude north';
		result = getDescription('vF;vS;R;*17 n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular resolvable (mottled not resolved) round; much brighter middle; suddenly/south of 2';
		result = getDescription('F;S;irrR;mbM;s of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; much brighter middle; north of 2';
		result = getDescription('vF;vS;R;mbM;n of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular round; pretty suddenly brighter middle';
		result = getDescription('F;S;iR;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; suddenly/south much brighter middle stars';
		result = getDescription('B;S;R;smbM *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended; NGC 3875 south following';
		result = getDescription('vF;pS;lE;NGC 3875 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; resolvable (mottled not resolved)';
		result = getDescription('vF;vS;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; irregular round; gradually brighter middle; resolvable (mottled not resolved); star of 7th magnitude south preceding 6 arcminutes';
		result = getDescription('cF;S;iR;gbM;r;*7 sp 6\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably large';
		result = getDescription('vF;cL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint';
		result = getDescription('F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; very little/long elongated/extended 0; brighter middle Nucleus or to a Nucleus';
		result = getDescription('B;pL;vlE 0;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; little/long elongated/extended; very gradually little/long brighter middle';
		result = getDescription('F;pS;lE;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula; following of 2';
		result = getDescription('neb;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; much brighter middle';
		result = getDescription('F;vS;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; round; much brighter middle; star of 10th magnitude - 11 north 50 arcseconds';
		result = getDescription('S;R;mbM;*10-11 n 50\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; round; suddenly/south much brighter middle';
		result = getDescription('pB;R;smbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; preceding of 2';
		result = getDescription('vF;S;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; pretty gradually brighter middle';
		result = getDescription('F;pL;R;pgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; very little/long elongated/extended; easily resolvable; stars near';
		result = getDescription('eF;eS;vlE;er;st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small';
		result = getDescription('pF;pS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; stars faint; very compressed';
		result = getDescription('Cl;S;st F;vC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; little/long elongated/extended';
		result = getDescription('pF;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; round';
		result = getDescription('eF;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; round';
		result = getDescription('vF;cS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; round';
		result = getDescription('vF;cS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; elongated/extended; star of 8th magnitude preceding 24 arcseconds';
		result = getDescription('pF;pS;E;*8 p 24\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; pretty suddenly brighter middle';
		result = getDescription('pF;pS;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very little/long brighter middle; diffused';
		result = getDescription('vF;vlbM;dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; irregular elongated/extended; little/long brighter middle; double star preceding';
		result = getDescription('F;pS;iE;lbM;**p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; stellar';
		result = getDescription('vF;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; very little/long elongated/extended';
		result = getDescription('vF;cS;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; round';
		result = getDescription('eF;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended; star of 10th magnitude north following attached';
		result = getDescription('vF;S;E;*10 nf att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; irregular round; brighter middle; star of 10th magnitude; 65; 3 arcminutes';
		result = getDescription('pB;L;iR;bM;*10;65;3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; star of 10th magnitude 1 arcminutes south following (requires verification)';
		result = getDescription('eF;eS;*10 1\' sf (requires verification)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; round; pretty suddenly brighter middle';
		result = getDescription('cF;cS;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; much elongated/extended';
		result = getDescription('F;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle stars; preceding of 2';
		result = getDescription('vF;S;R;bM *;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; elongated/extended; 3 stars near';
		result = getDescription('vF;pS;E;3 st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; 2 stars following';
		result = getDescription('vF;pL;R;2 st f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; elongated/extended 25; between 2 stars';
		result = getDescription('pF;vS;E 25;bet 2 st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended; star of 8th magnitude 2 arcminutes following; NGC 4005 irregular suddenly/south south following';
		result = getDescription('vF;vS;lE;*8 2\' f;NGC 4005 is sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; north of 2';
		result = getDescription('vF;vS;R;n OF 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; suddenly/south of 2';
		result = getDescription('vF;vS;R;s OF 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; star of 12th magnitude near';
		result = getDescription('F;vS;R;*12 near');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; much brighter middle; star of 7th magnitude north preceding 2 arcminutes';
		result = getDescription('pF;vS;mbM;*7 np 2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; = NGC 4005';
		result = getDescription('eF;vS;=NGC 4005');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; elongated/extended; pretty suddenly brighter middle; stars involved/involving north';
		result = getDescription('pB;pS;E;psbM;* inv n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small';
		result = getDescription('vF;eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; star of 12th magnitude north preceding';
		result = getDescription('vF;vS;*12 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle Nucleus or to a Nucleus; star of 13th magnitude involved/involving';
		result = getDescription('vF;vS;R;bMN;*13 inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; gradually little/long brighter middle';
		result = getDescription('pF;pL;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; little/long elongated/extended; between 2 following stars';
		result = getDescription('F;pS;lE;bet 2 f *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very large; very much elongated/extended; very gradually very little/long brighter middle';
		result = getDescription('F;vL;vmE;vgvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated in position angle 45 degrees';
		result = getDescription('vF;S;E45');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; little/long elongated/extended; in field with 1738';
		result = getDescription('eF;vS;lE;in field w 1738');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - faint; large; irregular round; low surface brightness at 100X; UHC no help';
		result = getDescription('13\'\'-F; L; irR; low surf brghtnes at 100X; UHC no help');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; very little/long elongated/extended; very gradually brighter middle; among stars';
		result = getDescription('pB;pL;vlE;vgbM;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; gradually brighter middle';
		result = getDescription('eF;eS;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; elongated/extended; stellar';
		result = getDescription('B;L;E;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; gradually brighter middle';
		result = getDescription('vF;eS;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended';
		result = getDescription('vF;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; irregular round; much brighter middle; compressed stars north following 1 arcminutes';
		result = getDescription('pB;iR;mbM;C* nf 1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; elongated in position angle 240 degrees; star of 9th magnitude preceding 11 arcseconds; 0arcminutes 9 suddenly/south';
		result = getDescription('vF;pL;E240;*9 p 11\'\';0\' 9 s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; resolvable (mottled not resolved)';
		result = getDescription('pB;pL;R;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'makes a close double nebula with 1888';
		result = getDescription('makes a close Dneb w 1888');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty large; Eridanus; extremely/excessively compressed; well resolved clearly consisting of stars';
		result = getDescription('pL;eRi;eC;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; elongated in position angle 0 degrees; gradually little/long brighter middle';
		result = getDescription('eF;pS;E0;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; bright';
		result = getDescription('vS;B');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; suddenly/south much brighter middle';
		result = getDescription('vF;S;R;smbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; brighter middle Nucleus or to a Nucleus; star of 15th magnitude involved/involving';
		result = getDescription('eF;pS;R;bMN;*15 inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; round; very suddenly/south very much brighter middle; star of 12th magnitude; 3 stars involved/involving';
		result = getDescription('F;L;R;vsvmbM;*12;3 st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar';
		result = getDescription('vF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; stellar';
		result = getDescription('eF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster of large stars';
		result = getDescription('Cl of L st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; gradually brighter middle';
		result = getDescription('eF;vS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; irregular elongated/extended; brighter middle';
		result = getDescription('vF;pS;iE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; stellar';
		result = getDescription('vF;eS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long elongated/extended; gradually brighter middle';
		result = getDescription('vF;S;vlE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('F;S;E;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; gradually brighter middle';
		result = getDescription('vF;pS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; = IC 2154';
		result = getDescription('F;S; = IC 2154');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; between 2 stars; gradually little/long brighter middle';
		result = getDescription('F;pS;bet 2 *;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; very little/long elongated/extended; pretty much brighter middle; stars near';
		result = getDescription('pF;pS;vlE;pmbM;st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; very gradually brighter middle; preceding of 2';
		result = getDescription('F;pL;R;vgbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; very little/long elongated/extended; very gradually little/long brighter middle; following of 2';
		result = getDescription('vF;L;vlE;vglbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; very gradually brighter middle';
		result = getDescription('vF;pL;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; elongated/extended; gradually brighter middle';
		result = getDescription('pF;S;E;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; gradually little/long brighter middle';
		result = getDescription('eF;vS;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round';
		result = getDescription('vF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('F;pL;E;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; pretty much elongated/extended 45; much brighter middle; star of 10th magnitude suddenly/south';
		result = getDescription('pF;pL;pmE45;mbM;*10s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle; star of 10.5 magnitude north preceding 3 arcminutes';
		result = getDescription('F;S;R;gbM;*10.5 np 3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended; pretty suddenly little/long brighter middle';
		result = getDescription('vF;S;E;pslbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended; gradually little/long brighter middle';
		result = getDescription('vF;S;lE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; much elongated/extended; suddenly/south much brighter middle Nucleus or to a Nucleus';
		result = getDescription('F;S;mE;smbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; pretty much elongated/extended; gradually brighter middle Nucleus or to a Nucleus';
		result = getDescription('F;pS;pmE;gbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;vS;R;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; nebulous??';
		result = getDescription('eF;vS;neb?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; pretty much elongated/extended; gradually pretty much brighter middle';
		result = getDescription('pB;pL;pmE;gpmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round; little/long brighter middle';
		result = getDescription('vF;S;iR;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually little/long brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;S;R;glbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round; brighter middle faint Nucleus or to a Nucleus; small stars suddenly/south';
		result = getDescription('F;R;bMFN;S*s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; gradually brighter middle';
		result = getDescription('eF;pS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle; star of 16th magnitude south preceding';
		result = getDescription('F;S;R;bM;*16 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; much brighter middle; star of 8th magnitude - 9 north preceding 1 arcminutes';
		result = getDescription('pB;pL;R;mbM;*8-9 np 1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; stellar';
		result = getDescription('pF;S;R;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; elongated/extended; brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;pS;E;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small stars in centre';
		result = getDescription('F;pS*in centre');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small';
		result = getDescription('vF;pS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; gradually brighter middle Nucleus or to a Nucleus; stellar';
		result = getDescription('F;pS;gbMN;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; suddenly/south brighter middle; 1 stars of 3';
		result = getDescription('vF;vS;sbM;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; suddenly/south brighter middle; 2 north diameter of 3';
		result = getDescription('vF;vS;sbM;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; elongated in position angle 10 degrees; double stars involved/involving';
		result = getDescription('eF;pS;E10;D* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; suddenly/south brighter middle; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('vF;vS;sbM;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended; gradually little/long brighter middle';
		result = getDescription('vF;S;E;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; small; round; suddenly/south very much brighter middle';
		result = getDescription('cB;S;R;svmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; little/long elongated/extended 230; between 2 very faint stars';
		result = getDescription('eF;vS;lE230;bet 2 vf *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 13th magnitude involved/involving faint nebula; 3 stars preceding 1 arcseconds';
		result = getDescription('*13 inv F neb;3*p1\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; stellar nucleus; 5861 south following';
		result = getDescription('F;S;stell Nuc;5861 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('F;L;E;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 12th magnitude in extremely/excessively faint nebula; small; round';
		result = getDescription('*12in eF neb;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'no description';
		result = getDescription('No description');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; star of 12th magnitude attached north';
		result = getDescription('vF;S;*12 att n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; pretty much elongated/extended 0; pretty suddenly much brighter middle';
		result = getDescription('pB;pL;pmE0;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; large; gradually brighter middle';
		result = getDescription('eF;L;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; brighter middle; near 5883';
		result = getDescription('eF;vS;R;bM;nr 5883');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably large; round; very gradually brighter middle';
		result = getDescription('F;cL;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'no description';
		result = getDescription('No description');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended; gradually brighter middle; star of 11th magnitude following';
		result = getDescription('vF;pS;lE;gbM;*11f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; Virgo; very gradually brighter middle; well resolved clearly consisting of stars';
		result = getDescription('pF;L;viR;vgbM;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; elongated in position angle 235 degrees';
		result = getDescription('vF;vS;E235');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle';
		result = getDescription('F;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; gradually pretty much brighter middle';
		result = getDescription('cF;S;R;gpmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; pretty suddenly brighter middle';
		result = getDescription('eF;vS;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; gradually little/long brighter middle; preceding of 2';
		result = getDescription('B;S;R;glbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended; gradually little/long brighter middle; following of 2';
		result = getDescription('F;S;lE;glbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; very small; round; north bright middle at 220X';
		result = getDescription('13\'\'-pB;vS;R;nBM at 220X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; very little/long elongated/extended; brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;pS;vlE;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular round';
		result = getDescription('F;S;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; suddenly/south brighter middle Nucleus or to a Nucleus; among stars';
		result = getDescription('eF;vS;sbMN;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; very small stars preceding';
		result = getDescription('eF;S;R;vS*p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; round; suddenly/south much brighter middle';
		result = getDescription('vB;pL;R;smbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round; little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;S;iR;lbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; very little/long elongated/extended 0; very gradually little/long brighter middle';
		result = getDescription('F;pL;vlE0;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty small; irregular round; gradually little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cF;pS;iR;glbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('eF;vS;R;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; irregular round; very little/long brighter middle';
		result = getDescription('eF;pS;iR;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object; considerably bright; large; very much elongated/extended 90';
		result = getDescription('!;cB;L;vmE90');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; cometic';
		result = getDescription('vF;pL;R;com');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; brighter middle; 3021 following';
		result = getDescription('pF;pS;R;bM;3021 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; very little/long elongated/extended; much brighter middle; star of 10th magnitude south preceding';
		result = getDescription('pB;pS;vlE;mbM;*10 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular round; very gradually very little/long brighter middle';
		result = getDescription('vF;pL;iR;vgvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; elongated/extended; very faint stars involved/involving';
		result = getDescription('eF;pL;E;vf * inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; suddenly/south brighter middle';
		result = getDescription('F;S;R;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula star of 13th magnitude';
		result = getDescription('neb *13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small group of very faint stars in very faint nebula';
		result = getDescription('S group of vF st in vF neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended; Nucleus or to a Nucleus = star of 15th magnitude';
		result = getDescription('F;S;lE;N=*15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; irregular round; extremely/excessively faint stars close south preceding';
		result = getDescription('eF;vS;iR;eF* close sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably small; round; pretty suddenly brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cB;cS;R;psbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar';
		result = getDescription('vF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended';
		result = getDescription('vF;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle';
		result = getDescription('F;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; very small cluster of very faint stars ?';
		result = getDescription('F;S;vS Cl of vF st?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; little/long brighter middle';
		result = getDescription('eF;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; star of 11th magnitude preceding 150 arcseconds; little/long suddenly/south; preceding of 2';
		result = getDescription('eF;*11 p 150\'\';ls;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; pretty suddenly brighter middle; (= 3235)';
		result = getDescription('pB;pS;R;psbM;(=3235)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; following of 2';
		result = getDescription('F;S;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; elongated/extended 0; suddenly/south much brighter middle elongated/extended Nucleus or to a Nucleus';
		result = getDescription('vB;pL;E 0;smbMEN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; large; much elongated/extended 45; pretty suddenly much brighter middle Nucleus or to a Nucleus';
		result = getDescription('cB;L;mE 45;psmbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; pretty suddenly brighter middle; stars south following';
		result = getDescription('pF;S;R;psbM;* sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; irregular round; 3277 north following';
		result = getDescription('F;vS;iR;3277 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably small; round; pretty gradually much brighter middle';
		result = getDescription('cB;cS;R;pgmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 13th magnitude involved/involving in very faint nebula';
		result = getDescription('*13 inv in vF neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; large; much elongated/extended 135; gradually little/long brighter middle';
		result = getDescription('cB;L;mE 135;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; pretty suddenly brighter middle; easily resolvable';
		result = getDescription('vF;cS;psbM;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; little/long brighter middle';
		result = getDescription('vF;vS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually brighter middle; very small stars attached';
		result = getDescription('vF;S;R;gbM;vS* att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; round; brighter middle';
		result = getDescription('cF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; large; gradually brighter middle; stars involved/involving; 2 stars following';
		result = getDescription('cB;L;gbM;* inv;2 st f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; 2 stars 9th magnitude and fainter- 10 suddenly/south';
		result = getDescription('eF;vS;2 st 9-10 s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; suddenly/south brighter middle';
		result = getDescription('pB;pS;R;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably large; irregular round; very gradually little/long brighter middle';
		result = getDescription('pF;cL;iR;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular round; small cluster ?';
		result = getDescription('F;S;iR;S Cl?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty small; irregular little/long elongated/extended; 1 stars of 2';
		result = getDescription('cB;pS;ilE;1st of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; irregular little/long elongated/extended; 2 north diameter of 2';
		result = getDescription('pB;pS;ilE;2nd of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; brighter middle';
		result = getDescription('pF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small';
		result = getDescription('F;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; round; much brighter middle';
		result = getDescription('B;pL;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; brighter middle';
		result = getDescription('cF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; little/long elongated/extended; south preceding of 3';
		result = getDescription('pF;pL;lE;sp of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; irregular elongated/extended; gradually brighter middle; 2 north diameter of 3';
		result = getDescription('pB;L;iE;gbM;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; very much elongated/extended 40; double star close south preceding';
		result = getDescription('pB;pL;vmE 40;** close sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; much brighter middle; resolvable (mottled not resolved) ?';
		result = getDescription('F;vS;R;mbM;r?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; very little/long elongated/extended; very little/long brighter middle';
		result = getDescription('F;pL;vlE;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably large; round; gradually much brighter middle';
		result = getDescription('cB;cL;R;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; brighter middle; stars south preceding';
		result = getDescription('vF;R;bM;* sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; elongated/extended; much brighter middle Nucleus or to a Nucleus; partially resolved some stars seen; preceding of 2';
		result = getDescription('B;L;E;mbMN;rr;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; considerably elongated/extended; star of 7th magnitude; 310; 8 arcminutes';
		result = getDescription('F;L;cE;*7;310;8\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; pretty gradually brighter middle; following of 2';
		result = getDescription('F;pS;R;pgbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; several extremely/excessively faint stars involved/involving';
		result = getDescription('vF;S;R;sev eF st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty much elongated/extended; extremely/excessively suddenly/south very much bright middle star of 12th magnitude';
		result = getDescription('vF;pmE;esvmBM*12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended 80 degree';
		result = getDescription('E 80 deg');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very little/long rich; very little/long compressed; stars 10th magnitude and fainter';
		result = getDescription('Cl;vlRi;vlC;st10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stars in middle; spiral or annular';
		result = getDescription('vF;vS;* in M;spiral or annular');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; round; very gradually little/long brighter middle; stars involved/involving';
		result = getDescription('pB;L;R;vglbM;st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; considerably elongated/extended; between 2 stars';
		result = getDescription('vF;S;cE;bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; very gradually brighter middle; among stars';
		result = getDescription('F;S;vgbM;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; preceding rich; little/long compressed; stars from 10th to 11th magnitude';
		result = getDescription('Cl;pL;pRi;lC;*10..11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very faint; very small; very compressed';
		result = getDescription('Cl;vF;vS;vC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; preceding rich; little/long compressed';
		result = getDescription('Cl;pL;pRi;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; Stell nucleus';
		result = getDescription('pB;S;Stell Nuc');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; stellar';
		result = getDescription('eeF;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; rich; little/long compressed; stars 9th magnitude and fainter th to 12th magnitude';
		result = getDescription('Cl;vL;Ri;lC;st9...12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended; very little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;S;lE;vlbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar = 9.5 magnitude a gradually';
		result = getDescription('stellar=9.5mag');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; round; quite sharp';
		result = getDescription('vS;R;quite sharp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; large; round; very gradually brighter middle; well resolved clearly consisting of stars; stars 15th magnitude and fainter';
		result = getDescription('cB;L;R;vgbM;rrr;st 15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; round; gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;L;R;gbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object; very bright; large; round; very gradually brighter middle; stars from 13th to 15th magnitude';
		result = getDescription('!;vB;L;R;vgbM;st 13...15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually pretty much brighter middle; triangle stars north preceding';
		result = getDescription('F;S;R;gpmbM;tri* np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula; faint stars preceding 1 arcminutes; double stars following 3arcminutes';
		result = getDescription('Neb;F*p1\';D*f3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular round; resolvable (mottled not resolved) ?';
		result = getDescription('F;S;iR;r?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; very faint stars involved/involving';
		result = getDescription('eF;vS;vF* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; irregular round; gradually brighter middle; star of 8th magnitude south preceding';
		result = getDescription('pB;S;iR;gbM;*8 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; 12 arcminutes north of 2320';
		result = getDescription('vF;12\'n of 2320');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended';
		result = getDescription('vF;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular round; pretty suddenly much brighter middle; stars preceding';
		result = getDescription('vF;pL;iR;psmbM;st p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar';
		result = getDescription('vF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; very stellar';
		result = getDescription('vF;vS;v stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; pretty suddenly brighter middle';
		result = getDescription('F;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated/extended';
		result = getDescription('eF;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pF;S;R;glbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; between 2 stars 12';
		result = getDescription('vF;bet 2* 12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; little/long brighter middle';
		result = getDescription('pB;pS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably small; round; very gradually very little/long brighter middle; resolvable (mottled not resolved); almost circular';
		result = getDescription('pB;cS;R;vgvlbM;r;almost circular');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; little/long elongated/extended 90 degree; very gradually brighter middle; star of 7th magnitude - 8 267 degree; 4 arcminutes distance or distant';
		result = getDescription('pB;pL;lE 90deg;vgbM;*7-8 267deg;4\' dist');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; much elongated/extended; little/long brighter middle; resolvable (mottled not resolved) ?';
		result = getDescription('vF;pS;mE;lbM;r?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; round; very gradually brighter middle; resolvable (mottled not resolved); star of 8th magnitude preceding';
		result = getDescription('cF;R;vgbM;r;*8p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; very much elongated/extended; star of 12th magnitude attached';
		result = getDescription('pF;pS;vmE;*12 att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; brighter middle';
		result = getDescription('eF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle';
		result = getDescription('vF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; much brighter middle';
		result = getDescription('vF;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; much brighter middle; small stars attached suddenly/south';
		result = getDescription('vF;mbM;S* att s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; among 4 stars';
		result = getDescription('F;am 4*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; very gradually brighter middle';
		result = getDescription('vF;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; 2456 south preceding';
		result = getDescription('F;pL;R;2456 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '1 of 10 nebula; in line with 2463; 2469; = 2472 ?';
		result = getDescription('1 of 10 neb;in line w 2463;2469;=2472?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; star of 12th magnitude close';
		result = getDescription('vF;*12 close');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 13th magnitude slightly nebulous';
		result = getDescription('*13 slightly nebulous');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; very little/long brighter middle';
		result = getDescription('vF;vS;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small stars in extremely/excessively faint; small nebula';
		result = getDescription('vS* in eF;S neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; round';
		result = getDescription('eF;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stars; nebulous?';
		result = getDescription('*;nebulous?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty small; considerably large; stars extremely/excessively faint; nebulous';
		result = getDescription('pS;cL;st eF;nebulous');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - very faint; pretty large; north bright middle; several stars involved at 100X with UHC';
		result = getDescription('13\'\'-vF; pL; nBM; sev* invol at 100X with UHC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round; brighter middle';
		result = getDescription('F;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; elongated/extended ?; brighter middle very small stars ?; large stars north following';
		result = getDescription('F;pS;E?;bM vS*?; L* nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; star of 9th magnitude south following';
		result = getDescription('F;vS;R;*9 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 13th magnitude slightly nebulous';
		result = getDescription('*13 slightly nebulous');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle; resolvable (mottled not resolved) ?';
		result = getDescription('vF;vS;R;bM;r?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '1 of 10 nebula; in line with 2463; 2469';
		result = getDescription('1 of 10 neb;in line w 2463;2469');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; small; round; suddenly/south brighter middle';
		result = getDescription('cB;S;R;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'follows 2493 2 arcminutes or 3arcminutes; extremely/excessively faint; very small';
		result = getDescription('follows 2493 2\'or 3\';eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; gradually little/long brighter middle';
		result = getDescription('vF;vS;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; round; very gradually brighter middle; resolvable (mottled not resolved); among stars';
		result = getDescription('F;L;R;vgbM;r;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '1 stars of 2 nebula; faint; large; round; gradually brighter middle';
		result = getDescription('1st of 2 neb;F;L;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle';
		result = getDescription('F;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; round; gradually brighter middle; 42 suddenly/south following 2518';
		result = getDescription('F;L;R;gbM;42s f 2518');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; pretty suddenly brighter middle; star of 9th magnitude north preceding 3 arcminutes';
		result = getDescription('pF;pL;R;psbM;*9 np 3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; very gradually little/long brighter middle; resolvable (mottled not resolved); 2 stars north following';
		result = getDescription('pB;pL;R;vglbM;r;2* nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; pretty suddenly brighter middle; star of 8th magnitude 164 degrees';
		result = getDescription('pF;pL;R;psbM;*8 164 degrees');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; irregular round; very gradually brighter middle; double stars near';
		result = getDescription('F;pL;iR;vgbM;D* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; well resolved clearly consisting of stars; stars 20th magnitude and fainter';
		result = getDescription('pB;pL;R;rrr;st 20');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; elongated/extended north preceding south following; NGC 2537 north preceding';
		result = getDescription('pB;L;E np sf;NGC 2537 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; elongated/extended; very gradually brighter middle';
		result = getDescription('F;L;E;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; much elongated/extended 0; pretty suddenly much brighter middle';
		result = getDescription('pB;S;mE0;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably large; little/long elongated/extended 45';
		result = getDescription('eF;cL;lE45');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular figure';
		result = getDescription('vF;vS;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; round; resolvable (mottled not resolved)';
		result = getDescription('F;L;R;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; resolvable (mottled not resolved)';
		result = getDescription('vF;vS;R;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; very much elongated/extended 39; gradually much brighter middle';
		result = getDescription('vB;vL;vmE39;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; much brighter middle';
		result = getDescription('pF;vS;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; elongated/extended; very gradually brighter middle star of 18th magnitude';
		result = getDescription('pB;L;E;vgbM *18');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended 110 degree; 2 very faint stars involved/involving';
		result = getDescription('vF;S;E 110 deg;2 vF * inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; stellar';
		result = getDescription('eF;S;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; very gradually little/long brighter middle; star of 12th magnitude north north preceding 50 arcseconds';
		result = getDescription('eF;S;R;vglbM;*12 nnp 50\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular figure; little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;S;iF;lbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; round';
		result = getDescription('vF;cS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; much elongated/extended 150; resolvable (mottled not resolved); 2 stars north';
		result = getDescription('F;L;mE150;r;2* n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; round; very gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;L;R;vgbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; pretty suddenly much brighter middle';
		result = getDescription('pB;S;R;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; 92 arcseconds north following 2778';
		result = getDescription('eF;vS;92\'\' nf 2778');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; small double stars preceding';
		result = getDescription('vF;S;R;S D* p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; round; much brighter middle bright Nucleus or to a Nucleus';
		result = getDescription('cB;R;mbMBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; irregular elongated/extended; several extremely/excessively faint stars involved/involving';
		result = getDescription('eF;pS;iE;sev eF* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; double stars preceding 5 suddenly/south; north 5 arcminutes';
		result = getDescription('vF;S;R;D* p 5s;n 5\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; stellar';
		result = getDescription('pB;S;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably large; very much elongated/extended; following 2798';
		result = getDescription('F;cL;vmE;f 2798');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; 1 stars of 3';
		result = getDescription('vF;vS;R;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; little/long elongated/extended; brighter middle';
		result = getDescription('F;pS;lE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; 2825 north 7 arcminutes';
		result = getDescription('vF;vS;R;2825 n 7\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; north following 2826';
		result = getDescription('eF;vS;R;nf 2826');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; 2 north diameter of 3';
		result = getDescription('vF;vS;R;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended; brighter middle; 1 stars of 3';
		result = getDescription('F;S;lE;bM;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; 2 north diameter of 3';
		result = getDescription('F;vS;R;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably large; elongated/extended; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('cB;cL;E;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; 3 resolvable (mottled not resolved) diameter of 3 inline';
		result = getDescription('F;pS;R;3rd of 3 inline');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle';
		result = getDescription('vF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; star of 10th magnitude north preceding 2 arcminutes';
		result = getDescription('cF;S;R;*10 np 2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small';
		result = getDescription('cF;cS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; round; star of 10th magnitude preceding 2 arcminutes; 1 stars of 2';
		result = getDescription('vF;cS;R;*10 p2\';1st of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very gradually brighter middle; 2 north diameter of 2';
		result = getDescription('vF;S;vgbM;2nd of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; gradually brighter middle';
		result = getDescription('vF;vS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually brighter middle; very faint stars involved/involving';
		result = getDescription('vF;S;R;gbM;vf * inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; extremely/excessively small; round; very difficult';
		result = getDescription('eeF;eS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; very little/long brighter middle';
		result = getDescription('vF;S;R;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular figure';
		result = getDescription('F;S;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; suddenly/south brighter middle';
		result = getDescription('vF;vS;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; very difficult';
		result = getDescription('eeF;pS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2 close star; north one nebula suddenly/south';
		result = getDescription('2 close*;n one neb s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint stars in very faint; very small; little/long elongated/extended nebula';
		result = getDescription('F* in vF;vS;lE neby');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; very difficult';
		result = getDescription('eF;S;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; much brighter middle';
		result = getDescription('vF;vS;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; elongated/extended; 45 arcseconds';
		result = getDescription('vF;E;45\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; round; very difficult; south preceding of 2';
		result = getDescription('eeF;vS;R;v diffic;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; extremely/excessively small; round; very difficult; north following of 2';
		result = getDescription('eeF;eS;R;v diffic;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; brighter middle';
		result = getDescription('F;pS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - extremely/excessively faint; pretty small; round; low surface brightness; 2 very faint stars involved/involving very diameter';
		result = getDescription('13\'\'-eF; pS; R; low surface brightness; 2 vF* invlvd');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular resolvable (mottled not resolved) elongated/extended; several very faint stars involved/involving';
		result = getDescription('vF;vS;irrE;sev vf * inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular resolvable (mottled not resolved) elongated/extended north suddenly/south; very little/long brighter middle';
		result = getDescription('vF;S;irrE ns;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; little/long elongated/extended; diffused; irregular round';
		result = getDescription('eF;lE;dif;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; little/long elongated/extended';
		result = getDescription('pF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; much brighter middle';
		result = getDescription('B;S;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle';
		result = getDescription('vF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle';
		result = getDescription('vF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'Ring nebula; bright; pretty large; considerably elongated/extended';
		result = getDescription('Ring neb;B;pL;cE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - bright; pretty large; north rich; north compressed at 100X; 15 stars and Delta Lyra';
		result = getDescription('13\'\'-B;pL;nRi;nC at 100X; 15* and Delta LYR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small';
		result = getDescription('eeF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'no cluster; pretty large; poor; stars 11th magnitude and fainter th to 12th magnitude';
		result = getDescription('No Cl;pL;P;st11...12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; little/long elongated/extended north suddenly/south';
		result = getDescription('vF;lE ns');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended';
		result = getDescription('F;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; stellar; small stars near Nucleus or to a Nucleus';
		result = getDescription('vF;S;R;stellar;S*nrN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; irregular round; gradually very much compressed middle; well resolved clearly consisting of stars';
		result = getDescription('B;L;iR;gvmCM;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; very rich; stars faint';
		result = getDescription('vF;L;vRi;*F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; elongated in position angle 26 degrees; gradually little/long brighter middle; star of 9.5 magnitude south following';
		result = getDescription('F;E26;glbM;*9.5 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; little/long rich; stars 9th magnitude and fainter - 10';
		result = getDescription('Cl;pL;lRi;st9-10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; very little/long elongated/extended; very gradually little/long brighter middle';
		result = getDescription('pF;L;vlE;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; attached to star of 10th magnitude';
		result = getDescription('vF;S;att to*10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; irregular round; very suddenly/south brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pF;L;iR;vsbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very faint; small';
		result = getDescription('Cl;vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; irregular round; well resolved clearly consisting of stars; stars 14th magnitude and fainter';
		result = getDescription('B;S;iR;rrr;st 14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; irregular round';
		result = getDescription('eF;pL;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; star of 13th magnitude attached 135';
		result = getDescription('F;S;R;*13 att 135');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; elongated/extended; stars star of 9th magnitude attached following';
		result = getDescription('eF;E;**9 att f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; gradually brighter middle';
		result = getDescription('cF;S;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; irregular round';
		result = getDescription('eF;pL;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; very gradually little/long brighter middle';
		result = getDescription('vF;pS;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; very little/long brighter middle; among stars';
		result = getDescription('F;vS;R;vlbM;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; resolvable (mottled not resolved)';
		result = getDescription('vF;S;R;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty faint; large; irregular figure; stars from 12th to 15th magnitude';
		result = getDescription('Cl;pF;L;iF;*12...15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; 1 stars of several';
		result = getDescription('vF;pL;1st of sev');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; rich; stars suddenly/south compressed';
		result = getDescription('Cl;L;Ri;st sC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;R;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very little/long compressed middle; stars 9; 11th to 16th magnitude';
		result = getDescription('Cl;vlCM;st9;11...16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very little/long compressed; stars 9th magnitude and fainter th magnitude and fainter';
		result = getDescription('Cl;vlC;st9...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round; gradually very little/long brighter middle';
		result = getDescription('eF;pL;R;gvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; little/long elongated/extended; gradually very little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;lE;gvlbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually little/long brighter middle';
		result = getDescription('vF;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; irregular elongated/extended';
		result = getDescription('F;L;iE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; hazy stars involved/involving in nebula';
		result = getDescription('vF;hazy * inv in nebula');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; gradually little/long brighter middle; poor with 1939; position 339';
		result = getDescription('pB;pS;R;glbM;P w 1939;pos 339');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually little/long brighter middle; poor with 1938';
		result = getDescription('F;S;R;glbM;P w 1938');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; brighter middle';
		result = getDescription('pB;pL;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; irregular round; very gradually little/long brighter middle; star of 15th magnitude at 191; 60 arcseconds';
		result = getDescription('pF;pS;iR;vglbM;*15 at 191;60\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended; brighter middle; 2 stars 9 north following';
		result = getDescription('vF;S;lE;bM;2*9 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '1 stars of a group of 7';
		result = getDescription('1st of a group of 7');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very large; very gradually brighter middle; 3 resolvable (mottled not resolved) diameter of group';
		result = getDescription('F;vL;vgbM;3rd of group');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; irregular round; 3 stars preceding';
		result = getDescription('F;L;iR;3*p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; very little/long brighter middle';
		result = getDescription('F;pL;R;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; round; gradually brighter middle';
		result = getDescription('B;pL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably large; round; very gradually little/long brighter middle';
		result = getDescription('F;cL;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; pretty gradually little/long brighter middle; star of 10th magnitude preceding involved/involving';
		result = getDescription('pB;pL;R;pglbM;*10 p inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very large; irregular round; gradually brighter middle';
		result = getDescription('F;vL;iR;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; gradually brighter middle';
		result = getDescription('B;pL;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very small; little/long elongated/extended; gradually much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vB;vS;lE;gmbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'Globular; bright; pretty large; round; gradually brighter middle; partially resolved some stars seen';
		result = getDescription('Globular;B;pL;R;gbM;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; gradually brighter middle';
		result = getDescription('vF;pL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; gradually brighter middle; star of 9th magnitude north preceding 5 arcminutes';
		result = getDescription('pB;S;R;gbM;*9 np 5\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; gradually brighter middle; 1 stars of 7';
		result = getDescription('vF;R;gbM;1st of 7');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended; 2 north diameter of 7';
		result = getDescription('F;S;lE;2nd of 7');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; elongated/extended group of faint stars involved/involving in faint nebula';
		result = getDescription('S;E group of F* inv in F neby');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; gradually brighter middle';
		result = getDescription('pB;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; round; brighter middle; preceding of 2; star of 9th magnitude between';
		result = getDescription('pB;R;bM;p of 2;*9 bet');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually brighter middle; 3 resolvable (mottled not resolved) diameter of 7';
		result = getDescription('pF;S;R;gbM;3rd of 7');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; round; gradually brighter middle; 4th of 7';
		result = getDescription('vB;pL;R;gbM;4th of 7');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; 5th of 7';
		result = getDescription('vF;5th of 7');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; round; 6th of 7';
		result = getDescription('B;R;6th of 7');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; elongated/extended; 7th of 7';
		result = getDescription('vF;vS;E;7th of 7');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; round; brighter middle; partially resolved some stars seen; following of 2';
		result = getDescription('B;R;bM;rr;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; irregular round; brighter middle';
		result = getDescription('F;pS;iR;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; pretty much elongated/extended; gradually brighter middle star of 13th magnitude';
		result = getDescription('pB;L;pmE;gbM *13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; gradually brighter middle';
		result = getDescription('pB;pS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually brighter middle';
		result = getDescription('vF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'X';
		result = getDescription('X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably large; very gradually brighter middle';
		result = getDescription('vF;cL;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty bright; irregular figure; gradually very much compressed middle; stars 15th magnitude and fainter';
		result = getDescription('Cl;pB;iF;gvmCM;st 15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; gradually pretty much brighter middle';
		result = getDescription('F;pL;R;gpmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; round; gradually much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('B;pL;R;gmbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; little/long elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('F;lE;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; gradually pretty much brighter middle';
		result = getDescription('F;pL;R;gpmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; gradually much brighter middle';
		result = getDescription('pF;pL;R;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; large; round; gradually little/long brighter middle';
		result = getDescription('eF;L;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; gradually little/long brighter middle';
		result = getDescription('vF;pL;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; brighter middle';
		result = getDescription('F;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint cluster';
		result = getDescription('F Cl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably large; round; gradually very little/long brighter middle';
		result = getDescription('vF;cL;R;gvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually little/long brighter middle; triple star preceding';
		result = getDescription('vF;S;R;glbM;*** p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; very gradually very little/long brighter middle';
		result = getDescription('eF;pS;R;vgvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably small; round; gradually brighter middle; between 2 stars';
		result = getDescription('pF;cS;R;gbM;bet 2st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; large; much elongated/extended 6; pretty suddenly little/long brighter middle';
		result = getDescription('cB;L;mE6;pslbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; round; gradually brighter middle';
		result = getDescription('vF;L;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; considerably small; round; pretty gradually much brighter middle; 4 stars preceding';
		result = getDescription('B;cS;R;pgmbM;4*p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably small; round';
		result = getDescription('eF;cS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small';
		result = getDescription('eeF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small';
		result = getDescription('eeF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; elongated/extended; very gradually very little/long brighter middle; stars preceding';
		result = getDescription('F;pL;E;vgvlbM;*p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; preceding of 2';
		result = getDescription('eF;vS;R;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; following of 2';
		result = getDescription('vF;pS;R;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stars (3 Monoceros) involved/involving in pretty large; faint; nebula';
		result = getDescription('* (3 MON) inv in pL;F;neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; star of 12th magnitude involved/involving';
		result = getDescription('F;*12 inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebulous star of 7th magnitude; among 3 stars';
		result = getDescription('nebulous *7;am 3*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 9th magnitude in very faint; pretty large; nebula; elongated/extended 170 degree';
		result = getDescription('*9 in vF;pL;neb;E 170 deg');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright double star; large stars nebula; elongated/extended 90 degree';
		result = getDescription('pB**;L* neb;E 90 deg');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended; star of 11th magnitude - 12 south preceding';
		result = getDescription('eF;S;lE;*11-12 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 11th magnitude and 4 small stars in very faint; large nebula';
		result = getDescription('*11 and 4 S* in vF;L neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; considerably large; preceding rich; preceding compressed; stars 11th magnitude and fainter . 15';
		result = getDescription('Cl;cL;pRi;pC;st11.15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; very little/long compressed; star of 6th magnitude; 11th to 12th magnitude';
		result = getDescription('Cl;P;vlC;*6;11...12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; little/long compressed middle; stars from 12th to 15th magnitude';
		result = getDescription('Cl;P;lCM;*12...15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; very difficult; star of 10th magnitude close small';
		result = getDescription('S;v diffic;*10 close S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright stars (10 Monoceros) + cluster';
		result = getDescription('B* (10 MON) + Cl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; preceding compressed; star of 10th magnitude; 12th to 15th magnitude';
		result = getDescription('Cl;pRi;pC;*10;12...15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint stars in nebula; part of extremely/excessively large nebulous ring ar 2239';
		result = getDescription('F* in neby;part of eL nebs ring ar 2239');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very very large; diffused; part of extremely/excessively large nebulous ring ar 2239';
		result = getDescription('pB;vvL;dif;part of eL nebs ring ar 2239');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; diffuse; several stars 9th magnitude and fainter- 10 involved/involving';
		result = getDescription('F;L;diffuse;sev st 9-10 inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round + stars';
		result = getDescription('R+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula star of 10th magnitude much';
		result = getDescription('Neb * 10m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 8th magnitude in large; poor; bright cluster';
		result = getDescription('*8 in L;P;B Cl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; beautiful; stars scattered (12 Monoceros)';
		result = getDescription('Cl;beautiful;st sc (12 MON)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '4 arcseconds entire field covered in dark lanes';
		result = getDescription('4 \'\' entire field covered in dark lanes');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; large; irregular resolvable (mottled not resolved) round; extremely/excessively difficult';
		result = getDescription('eeF;L;irr R;e difficult');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty large; cometic; much brighter Nucleus or to a Nucleus south following almost stars; star of 7th magnitude - 8 north following';
		result = getDescription('pL;com;mbN sf alm *;*7-8 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula; north preceding star of 5th magnitude';
		result = getDescription('Neby;np * 5 mag');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebulous star in extremely/excessively faint; extremely/excessively large nebula; north following 2245';
		result = getDescription('neb* in eF;eL neby;nf 2245');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; little/long compressed; irregular figure; star of 8th magnitude; 12th to 14th magnitude';
		result = getDescription('Cl;pRi;lC;iF;*8;12...14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; elongated/extended; rich; little/long compressed';
		result = getDescription('Cl;vL;E;Ri;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; preceding rich; little/long compressed; stars small';
		result = getDescription('Cl;vL;pRi;lC;st S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; preceding compressed; irregular figure; stars from 11th to 13th magnitude';
		result = getDescription('Cl;S;pC;iF;*11...13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '6 arcseconds - pretty bright; pretty large; not well detached; 20 stars magnitude 10 to 13';
		result = getDescription('6\'\'-pB; pL; not well detached; 20* mags 10 to 13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '10 arcseconds - faint; large; elongated/extended 2X1 in position angle 0; north bright middle; UHC helps';
		result = getDescription('10\'\'-F; L; E 2X1 in PA 0; nBM; UHC helps');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; poor; very little/long compressed; stars large and small';
		result = getDescription('Cl;vL;P;vlC;st L & S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; considerably rich; extremely/excessively compressed; irregular figure; stars extremely/excessively small';
		result = getDescription('Cl;cRi;eC;iF;st eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '10 arcseconds - pretty bright; pretty small; compressed; 12 stars at 60X';
		result = getDescription('10\'\'-pB; pS; C; 12* at 60X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + round';
		result = getDescription('E+R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; very much elongated/extended 330 degree; Nucleus or to a Nucleus cometic = star of 11th magnitude';
		result = getDescription('B;vmE 330 deg;N com=*11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very compressed; irregular round; brighter middle; stars extremely/excessively small';
		result = getDescription('Cl;vC;iR;bM;st eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively large nebula; 3 degree diameter; dense stars 12th magnitude and fainter arcminutes south preceding 15 Monoceros';
		result = getDescription('eL neb;3 deg diam;densest 12\' sp 15 MON');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very much compressed; not rich; stars very small';
		result = getDescription('Cl;vmC;not Ri;st vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; little/long compressed; not rich';
		result = getDescription('Cl;lC;not Ri');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 10th magnitude in faint; round nebula';
		result = getDescription('*10 in F;R neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; compressed; ab 100 stars from 9th to 15th magnitude';
		result = getDescription('Cl;L;C;ab 100* 9...15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; rich; large; irregular figure; stars large and small';
		result = getDescription('Cl;Ri;L;iF;st L & S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster of 30 or 40 stars';
		result = getDescription('Cl of 30 or 40 *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; poor; little/long compressed';
		result = getDescription('Cl;L;P;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; very little/long compressed';
		result = getDescription('Cl;P;vlC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; preceding rich; much compressed; stars 13th magnitude and fainter';
		result = getDescription('Cl;pL;pRi;mC;st13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; little/long compressed; not rich';
		result = getDescription('Cl;lC;not Ri');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round';
		result = getDescription('F;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor';
		result = getDescription('Cl;P');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; resolvable (mottled not resolved); small stars involved/involving';
		result = getDescription('pF;S;R;r;S st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'close double nebula with 2316';
		result = getDescription('close Dneb w 2316');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster of very scattered stars 8th magnitude and fainter; 9th magnitude and fainter';
		result = getDescription('Cl of v sc st 8;9...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; rich; preceding compressed';
		result = getDescription('Cl;vL;Ri;pC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2';
		result = getDescription('2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; rich; considerably compressed; stars from 12th to 16th magnitude';
		result = getDescription('Cl;L;Ri;cC;st 12...16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + round';
		result = getDescription('E+R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; extremely/excessively large; irregular round; very diffused';
		result = getDescription('pB;eL;iR;v dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; little/long compressed';
		result = getDescription('Cl;L;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very little/long compressed';
		result = getDescription('Cl;vlC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; considerably large; poor; little/long compressed';
		result = getDescription('Cl;cL;P;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 11.5 magnitude in very faint nebula';
		result = getDescription('* 11.5 in vF neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 10th magnitude attached with small; very faint; nebula';
		result = getDescription('*10 att w S;vF;neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; considerably large; poor; considerably compressed';
		result = getDescription('Cl;cL;P;cC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; little/long compressed; one very bright stars';
		result = getDescription('Cl;L;lC;one vB*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding compressed; stars pretty large; brighter if irregular diameter';
		result = getDescription('Cl;pC;st pL;bifid');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; preceding rich; stars 15th magnitude and fainter';
		result = getDescription('Cl;S;pRi;st15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small stars involved/involving; star of 11th magnitude suddenly/south';
		result = getDescription('eF;vS* inv;*11 s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '1 stars of 2 faint nebula (very small clusters?)';
		result = getDescription('1st of 2 F neb (vS clusters?)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2 north diameter of 2 faint nebula (very small clusters)';
		result = getDescription('2nd of 2 F neb (vS clusters)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty small; faint; rich; 40 stars magnitude 12th magnitude and fainter';
		result = getDescription('pS;F;Ri;40* mags 12...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended';
		result = getDescription('F;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; very rich; compressed; stars from 11th to 20th magnitude';
		result = getDescription('Cl;pL;vRi;C;*11...20');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty large; brighter middle';
		result = getDescription('pL;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle stars; among stars';
		result = getDescription('vF;vS;R;bM*;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'easy in 8X42 binoculars; curved dark lane within Musca';
		result = getDescription('easy in 8X42 binocs; curved dark lane within Musca');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; round; stars from 12th to 16th magnitude';
		result = getDescription('pF;L;R;* 12...16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; very little/long compressed';
		result = getDescription('Cl;P;vlC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; preceding rich; irregular figure; stars from 10th to 18th magnitude';
		result = getDescription('Cl;pL;pRi;iF;*10..18');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; round; gradually; very suddenly/south brighter middle; stars 12th magnitude and fainter';
		result = getDescription('B;L;R;g;vsbM;st 12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar';
		result = getDescription('Stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; considerably elongated/extended; brighter middle; curved axis';
		result = getDescription('B;pL;cE;bM;curved axis');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; very rich; little/long compressed; stars from 11th to 14th magnitude';
		result = getDescription('Cl;vL;vRi;lC;*11..14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; round; very gradually little/long brighter middle; well resolved clearly consisting of stars; stars 16th magnitude and fainter';
		result = getDescription('cB;pL;R;vglbM;rrr;st 16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; preceding rich; stars 12th magnitude and fainter th to 14th magnitude';
		result = getDescription('Cl;L;pRi;st12...14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty small; preceding rich; much compressed; stars 16th magnitude and fainter';
		result = getDescription('Cl;pS;pRi;mC;st16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; much compressed; stars 11th magnitude and fainter th to 14th magnitude';
		result = getDescription('Cl;S;mC;st11...14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very bright; very large; very rich; little/long compressed; star of 10th magnitude th magnitude and fainter';
		result = getDescription('Cl;vB;vL;vRi;lC;*10...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; bright; large; little/long compressed; stars 7th magnitude and fainter th to 10th magnitude';
		result = getDescription('Cl;B;L;lC;st7...10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; extremely/excessively large; Eridanus';
		result = getDescription('Cl;eL;eRi');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; considerably large; preceding rich; little/long compressed middle; stars 13th magnitude and fainter th magnitude and fainter';
		result = getDescription('Cl;cL;pRi;lCM;st13..');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; little/long compressed; stars large';
		result = getDescription('Cl;L;lC;st L');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '3 brighter';
		result = getDescription('3b');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; double stars faint near';
		result = getDescription('eF;D*F nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '3 brighter';
		result = getDescription('3b');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; little/long elongated/extended; very gradually little/long brighter middle; double stars preceding';
		result = getDescription('F;cS;lE;vglbM;D*p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; Mu Normae involved/involving';
		result = getDescription('Cl;Mu Normae inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; little/long compressed; irregular figure';
		result = getDescription('Cl;L;lC;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually little/long brighter middle';
		result = getDescription('F;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; round; very gradually brighter middle';
		result = getDescription('pB;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably small; round; pretty suddenly much brighter middle';
		result = getDescription('pB;cS;R;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; round; gradually; pretty suddenly much brighter middle; among stars';
		result = getDescription('pF;R;g;psmbM;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; very gradually little/long brighter middle; star of 13th magnitude involved/involving';
		result = getDescription('F;pL;R;vglbM;*13 inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; very little/long brighter middle; stars near';
		result = getDescription('vF;pL;R;vlbM;* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; round; brighter middle';
		result = getDescription('vF;eS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very large; diffused; stars involved/involving';
		result = getDescription('eF;vL;dif;st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'Rho Ophiuchi in extremely/excessively large; very faint; irregular nebula';
		result = getDescription('Rho Ophiuchi in eL;vF;Irr neby');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'large; very rich; very much compressed; round; well resolved clearly consisting of stars';
		result = getDescription('L;vRi;vmC;R;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; large; 19 stars at 100X; no nebula seen';
		result = getDescription('13\'\'-pF; L; 19* at 100X; no neby seen');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '4 arcseconds - very elongated dark lane; 4 fields in Richest Field Telescope';
		result = getDescription('4\'\'-very elongated dark lane; 4 fields in RFT');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '4 arcseconds - not very prominent; averted vision only';
		result = getDescription('4\'\'-not very prominent; averted vision only');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; irregular round; gradually much brighter middle';
		result = getDescription('vB;vL;iR;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; irregular round; 3 faint stars suddenly/south';
		result = getDescription('eeF;pS;iR;3F*s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; little/long elongated/extended; diffused';
		result = getDescription('vF;pL;lE;dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; irregular round; well resolved clearly consisting of stars; stars from 14th to 16th magnitude';
		result = getDescription('pB;cL;iR;rrr;*14..16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; very large; round; gradually very much bright middle; well resolved clearly consisting of stars';
		result = getDescription('B;vL;R;gvmBM;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '6 arcseconds prominent dark oval 15 arcminutes X 10 arcminutes';
		result = getDescription('6\'\' prominent dark oval 15\' X 10\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - extremely/excessively faint; pretty small; round; low surface brightness; averted vision helpful';
		result = getDescription('13\'\'-eF; pS; R; low surface brightness; averted vizhlp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; gradually much brighter middle; well resolved clearly consisting of stars';
		result = getDescription('vB;L;gmbM;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively small; bright';
		result = getDescription('eS;B');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; little/long elongated/extended';
		result = getDescription('pB;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; round; very compressed middle; well resolved clearly consisting of stars';
		result = getDescription('vB;L;R;vCM;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; round; compressed middle; stars 16th magnitude and fainter th magnitude and fainter';
		result = getDescription('B;L;R;CM;st16...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; large; round; gradually pretty much compressed middle; well resolved clearly consisting of stars';
		result = getDescription('cB;L;R;gpmCM;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright';
		result = getDescription('pB');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; round; pretty suddenly brighter middle; stars 16th magnitude and fainter';
		result = getDescription('vB;L;R;psbM;st16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; very gradually brighter middle';
		result = getDescription('F;S;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '4 arcseconds - very good contrast; dark lanes prominent';
		result = getDescription('4\'\'-very good contrast; dark lanes prominent');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; between 2 stars very near';
		result = getDescription('B;S;bet 2*v nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; considerably large; round; little/long brighter middle; well resolved clearly consisting of stars';
		result = getDescription('B;cL;R;lbM;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '6 arcseconds pretty large dark oval; much elongated/extended 100 degree';
		result = getDescription('6\'\' pL dark oval; mE 100 deg');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '4 arcseconds - very good contrast; front leg of dark Horse';
		result = getDescription('4\'\'-very good contrast; front leg of Dark Horse');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty small; round; gradually very much bright middle';
		result = getDescription('cB;pS;R;gvmBM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - large; very dark; triangle; only 3 stars involved/involving at 100X';
		result = getDescription('13\'\'-L;very dark;triang;only 3* invl at 100X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; round; partially resolved some stars seen';
		result = getDescription('pF;L;R;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; round; extremely/excessively compressed middle; well resolved clearly consisting of stars';
		result = getDescription('B;L;R;eCM;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty small; little/long elongated/extended; extremely/excessively round';
		result = getDescription('cB;pS;lE;eR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - large; dark; horn-shaped; 4 stars involved at 100X';
		result = getDescription('13\'\'-L;Dark; horn-shaped; 4* invol at 100X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty large; partly dark; thin winding double nebula at 100X';
		result = getDescription('13\'\'-pL;pDark;thin winding Dneb at 100X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; considerably large; very gradually very much bright middle; well resolved clearly consisting of stars';
		result = getDescription('vB;cL;vgvmBM;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; large; round; gradually brighter middle; well resolved clearly consisting of stars';
		result = getDescription('cF;L;R;gbM;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula in patches; Milky Way';
		result = getDescription('neby in patches;Milky Way');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; faint; very compressed';
		result = getDescription('vS;F;vC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended';
		result = getDescription('F;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; very little/long brighter middle';
		result = getDescription('F;L;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; large; north compressed; suddenly/south rich at 100X; 32 stars';
		result = getDescription('13\'\'-pB;L;nC;sRi at 100X; 32*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'annular; pretty bright; small; round';
		result = getDescription('Annular;pB;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very difficult';
		result = getDescription('v difficult');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; very little/long elongated/extended';
		result = getDescription('pB;S;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; very large; round; Eridanus; very gradually much brighter middle';
		result = getDescription('B;vL;R;eRi;vgmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; star of 12th magnitude faint involved/involving';
		result = getDescription('pB;pL;R;*12F inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '4 arcseconds - fills entire field 3 degree; medium contrast';
		result = getDescription('4\'\'-fills entire field 3 deg; medium contrast');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '4 arcseconds very large; somewhat prominent large dark area';
		result = getDescription('4\'\' vL;somewhat prominent large dark area');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; suddenly/south much brighter middle';
		result = getDescription('vF;vS;smbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; small; comet-shaped at 220X; stars involved';
		result = getDescription('13\'\'-pF; S; comet-shaped at 220X; * invol');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - very very faint; pretty large; round; north bright middle at 165X';
		result = getDescription('13\'\'-vvF;pL;R;nBM at 165X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably large; elongated/extended; very little/long brighter middle';
		result = getDescription('vF;cL;E;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very very large sparse group; about 20 stars magnitude 7th magnitude and fainter';
		result = getDescription('vvL sparse group;about 20 * mags 7....');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - bright; large; scattered 32 stars at 60X';
		result = getDescription('13\'\'-B; L; scattered  32* at 60X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; brighter middle';
		result = getDescription('vS;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular resolvable (mottled not resolved) round; little/long brighter middle';
		result = getDescription('vF;pL;irrR;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'Naked eye \'V\' shape';
		result = getDescription('Naked eye \'V\' shape');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; partially resolved some stars seen';
		result = getDescription('pB;pL;R;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; stars large';
		result = getDescription('Cl;P;st L');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round';
		result = getDescription('pF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very small; round; little/long hazy';
		result = getDescription('vB;vS;R;l hazy');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - very faint; small; round; north bright middle; low surface brightness at 100X';
		result = getDescription('13\'\'-vF; S; R; nBM; low surface brightness at 100X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; little/long compressed; stars large';
		result = getDescription('Cl;lC;st L');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; brighter middle';
		result = getDescription('vF;vS;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster of large and small scattered stars';
		result = getDescription('Cl OF L&S sc st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; little/long rich; stars large and small';
		result = getDescription('Cl;lRi;st L&S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round';
		result = getDescription('pF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; 1684 following 12 arcseconds; star of 9th magnitude suddenly/south 4.5 arcminutes';
		result = getDescription('vF;vS;1684f 12\'\';*9 s 4\'.5');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round';
		result = getDescription('vF;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; brighter middle; star of 9th magnitude 225';
		result = getDescription('pF;pS;R;bM;*9 225');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint';
		result = getDescription('F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; among very small stars; large stars south preceding';
		result = getDescription('vF;vS;am vS st;L* sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; star of 11th magnitude involved/involving';
		result = getDescription('F;S;*11 inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; round; well resolved clearly consisting of stars';
		result = getDescription('S;R;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; 1713 north preceding';
		result = getDescription('vF;vS;1713 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle';
		result = getDescription('F;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'north preceding 1719; (faint stars )';
		result = getDescription('np 1719;(F*)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; irregular round; pretty suddenly little/long brighter middle';
		result = getDescription('pF;S;iR;pslbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; 2 brighter stars very near';
		result = getDescription('vF;pL;2b*vnr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; star of 12th magnitude south preceding';
		result = getDescription('eF;vS;*12 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; 3.6 arcseconds following 1740';
		result = getDescription('vF;vS;3.6\'\'f 1740');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; south following 1740';
		result = getDescription('eeF;pS;R;sf 1740');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; considerably large; round; brighter middle; triple star; star of 10th magnitude involved/involving in the nebula';
		result = getDescription('B;cL;R;bM;***; * 10 inv in the neby');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; little/long brighter middle';
		result = getDescription('F;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + round';
		result = getDescription('E+R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '10 arcseconds - extremely/excessively faint; pretty large; round; 9th magnitude star involved';
		result = getDescription('10\'\'-eF; pL; R; 9th mag star involved');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very diffuse nebula suspected';
		result = getDescription('v diffuse neb susp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '4 arcseconds - very bright; extremely/excessively large; scattered at 17X; 28 stars magnitude 6 ? 10';
		result = getDescription('4\'\'-vB; eL; scatt at 17X; 28* mags 6?10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular round; stars near';
		result = getDescription('vF;pL;iR;st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'diffuse nebulosity';
		result = getDescription('diffuse nebulosity');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '4 arcseconds - low contrast dark area';
		result = getDescription('4\'\'-low contrast dark area');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '11 arcseconds - very faint; pretty small; north bright middle; averted vision helps';
		result = getDescription('11\'\'-vF; pS; nBM; averted vision helps');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large oval ring';
		result = getDescription('vF;L oval ring');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '4 arcseconds - bright; very large; north compressed; 31 stars at 17X; miniature Belt of Orion';
		result = getDescription('4\'\'-B; vL; nC; 31* at 17X; miniature Belt of Orion');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 8th magnitude; 9 involved/involving in nebula';
		result = getDescription('*8;9 inv in neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very bright; little/long rich; stars large; scattered';
		result = getDescription('Cl;vB;lRi;st L;sc');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright double star involved/involving in nebula';
		result = getDescription('B** inv in neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'a magnificent or otherwise interesting object; Theta Orionis and the great nebula middle 42';
		result = getDescription('!!!;Theta Orionis and the great nebula M42');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula with star 42 Orionis';
		result = getDescription('nebula with star 42 Orionis');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very very large; 44 Orion involved/involving';
		result = getDescription('vF;vvL;44 Ori invl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object; very bright; very large; round with tail; much brighter middle star of 8th magnitude';
		result = getDescription('!;vB;vL;R w tail;mbM*8');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '4 arcseconds - very bright; extremely/excessively large; 120 stars at 17X; Belt stars are blue-white';
		result = getDescription('4\'\'-vB; eL; 120* at 17X; Belt stars are blue-white');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + round';
		result = getDescription('E+R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively large; elongated/extended; Epsilon Orionis involved/involving preceding; remarkable object';
		result = getDescription('eL;E;Epsilon orionis inv p;!');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - faint; very large; irregular faint; 15 stars involved; UHC helps somewhat';
		result = getDescription('13\'\'-F; vL; irF; 15* involved; UHC helps somewhat');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + round';
		result = getDescription('E+R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 10th magnitude; 11 involved/involving in nebula';
		result = getDescription('*10;11 inv in neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '9 magnitude stars in large; faint nebula; spect bright 9';
		result = getDescription('9 mag * in L;F neby;spect B9');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2 considerably';
		result = getDescription('2c');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very large; very faint; elongated/extended nebula 8 arcminutes north preceding 49 Orion';
		result = getDescription('vL;vF;E neby 8\' np 49 Ori');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula star of 8.6 magnitude';
		result = getDescription('Neb * 8.6');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '11 arcseconds - difficult dark notch in pretty faint streamer at 100X';
		result = getDescription('11\'\'-difficult dark notch in pF streamer at 100X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula; little/long elongated/extended; star of 8.4 magnitude involved/involving';
		result = getDescription('Neb;lE;* 8.4 inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very very large; very much elongated/extended; 1 degree long including Zeta Orion';
		result = getDescription('eF;vvL;vmE;1 deg long incl Zeta Ori');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + round';
		result = getDescription('E+R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright stars in middle of large; little/long elongated/extended nebula';
		result = getDescription('B* in M of L;lE neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object irregular resolvable (mottled not resolved); bright; very very large; black south preceding including';
		result = getDescription('! irr;B;vvL;black sp incl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; very little/long elongated/extended';
		result = getDescription('pB;vS;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula; star of 8.5 magnitude';
		result = getDescription('Neb;* 8.5');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; little/long rich; little/long compressed';
		result = getDescription('Cl;vL;lRi;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + round';
		result = getDescription('E+R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; small; little/long elongated/extended 1.5X1 in position angle 0; low surface brightness';
		result = getDescription('13\'\'-pF; S; lE 1.5X1 in PA 0; low surf brightness');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'only 2 small stars and no nebula';
		result = getDescription('only 2 S st and no neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - dark lane east-west; pretty small';
		result = getDescription('13\'\'-dark lane E-W; pretty small');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; star of 9th magnitude - 10 north preceding 4 arcminutes';
		result = getDescription('eF;vS;*9-10 np 4\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; 2068 suddenly/south';
		result = getDescription('F;pL;2068 s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; small scattered stars';
		result = getDescription('Cl;poor;S sc st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; wisp; gradually much brighter Nucleus or to a Nucleus; 3 stars involved/involving; resolvable (mottled not resolved)';
		result = getDescription('B;L;wisp;gmbN;3* inv;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'double stars (10 and 14th magnitude) with very faint; large chevelure extremely/excessively very';
		result = getDescription('D*(10 & 14m) w vF;L chev');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably small; little/long elongated/extended; pretty suddenly little/long brighter middle; easily resolvable';
		result = getDescription('eF;cS;lE;pslbM;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; little/long rich; preceding compressed; stars small';
		result = getDescription('Cl;pL;lRi;pC;st S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '4 arcseconds - pretty faint; very large; very very elongated/extended streamer; total 6 degree long';
		result = getDescription('4\'\'-pF; vL; vvE streamer; total 6 deg long');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; brighter middle';
		result = getDescription('F;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '11 arcseconds - very faint; pretty small; round at 320X';
		result = getDescription('11\'\'-vF; pS; R at 320X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; diffused';
		result = getDescription('F;pS;dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; preceding rich; very little/long compressed; stars 10th magnitude and fainter';
		result = getDescription('Cl;L;pRi;vlC;st 10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bipolar';
		result = getDescription('bipolar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; elongated/extended; diffused; star of 11th magnitude attached suddenly/south';
		result = getDescription('eF;E;dif;*11 att s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; little/long rich; pretty much compressed; double star (ADS 4728)';
		result = getDescription('Cl;S;lRi;pmC;** (ADS 4728)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '10 arcseconds - very faint; large; irregular round; UHC helps';
		result = getDescription('10\'\'-vF; L; irR; UHC helps');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; between 3 very faint stars';
		result = getDescription('eF;bet 3 vF *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 8th magnitude in nebula';
		result = getDescription('*8 in neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; little/long compressed; stars large and small';
		result = getDescription('Cl;pRi;lC;st L & S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; very little/long compressed';
		result = getDescription('Cl;L;vlC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - very faint; pretty small; round; north bright middle; low surface brightness at 220X';
		result = getDescription('13\'\'-vF; pS; R; nBM; low surface brightness at 220X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; preceding rich; preceding compressed; stars large and small';
		result = getDescription('Cl;pL;pRi;pC;st L and S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2 clusters near 2 stars 9 - 10 and 10 - 11';
		result = getDescription('2 clusters nr 2* 9-10 & 10-11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; star of 10th magnitude involved/involving preceding';
		result = getDescription('vF;pL;R;* 10 inv p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; rich; gradually very much compressed middle';
		result = getDescription('Cl;L;Ri;gvmCM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; between 2 stars 9 - 10 and 10 - 11';
		result = getDescription('Cl;bet 2* 9-10 & 10-11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; 2 small stars involved/involving; star of 10th magnitude north 31 arcseconds';
		result = getDescription('F;S;2S * inv;*10 n 31\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '3 brighter';
		result = getDescription('3b');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '3';
		result = getDescription('3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'double star chief of cluster';
		result = getDescription('** chief of Cl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '3';
		result = getDescription('3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; preceding of 2';
		result = getDescription('eF;S;R;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; faint of 2';
		result = getDescription('eeF;F of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; 3 stars near';
		result = getDescription('eF;S;R;3* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended; brighter middle; between 2 stars 10';
		result = getDescription('F;S;E;bM;bet 2*10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; pretty much elongated/extended 90; star of 12th magnitude attached following';
		result = getDescription('pF;S;pmE90;*12 att f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; faint stars or double stars involved/involving';
		result = getDescription('vF;vS;F*orD* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; most extremely small; round';
		result = getDescription('eeF;eeS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; star of 6th magnitude south preceding';
		result = getDescription('eF;S;*6 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually very little/long brighter middle; star of 9th magnitude preceding';
		result = getDescription('vF;S;R;gvlbM;*9p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually brighter middle';
		result = getDescription('pF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably large; elongated/extended 150 degrees';
		result = getDescription('F;cL;E 150 degrees');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended; gradually little/long brighter middle';
		result = getDescription('vF;S;lE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; pretty suddenly brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pF;S;R;psbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; round; very gradually; pretty suddenly very much brighter middle';
		result = getDescription('vB;pL;R;vg;psvmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; little/long elongated/extended 90; pretty suddenly little/long brighter middle';
		result = getDescription('pF;pS;lE90;pslbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula; no description';
		result = getDescription('neb;No Descr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably small; round; very much brighter middle';
		result = getDescription('pF;cS;R;vmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually little/long brighter middle; star of 9th magnitude south preceding';
		result = getDescription('vF;S;R;glbM;*9 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; very gradually very little/long brighter middle';
		result = getDescription('vF;pL;R;vgvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; elongated/extended; gradually little/long brighter middle; 2 stars 8 preceding';
		result = getDescription('pF;S;E;glbM;2*8p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very gradually little/long brighter middle; very difficult';
		result = getDescription('eeF;vglbM;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually little/long brighter middle; preceding of 2';
		result = getDescription('vF;S;R;glbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; gradually little/long brighter middle; following of 2';
		result = getDescription('eF;S;R;glbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; pretty much brighter middle; star of 7th magnitude; 8 north following';
		result = getDescription('vF;S;R;pmbM;*7;8 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; considerably elongated/extended; pretty suddenly brighter middle; 3 stars preceding';
		result = getDescription('cF;vS;cE;psbM;3 st p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably large; round; very gradually; suddenly/south very much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cB;cL;R;vg;svmbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably small; round; gradually little/long brighter middle';
		result = getDescription('eF;cS;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; very large; irregular round; stars 11th magnitude and fainter th to 16th magnitude';
		result = getDescription('B;vL;iR;st11..16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; gradually brighter middle';
		result = getDescription('pB;pL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; little/long brighter middle; 1 stars of 3';
		result = getDescription('vF;S;R;lbM;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; 2 north diameter of 3';
		result = getDescription('eF;vS;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('eF;S;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; round; little/long brighter middle; star of 9th magnitude suddenly/south';
		result = getDescription('cF;cS;R;lbM;*9s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; pretty gradually brighter middle';
		result = getDescription('pB;S;R;pgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely extremely/excessively faint; pretty small; among suddenly/south stars';
		result = getDescription('eeeF;pS;am s st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'poor small; round; very gradually brighter middle';
		result = getDescription('PS;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; elongated/extended; binuclear; star of 8th magnitude following';
		result = getDescription('pB;E;bi-N;*8f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; pretty suddenly brighter middle; star of 11th magnitude north preceding';
		result = getDescription('eF;vS;R;psbM;*11 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; gradually brighter middle';
		result = getDescription('F;pS;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; little/long elongated/extended; gradually little/long brighter middle; 1 stars of 4';
		result = getDescription('F;pS;lE;glbM;1st of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; extremely/excessively small stars south following; 2 north diameter of 4';
		result = getDescription('pB;S;R;eS* sf;2nd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; 3 resolvable (mottled not resolved) diameter of 4';
		result = getDescription('vF;vS;R;3rd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; resolvable (mottled not resolved); very small stars attached; 4 of 4';
		result = getDescription('F;S;R;r;vS* att;4 of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle; 5 stars preceding';
		result = getDescription('F;S;R;gbM;5st p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; much elongated/extended; very gradually little/long brighter middle very small stars';
		result = getDescription('pF;L;mE;vglbM vS*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; extremely/excessively elongated/extended 140 degree';
		result = getDescription('F;L;eE 140 deg');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably small; little/long elongated/extended; pretty gradually brighter middle';
		result = getDescription('pB;cS;lE;pgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably small; round; pretty suddenly brighter middle; star of 7.8 magnitude preceding';
		result = getDescription('pF;cS;R;psbM;*7.8p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; round; gradually little/long brighter middle';
		result = getDescription('vF;cS;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; little/long compressed; gradually pretty much brighter middle';
		result = getDescription('B;pL;lC;gpmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; faint stars north preceding very near';
		result = getDescription('pF;pS;R;F*np v nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; suddenly/south brighter middle; stellar; south preceding of 2';
		result = getDescription('eF;S;R;sbM;stellar;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; stellar; north following of 2';
		result = getDescription('eF;S;R;stellar;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; stellar; 2 stars north preceding in line';
		result = getDescription('pF;stellar;2 st np in line');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably large; elongated/extended; very gradually brighter middle';
		result = getDescription('cB;cL;E;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended; 7817 north following';
		result = getDescription('F;S;lE;7817 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably large; much elongated/extended approximately 45 degree; little/long brighter middle';
		result = getDescription('pF;cL;mE approx 45 deg;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; large';
		result = getDescription('eF;L');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very small; very faint; 2.5 arcminutes; nebulous?';
		result = getDescription('Cl;vS;vF;2\'.5;nebs?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; diffused; resolvable (mottled not resolved)';
		result = getDescription('vF;pS;dif;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; between star of 11th magnitude and star of 14th magnitude';
		result = getDescription('F;S;R;bet *11 and *14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; suddenly/south of NGC 1';
		result = getDescription('vF;S;s of NGC 1');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; Nucleus or to a Nucleus in north end';
		result = getDescription('vF;N in n end');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; gradually little/long brighter middle';
		result = getDescription('vF;pS;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round; star of 9th magnitude; 10 south following';
		result = getDescription('F;R;*9;10 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle';
		result = getDescription('vF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; brighter middle';
		result = getDescription('pB;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; irregular round; much brighter middle; NGC 16 preceding 19 arcseconds';
		result = getDescription('F;vS;iR;mbM;NGC 16 p 19\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;pS;R;lbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '3 small stars + nebula';
		result = getDescription('3 S st + neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; 2 faint stars north';
		result = getDescription('vF;pL;R;2 F st n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula star of 13th magnitude';
		result = getDescription('Neb * 13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint (Auw. I)';
		result = getDescription('F (Auw. I)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; little/long elongated/extended; gradually brighter middle';
		result = getDescription('pF;S;lE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; stellar';
		result = getDescription('F;vS;stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended';
		result = getDescription('vF;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; little/long compressed';
		result = getDescription('Cl;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; very little/long elongated/extended';
		result = getDescription('pB;S;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round';
		result = getDescription('pF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; close south following of middle of 3 faint stars';
		result = getDescription('eeF;close sf of M of 3 F st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; close to a small stars';
		result = getDescription('vF;close to a S*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended';
		result = getDescription('vF;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object; very bright; very large; irregular round; very suddenly/south much brighter middle; well resolved clearly consisting of stars; stars very small';
		result = getDescription('!;vB;vL;iR;vsmbM;rrr;st vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated/extended';
		result = getDescription('eF;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; little/long compressed';
		result = getDescription('Cl;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stars in most extremely faint nebula; very difficult';
		result = getDescription('* in eeF neby;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; resolvable (mottled not resolved)';
		result = getDescription('vF;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; stellar';
		result = getDescription('F;vS;R;stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round';
		result = getDescription('F;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; pretty bright stars close preceding';
		result = getDescription('eeF;S;R;pB* close p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; stellar';
		result = getDescription('vF;S;stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; little/long elongated/extended; between 2 stars';
		result = getDescription('vF;pL;lE;bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; very gradually little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;pS;R;vglbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar';
		result = getDescription('vF;vS;stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round';
		result = getDescription('F;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended';
		result = getDescription('F;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;pL;R;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; extremely/excessively small; round; very faint stars south following involved/involving';
		result = getDescription('eeF;eS;R;vF* sf inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very small; stars 19th magnitude and fainter; between 2 stars 16';
		result = getDescription('Cl;vS;st19;bet 2*16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; brighter middle Nucleus or to a Nucleus; resolvable (mottled not resolved); stars south preceding';
		result = getDescription('pB;pS;R;bMN;r;* sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; among 5 or 6 stars';
		result = getDescription('vF;am 5 or 6 st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; irregular round; little/long brighter middle';
		result = getDescription('eF;vS;iR;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; little/long rich; little/long compressed; stars 9th magnitude and fainter th to 10th magnitude';
		result = getDescription('Cl;lRi;lC;st9...10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; little/long brighter middle';
		result = getDescription('vF;vS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; round; very difficult';
		result = getDescription('eeF;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended; brighter middle';
		result = getDescription('F;S;lE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; round; brighter middle; very faint double stars north preceding';
		result = getDescription('eF;R;bM;vf D* np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; little/long elongated/extended';
		result = getDescription('eF;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; gradually brighter middle; easily resolvable';
		result = getDescription('B;pL;gbM;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; stellar';
		result = getDescription('vF;S;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; stellar';
		result = getDescription('vF;S;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; much brighter middle; 4 stars preceding';
		result = getDescription('pF;S;R;mbM;4st p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; little/long elongated/extended; star of 10th magnitude attached suddenly/south';
		result = getDescription('pF;lE;*10 att s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; brighter middle';
		result = getDescription('eF;eS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; preceding elongated/extended';
		result = getDescription('vF;pE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended';
		result = getDescription('vF;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long elongated/extended';
		result = getDescription('vF;S;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; much elongated/extended';
		result = getDescription('eF;S;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round';
		result = getDescription('vF;S;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; round; gradually brighter middle small stars; 3 stars north; north following';
		result = getDescription('F;cS;R;gbM S*;3st n;nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; among stars';
		result = getDescription('vF;S;R;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; pretty much elongated/extended';
		result = getDescription('pB;S;pmE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; oval; faint stars involved/involving';
		result = getDescription('eF;S;oval;F* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; suddenly/south much brighter middle';
		result = getDescription('eF;eS;R;smbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually very little/long brighter middle';
		result = getDescription('vF;S;R;gvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; very little/long brighter middle; north following 7303 ?';
		result = getDescription('vF;pS;vlbM;nf 7303?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; 4 faint stars around';
		result = getDescription('eF;S;R;4F st around');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; pretty suddenly brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pF;S;R;psbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small';
		result = getDescription('F;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; round; brighter middle';
		result = getDescription('vF;eS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; star of 8th magnitude south preceding';
		result = getDescription('F;S;R;*8 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small';
		result = getDescription('eF;eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small';
		result = getDescription('eF;eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small';
		result = getDescription('F;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular round; very gradually very little/long brighter middle';
		result = getDescription('F;S;iR;vgvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; 7331 following';
		result = getDescription('F;vS;7331f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; 7331 following';
		result = getDescription('eF;eS;7331f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; irregular round';
		result = getDescription('pF;pL;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; north preceding 7331';
		result = getDescription('eF;eS;np 7331');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; nebulous star';
		result = getDescription('vF;vS;neb*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; pretty much elongated/extended 163; suddenly/south much brighter middle';
		result = getDescription('B;pL;pmE163;smbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; preceding 7335';
		result = getDescription('vF;vS;p 7335');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; small; much elongated/extended 156; suddenly/south much brighter middle Nucleus or to a Nucleus; preceding of 2';
		result = getDescription('cB;S;mE156;smbMN;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; stellar';
		result = getDescription('eF;S;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; south following 7335';
		result = getDescription('eF;eS;sf 7335');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; little/long elongated/extended 90; very gradually little/long brighter middle';
		result = getDescription('eF;pS;lE90;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; much elongated/extended 89; very gradually little/long brighter middle; following of 2';
		result = getDescription('F;pS;mE89;vglbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; little/long brighter middle; small stars involved/involving';
		result = getDescription('eF;vS;R;lbM;S* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; stellar';
		result = getDescription('eF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; elongated/extended';
		result = getDescription('eF;pL;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular round';
		result = getDescription('vF;pL;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; gradually little/long brighter middle; stars attached';
		result = getDescription('eF;pS;R;glbM;* att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; very faint stars involved/involving';
		result = getDescription('vF;vS;vF * inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; elongated/extended; double stars following';
		result = getDescription('pF;pL;E;D*f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; little/long brighter middle';
		result = getDescription('vF;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; between 2 faint stars';
		result = getDescription('pF;bet 2F*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; stellar';
		result = getDescription('eF;S;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended';
		result = getDescription('vF;pS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular round';
		result = getDescription('F;S;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round';
		result = getDescription('vF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; brighter middle; stellar';
		result = getDescription('F;vS;bM;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; 7385 north following';
		result = getDescription('vF;vS;R;7385 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; 5 arcminutes north following 7383';
		result = getDescription('eF;5\' nf 7383');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; gradually little/long brighter middle; star of 11th magnitude north preceding';
		result = getDescription('cF;S;R;glbM;*11 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; pretty gradually brighter middle; following of 2';
		result = getDescription('cF;S;R;pgbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; 2 stars 11th magnitude and fainter suddenly/south';
		result = getDescription('eF;vS;R;2 st 11 s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; star of 11th magnitude following 2.5 arcminutes';
		result = getDescription('vF;*11 f 2.5\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round';
		result = getDescription('vF;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; suddenly/south of 7389';
		result = getDescription('eF;s of 7389');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; very difficult; suddenly/south of 2';
		result = getDescription('eeF;pS;R;v diffic;s of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; very difficult; north of 2';
		result = getDescription('eeF;S;R;v diffic;n of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; star of 9th magnitude south following 4 arcminutes';
		result = getDescription('F;S;*9 sf 4\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; preceding 7436';
		result = getDescription('eF;vS;p 7436');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; suddenly/south of 7436';
		result = getDescription('eF;s of 7436');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; faint stars attached preceding; gradually brighter middle';
		result = getDescription('F;pS;F* att p;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; large; round; faint stars near north following; very difficult';
		result = getDescription('eeF;L;R;F* nr nf;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'long patch of faint nebula';
		result = getDescription('long patch of F neby');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; round; between 2 stars 16th magnitude and fainter; star of 13th magnitude north following';
		result = getDescription('pF;R;bet 2 st 16;*13 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; elongated in position angle 173 degrees; very gradually brighter middle; star of 11th magnitude following 2.5 arcminutes';
		result = getDescription('pB;L;E173;vgbM;*11 f 2.5\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; star of 10th magnitude - 11 south preceding 2 arcminutes';
		result = getDescription('pF;pL;*10-11 sp 2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably large; little/long elongated/extended; gradually much brighter middle; resolvable (mottled not resolved); 2 small stars north';
		result = getDescription('cB;cL;lE;gmbM;r;2 S st n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; little/long elongated/extended; little/long brighter middle; star of 11th magnitude preceding 1 arcminutes';
		result = getDescription('F;cS;lE;lbM;*11 p 1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; almost stellar';
		result = getDescription('vF;vS;alm stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended; preceding of 2';
		result = getDescription('vF;S;lE;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; elongated/extended; south following 7463';
		result = getDescription('vF;vS;E;sf 7463');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; following of 2';
		result = getDescription('vF;vS;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; brighter middle';
		result = getDescription('eF;eS;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; very suddenly/south much brighter middle star of 12th magnitude';
		result = getDescription('vF;vS;vsmbM *12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; much elongated/extended 12; between 2 stars';
		result = getDescription('pB;cL;mE12;bet 2 st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle; star of 10th magnitude preceding';
		result = getDescription('vF;S;R;bM;*10 p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; 2 arcminutes following 7485';
		result = getDescription('vF;vS;2\' f 7485');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular round; little/long brighter middle';
		result = getDescription('vF;vS;iR;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended; star of 9th magnitude north following near';
		result = getDescription('eF;S;lE;*9 nf nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; pretty much elongated/extended; little/long brighter middle';
		result = getDescription('vF;L;pmE;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; stellar';
		result = getDescription('vF;S;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; extremely/excessively small; little/long elongated/extended; between a bright and 2 faint stars';
		result = getDescription('eeF;eS;lE;bet a B & 2F st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; brighter middle stars; star of 11th magnitude north preceding 2 arcminutes';
		result = getDescription('eF;bM*;*11 np 2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; very small stars in centre';
		result = getDescription('F;S;R;vS* in centre');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; between 2 stars';
		result = getDescription('vF;S;R;bet 2 st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; several stars north following';
		result = getDescription('eeF;S;R;sev st nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; irregular round';
		result = getDescription('eF;pL;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; round; very gradually little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;cS;R;vglbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; stellar';
		result = getDescription('F;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large';
		result = getDescription('vF;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; elongated/extended';
		result = getDescription('eeF;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; very little/long elongated/extended; gradually brighter middle';
		result = getDescription('eF;vS;vlE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar';
		result = getDescription('vF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; very difficult; north of 2';
		result = getDescription('eeF;pS;R;v diffic;n of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; among 6 stars; suddenly/south of 2';
		result = getDescription('eeF;pS;R;am 6 st;s of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small';
		result = getDescription('F;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; pretty suddenly brighter middle';
		result = getDescription('F;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; stellar';
		result = getDescription('F;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; little/long brighter middle';
		result = getDescription('vF;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula star of 13th magnitude much';
		result = getDescription('neb *13m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; stellar';
		result = getDescription('eF;eS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round';
		result = getDescription('vF;S;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; star of 16th magnitude preceding 11 suddenly/south';
		result = getDescription('vF;vS;*16 p 11s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; star of 10th magnitude - 11 preceding';
		result = getDescription('pF;pS;R;*10-11 p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round';
		result = getDescription('cF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round; brighter middle; place very rough';
		result = getDescription('F;R;bM;place very rough');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; nebula star of 13th magnitude much';
		result = getDescription('eeF;neb *13m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; round; brighter middle star of 16th magnitude; north preceding of 2';
		result = getDescription('F;cS;R;bM *16;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably small; round; suddenly/south brighter middle star of 16th magnitude; south following of 2';
		result = getDescription('pF;cS;R;sbM *16;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; elongated/extended';
		result = getDescription('eeF;vS;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; irregular round; several stars involved/involving';
		result = getDescription('eF;pL;iR;sev st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; elongated/extended; partially resolved some stars seen';
		result = getDescription('pF;S;E;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small';
		result = getDescription('eF;eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; almost stellar';
		result = getDescription('eeF;alm stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably elongated/extended; several knots or group of nebula';
		result = getDescription('vF;cE;sev knots or gr of neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; among very small stars';
		result = getDescription('vF;am vS st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; stellar';
		result = getDescription('eF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; faint stars south preceding';
		result = getDescription('vF;pS;R;F* sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; stellar';
		result = getDescription('eF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; almost stellar';
		result = getDescription('eF;vS;alm stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended; gradually brighter middle';
		result = getDescription('vF;vS;lE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small';
		result = getDescription('eF;eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; round; 3 stars preceding';
		result = getDescription('pF;R;3 st p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; stellar';
		result = getDescription('F;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; gradually brighter middle';
		result = getDescription('eF;vS;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; stellar';
		result = getDescription('eF;eS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; stellar';
		result = getDescription('eF;eS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; diffused';
		result = getDescription('pB;dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; star of 16th magnitude north following 1/2 arcminutes';
		result = getDescription('vF;S;R;*16 nf 1/2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended; little/long brighter middle';
		result = getDescription('vF;pS;lE;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; gradually brighter middle';
		result = getDescription('vF;vS;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; diffused';
		result = getDescription('pF;dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; diffused';
		result = getDescription('F;S;dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; round; brighter middle';
		result = getDescription('pB;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably small';
		result = getDescription('eF;cS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; very little/long elongated/extended';
		result = getDescription('F;S;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty small; round; pretty suddenly brighter middle';
		result = getDescription('cB;pS;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; stellar';
		result = getDescription('eF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; little/long elongated/extended or irregular round; diffused; very little/long brighter middle';
		result = getDescription('vF;lE or iR;dif;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; pretty suddenly brighter middle';
		result = getDescription('F;vS;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably small; round; suddenly/south much brighter middle';
		result = getDescription('pB;cS;R;smbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty small; round; pretty suddenly brighter middle';
		result = getDescription('cB;pS;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle';
		result = getDescription('vF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small';
		result = getDescription('F;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; faint double star attached';
		result = getDescription('F;S;F** att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; much elongated/extended; 2 stars north';
		result = getDescription('vF;S;mE;2st n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round; diffused; little/long brighter middle';
		result = getDescription('vF;S;iR;dif;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2 nebula; faint; small';
		result = getDescription('2 neb;F;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2 nebula; faint; small';
		result = getDescription('2 neb;F;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; irregular round; diffused; little/long brighter middle';
		result = getDescription('F;pS;iR;dif;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended; brighter middle';
		result = getDescription('vF;pS;lE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably large (?); preceding a row of stars';
		result = getDescription('eF;cL(?);p a row of st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round';
		result = getDescription('vF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended';
		result = getDescription('vF;pS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; gradually brighter middle';
		result = getDescription('vF;pS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; pretty suddenly much brighter middle; star of 10th magnitude preceding';
		result = getDescription('F;vS;psmbM;*10 p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; pretty suddenly brighter middle';
		result = getDescription('vF;vS;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; stars suddenly/south; 2 stars 11th magnitude and fainter- 12 preceding';
		result = getDescription('vF;* s;2 st 11-12 p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; very suddenly/south much brighter middle; star of 9th magnitude preceding';
		result = getDescription('pB;S;R;vsmbM;*9 p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; 5 arcminutes suddenly/south of 7671';
		result = getDescription('vF;S;5\' s of 7671');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; gradually brighter middle; preceding of 2';
		result = getDescription('F;cS;gbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually brighter middle; following of 2';
		result = getDescription('vF;S;R;gbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; stellar';
		result = getDescription('eF;vS;stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; very little/long elongated/extended; little/long brighter middle; among 4 stars';
		result = getDescription('vF;pL;vlE;lbM;am 4 st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;S;R;lbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - faint; pretty small; elongated/extended 120; very little/long brighter middle; low surface brightness';
		result = getDescription('13\'\'-F; pS; E 120; vlbM; Low Surface Brightness');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round; resolvable (mottled not resolved); double star following';
		result = getDescription('vF;S;iR;r;** f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; diffused; star of 11th magnitude 201 suddenly/south; 80 arcseconds';
		result = getDescription('F;vS;dif;*11 201s;80\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; triangle with 2 stars 10th magnitude and fainter';
		result = getDescription('eF;pL;triangle w 2 st 10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; round; brighter middle supernova';
		result = getDescription('vF;eS;R;bMSN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; gradually brighter middle; star of 14th magnitude north following 1 arcminutes';
		result = getDescription('vF;vS;gbM;*14 nf 1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; pretty suddenly brighter middle; stellar';
		result = getDescription('F;S;R;psbM;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - very faint; very large; irregular faint; only seen with UHC filter 100X';
		result = getDescription('13\'\'-vF; vL; irF; only seen with UHC filter 100X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended; brighter middle; among stars';
		result = getDescription('F;S;lE;bM;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; much brighter middle';
		result = getDescription('pB;pL;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; very difficult';
		result = getDescription('eeF;pS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended; star of 10th magnitude south preceding';
		result = getDescription('vF;vS;lE;*10 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular elongated/extended; faint stars involved/involving suddenly/south';
		result = getDescription('vF;S;iE;F* inv s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long elongated/extended; star of 13th magnitude north following; very near';
		result = getDescription('vF;S;vlE;*13 nf;vnr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; much brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;S;mbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long brighter middle; stellar';
		result = getDescription('vF;S;lbM;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably large; irregular round; double star of 10th magnitude - 12 north preceding 2 arcminutes';
		result = getDescription('cF;cL;iR;D* 10-12 np 2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably small; gradually much brighter middle; star of 12th magnitude following 72 arcseconds';
		result = getDescription('cB;cS;gmbM;*12 f 72\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; star of 14th magnitude south following';
		result = getDescription('pF;S;R;*14 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular round';
		result = getDescription('vF;vS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended; preceding 7753';
		result = getDescription('F;S;lE;p 7753');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably large; very little/long elongated/extended; very gradually little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cF;cL;vlE;vglbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; very small; round; pretty suddenly brighter middle; star of 12th magnitude attached';
		result = getDescription('cB;vS;R;psbM;*12 att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very very following; 100 arcseconds north preceding 7768';
		result = getDescription('vvf;100\'\' np 7768');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; 85 arcseconds suddenly/south of 7768';
		result = getDescription('vF;S;85\'\'s of 7768');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended stars preceding 19 arcseconds';
		result = getDescription('vF;S;lE *p 19\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended; stars involved/involving; stars preceding; very near';
		result = getDescription('vF;S;E;* inv;*p;vnr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; much brighter middle';
		result = getDescription('pF;pS;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular round; suddenly/south of 2';
		result = getDescription('vF;vS;iR;s of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; elongated in position angle 84 degrees; brighter middle; north of 2';
		result = getDescription('pB;pL;E84;bM;n of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster of scattered stars 10th magnitude and fainter much';
		result = getDescription('Cl of sc st 10m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably small; round; star of 13th magnitude north following near';
		result = getDescription('pF;cS;R;*13 nf nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; in centre of 3 stars';
		result = getDescription('eF;S;R;in centre of 3 st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended; gradually little/long brighter middle';
		result = getDescription('vF;pS;lE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle';
		result = getDescription('vF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; little/long brighter middle; resolvable (mottled not resolved) ?; preceding of 2';
		result = getDescription('vF;eS;lbM;r?;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; little/long elongated/extended; very faint stars involved/involving; following of 2';
		result = getDescription('pF;pS;lE;vF st inv;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; ? faint stars (d\'A not found)';
		result = getDescription('vF;vS;?F* (d\'A not found)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; brighter middle';
		result = getDescription('eF;eS;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; irregular round';
		result = getDescription('vF;pS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; suddenly/south brighter middle; star of 10th magnitude south preceding';
		result = getDescription('pF;S;R;sbM;*10 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; star of 16th magnitude close preceding';
		result = getDescription('vF;vS;*16 close p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; elongated in position angle 39 degrees';
		result = getDescription('F;pS;E39');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; preceding of double nebula';
		result = getDescription('vB;p of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; following of double nebula';
		result = getDescription('vB;f of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; pretty large; north compressed; north rich at 100X; 25 stars';
		result = getDescription('13\'\'-pB;pL;nC;nRi at 100X; 25*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; preceding rich; irregular figure; stars from 11th to 13th magnitude';
		result = getDescription('Cl;pL;pRi;iF;*11..13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very very large; very rich; stars from 7th to 14th magnitude';
		result = getDescription('Cl;vvL;vRi;*7...14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; very rich; ruby*M';
		result = getDescription('Cl;vL;vRi;ruby*M');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; preceding rich; stars from 13th to 15th magnitude';
		result = getDescription('Cl;pL;pRi;*13...15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; pretty large; preceding rich; suddenly/south compressed at 100X; 20 stars; blue-gold double stars involved/involving';
		result = getDescription('13\'\'-pB;pL;pRi;sC at 100X; 20*; Bl-Gold D* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; elongated in position angle 90 degrees; much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pF;L;E90;mbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; very much elongated/extended; very very much brighter middle';
		result = getDescription('vB;vL;vmE;vvmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; bright; very large; little/long compressed; suddenly/south compressed stars 9th magnitude and fainter th magnitude and fainter';
		result = getDescription('Cl;B;vL;lC;sC st9...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; star of 18th magnitude involved/involving north';
		result = getDescription('F;S;*18 inv n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; brighter middle';
		result = getDescription('F;S;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended; 3 or 4 stars in line nearby';
		result = getDescription('vF;vS;lE;3 or 4 * in line nearby');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably large; round; gradually little/long brighter middle';
		result = getDescription('pF;cL;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; elongated/extended';
		result = getDescription('vF;pL;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'south preceding preceding of 2';
		result = getDescription('spp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; double stars near';
		result = getDescription('vF;pS;D* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; very faint stars attached suddenly/south';
		result = getDescription('vF;vS;vF * att s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; stars near north';
		result = getDescription('vF;pS;R;* nr n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; irregular round; very gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cF;S;iR;vgbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; elongated/extended small';
		result = getDescription('eF;ES');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty small; irregular round; very gradually little/long brighter middle; double or faint stars; south preceding';
		result = getDescription('cF;pS;iR;vglbM;D or F*;sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small';
		result = getDescription('eF;eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; gradually brighter middle; 2 small stars triangle';
		result = getDescription('vF;vS;R;gbM;2S* triangle');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very small; very faint + nebula';
		result = getDescription('Cl;vS;vf + neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; very little/long brighter middle';
		result = getDescription('vF;S;R;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; elongated/extended';
		result = getDescription('F;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; little/long elongated/extended; suddenly/south brighter middle';
		result = getDescription('F;pS;lE;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; south preceding much brighter middle';
		result = getDescription('vF;pL;R;spmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; irregular figure; suddenly/south brighter middle';
		result = getDescription('pF;pS;iF;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular figure';
		result = getDescription('vF;pL;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; stellar nucleus';
		result = getDescription('eF;vS;stellar nucl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably large; elongated/extended';
		result = getDescription('F;cL;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 13th magnitude in very faint nebula';
		result = getDescription('*13 in vF neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; north following 1175';
		result = getDescription('vF;S;R;nf 1175');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '(star of 13th magnitude in very faint nebula)';
		result = getDescription('(*13 in vF neb)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 13th magnitude involved/involving in nebula';
		result = getDescription('*13 inv in neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; little/long elongated/extended; pretty bright stars close preceding';
		result = getDescription('pF;pS;lE;pB* close p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'F*W; nebula appendages';
		result = getDescription('F*W;neb appendages');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably large; easily resolvable';
		result = getDescription('F;cL;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; considerably elongated/extended; several very faint stars near';
		result = getDescription('pF;pS;cE;sev vF * nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula star of 11th magnitude';
		result = getDescription('neb *11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; round; pretty suddenly brighter in north preceding preceding end';
		result = getDescription('cF;vS;R;psb in npp end');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; little/long elongated/extended; stars close north; difficult';
		result = getDescription('eF;lE;* close n;difficult');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; brighter middle';
		result = getDescription('F;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very small; stars very faint';
		result = getDescription('Cl;vS;st vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; difficult';
		result = getDescription('F;vS;R;diff');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended';
		result = getDescription('vF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; pretty large; north rich; north compressed; 12 stars and grainy back at 135X';
		result = getDescription('13\'\'-pF; pL; nRi; nC; 12* and grainy back at 135X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; rich; compressed; irregular round; stars from 12th to 15th magnitude';
		result = getDescription('Cl;pL;Ri;C;iR;*12..15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar nebula';
		result = getDescription('stellar neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; very little/long brighter middle';
		result = getDescription('vF;S;R;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long brighter middle';
		result = getDescription('vF;S;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; much brighter middle';
		result = getDescription('vF;vS;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; stellar';
		result = getDescription('F;vS;R;stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended; cometic';
		result = getDescription('eF;S;lE;com');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '36 arcseconds 81 galaxies counted in 2 degree; 17 pretty bright';
		result = getDescription('36\'\' 81 galaxies counted in 2 deg; 17 pB');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small';
		result = getDescription('F;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; north preceding 1278';
		result = getDescription('vF;vS;np 1278');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; brighter middle';
		result = getDescription('pB;pS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; star of 11th magnitude preceding 1 arcminutes';
		result = getDescription('vF;S;*11p1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;S;lbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long brighter middle';
		result = getDescription('vF;S;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; brighter middle; north preceding of 2';
		result = getDescription('vF;R;bM;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; brighter middle; south following of 2';
		result = getDescription('vF;R;bM;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '10X50-vB; very very large; scattered; 39 stars';
		result = getDescription('10X50-vB; vvL; scattered; 39*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint stars in very faint; small nebula';
		result = getDescription('vF st in vF;S neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; star of 10th magnitude north following';
		result = getDescription('F;L;*10 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; little/long brighter middle';
		result = getDescription('eF;pL;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; in very faint; extremely/excessively small nebula';
		result = getDescription('vF;in vF;eS neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; ab 60 stars';
		result = getDescription('Cl;vL;ab60*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; little/long rich; stars large';
		result = getDescription('Cl;lRi;st L');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very large; very gradually brighter middle';
		result = getDescription('pB;vL;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'plan nebula = star of 10th magnitude; 9 magnitude stars preceding';
		result = getDescription('plan neb=* 10 mag; 9 mag * p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster of ab 30 stars from 12th to 14th magnitude';
		result = getDescription('Cl of ab 30*12...14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2';
		result = getDescription('2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; pretty bright stars near preceding';
		result = getDescription('pF;pS;R;pB* nr p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; extremely/excessively small; little/long elongated/extended north suddenly/south; star of 13th magnitude north 4 arcseconds; star of 12th magnitude south preceding 18 arcseconds';
		result = getDescription('pB;eS;lE ns;*13 n 4\'\';*12 sp 18\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; small; irregular figure; brighter middle; resolvable (mottled not resolved); stars involved/involving';
		result = getDescription('vB;S;iF;bM;r;* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very large; much elongated/extended north suddenly/south; diffused';
		result = getDescription('vF;vL;mE ns;dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; segment of a ring';
		result = getDescription('Cl;segment of a ring');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; very rich; preceding compressed; stars very large';
		result = getDescription('Cl;L;vRi;pC;st vL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; bright; very rich; considerably compressed';
		result = getDescription('Cl;B;vRi;cC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; pretty small; north rich; compressed; 8 stars with fuzzy background at 165X';
		result = getDescription('13\'\'-pF; pS; nRi; C; 8* with fuzzy backrnd at 165X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; little/long compressed; stars large';
		result = getDescription('Cl;pRi;lC;st L');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; little/long rich; little/long compressed; stars from 10th to 12th magnitude';
		result = getDescription('Cl;vL;lRi;lC;*10..12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very large; irregular round; much brighter middle; star of 8th magnitude 2 arcminutes north following';
		result = getDescription('pB;vL;iR;mbM;*8 2\' nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; preceding rich; little/long compressed; stars large';
		result = getDescription('Cl;vL;pRi;lC;st L');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very faint; pretty small; compressed; stars extremely/excessively small';
		result = getDescription('Cl;vF;pS;C;st eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably large; irregular figure; 6 or 7 stars + nebula';
		result = getDescription('F;cL;iF;6or7*+ neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; pretty small; north compressed; north rich at 100X; 2 stars 10th magnitude and 12 star of 12th magnitude much';
		result = getDescription('13\'\'-pF; pS; nC; nRi at 100X; 2* 10m and 12* 12m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; preceding of 2';
		result = getDescription('eF;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; following of 2';
		result = getDescription('eeF;S;R;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; gradually brighter middle; 1 stars of 4';
		result = getDescription('eF;S;R;gbM;1st of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; 2 north diameter of 4';
		result = getDescription('eF;vS;R;2nd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually brighter middle; 3 resolvable (mottled not resolved) diameter of 4';
		result = getDescription('vF;S;R;gbM;3rd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle; 4th of 4';
		result = getDescription('F;S;R;gbM;4th of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;pS;R;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; much brighter middle';
		result = getDescription('pB;S;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; gradually little/long brighter middle; 3 stars following';
		result = getDescription('vF;pS;R;glbM;3 st f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; preceding of 2';
		result = getDescription('vF;S;R;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; among stars; following of 2';
		result = getDescription('F;S;R;am st;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round; gradually very little/long brighter middle';
		result = getDescription('eF;pL;R;gvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; star of 12th magnitude following';
		result = getDescription('F;S;R;* 12 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; brighter middle; preceding of 2';
		result = getDescription('pF;S;R;bM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; little/long brighter middle';
		result = getDescription('eF;vS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; little/long elongated/extended; very gradually brighter middle; following of 2';
		result = getDescription('vF;lE;vgbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; little/long brighter middle; 3 stars preceding';
		result = getDescription('vF;vS;R;lbM;3 st p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; stellar';
		result = getDescription('F;S;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; star of 7.8 magnitude south preceding 3 arcminutes';
		result = getDescription('eF;vS;* 7.8 sp 3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively small; stellar; = star of 7th magnitude much';
		result = getDescription('eS;stellar;= * 7 m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle';
		result = getDescription('vF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; little/long elongated/extended';
		result = getDescription('eF;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle; among star of 11th magnitude';
		result = getDescription('F;S;R;bM;am * 11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; much elongated/extended; gradually pretty much brighter middle';
		result = getDescription('B;L;mE;gpmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually pretty much brighter middle; preceding of 2';
		result = getDescription('F;S;R;gpmbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; very little/long elongated/extended; gradually little/long brighter middle; following of 2';
		result = getDescription('F;S;vlE;glbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; gradually brighter middle';
		result = getDescription('B;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; round; suddenly/south brighter middle';
		result = getDescription('cF;vS;R;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; suddenly/south very much brighter middle';
		result = getDescription('F;vS;svmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle; star of 7th magnitude south following';
		result = getDescription('vF;vS;R;bM;*7 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; little/long brighter middle; star of 8th magnitude following 4 arcminutes';
		result = getDescription('pF;pS;R;lbM;*8f4\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; small; little/long elongated/extended; pretty suddenly brighter middle; star of 8th magnitude following';
		result = getDescription('cB;S;lE;psbM;*8 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; round; very gradually brighter middle';
		result = getDescription('pF;L;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; considerably small; elongated/extended; gradually; suddenly/south brighter middle; star of 8th magnitude - 9 preceding';
		result = getDescription('B;cS;E;g;sbM;*8-9 p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; small; very little/long elongated/extended; suddenly/south very much brighter middle star of 14th magnitude';
		result = getDescription('cB;S;vlE;svmbM *14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; round; gradually brighter middle';
		result = getDescription('B;pL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably small; round; gradually much brighter middle';
		result = getDescription('pB;cS;R;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; resolvable (mottled not resolved) or stars involved/involving';
		result = getDescription('vF;S;R;r or * inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; pretty much brighter middle';
		result = getDescription('pF;S;R;pmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; very gradually little/long brighter middle; star of 11th magnitude south following; nebula';
		result = getDescription('F;S;R;vglbM;*11 sf;neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; brighter middle; 4 bright stars preceding';
		result = getDescription('pF;S;R;bM;4B*p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; round; brighter middle; difficult; preceding of 2';
		result = getDescription('eeF;R;bM;difficult;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; round; brighter middle; difficult; preceding of 2';
		result = getDescription('eeF;R;bM;diffic;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round';
		result = getDescription('eF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round; very little/long brighter middle';
		result = getDescription('eF;pL;R;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; very little/long brighter middle';
		result = getDescription('eF;pS;R;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; 3 stars 10 south preceding';
		result = getDescription('eF;pS;R;3* 10 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; gradually little/long brighter middle';
		result = getDescription('pB;pS;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; 3 stars 10 south preceding';
		result = getDescription('eeF;vS;3* 10 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very little/long compressed; stars large and small';
		result = getDescription('Cl;vlC;st L & S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; star of 12th magnitude very near';
		result = getDescription('eF;S;R;*12 vnr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; round; star of 15th magnitude attached';
		result = getDescription('eeF;R;*15 att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; brighter middle';
		result = getDescription('pF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; little/long elongated/extended; very gradually brighter middle; preceding of 2';
		result = getDescription('vF;lE;vgbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; little/long elongated/extended; very gradually very little/long brighter middle; following of 2';
		result = getDescription('vF;lE;vgvlbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; very gradually little/long brighter middle';
		result = getDescription('vF;S;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; among stars';
		result = getDescription('eF;vS;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle';
		result = getDescription('F;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; much elongated/extended 90; cometic; 2 stars involved/involving';
		result = getDescription('vF;pS;mE90;com;2*inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; gradually little/long brighter middle';
		result = getDescription('pB;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; very gradually brighter middle; star of 14th magnitude attached preceding';
		result = getDescription('pB;pL;R;vgbM;*14 att p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small';
		result = getDescription('eeF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated/extended or has extremely/excessively faint stars near';
		result = getDescription('eF;S;E or has eF st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; irregular round; gradually little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('B;pL;iR;glbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; suddenly/south brighter middle Nucleus or to a Nucleus; bright double stars preceding 8 arcseconds';
		result = getDescription('vF;vS;R;sbMN;B D* p8\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; very little/long elongated/extended; very gradually little/long brighter middle';
		result = getDescription('F;pL;vlE;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; little/long elongated/extended; gradually brighter middle; 1 stars of 4';
		result = getDescription('pB;pL;lE;gbM;1st of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably small; round; suddenly/south brighter middle stars; 2 north diameter of 4';
		result = getDescription('cB;cS;R;sbM*;2nd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; preceding of double nebula; 3 resolvable (mottled not resolved) diameter of 4';
		result = getDescription('cF;S;R;p of Dneb;3rd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; round; following of double nebula; 4th of 4';
		result = getDescription('B;pL;R;f of Dneb;4th of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; star of 8th magnitude suddenly/south 2 arcminutes';
		result = getDescription('eF;S;R;*8 s 2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; little/long brighter middle';
		result = getDescription('pF;pS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round; gradually brighter middle; 1 stars of 4';
		result = getDescription('F;R;gbM;1st of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; round; stellar; 3 resolvable (mottled not resolved) diameter of 4';
		result = getDescription('cF;R;stell;3rd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; stellar; 2 north diameter of 4';
		result = getDescription('eF;S;stell;2nd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; little/long elongated/extended; gradually brighter middle; 4th of 4';
		result = getDescription('pB;L;lE;gbM;4th of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; almost planetary';
		result = getDescription('vF;vS;R;alm planetary');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty large; irregular round; partially resolved some stars seen';
		result = getDescription('pL;iR;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle; resolvable (mottled not resolved); 2 very small stars near';
		result = getDescription('F;S;R;gbM;r;2 vS st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; little/long elongated/extended; brighter middle';
		result = getDescription('pF;S;lE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; very gradually little/long brighter middle';
		result = getDescription('F;pL;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended; gradually little/long brighter middle; binary?';
		result = getDescription('vF;S;E;glbM;biN?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round; very little/long brighter middle';
		result = getDescription('eF;pL;R;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; little/long brighter middle';
		result = getDescription('eF;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty small; very little/long elongated/extended; gradually little/long brighter middle; bright triple star south preceding';
		result = getDescription('cB;pS;vlE;glbM;B*** sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; very little/long elongated/extended; preceding of 2';
		result = getDescription('F;cS;vlE;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; very little/long elongated/extended; following of 2';
		result = getDescription('F;cS;vlE;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; very gradually very little/long brighter middle';
		result = getDescription('vF;pS;R;vgvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually brighter middle';
		result = getDescription('vF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended; star of 11th magnitude preceding';
		result = getDescription('vF;S;lE;*11 p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; elongated/extended';
		result = getDescription('eF;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; large; much elongated/extended 0; very little/long brighter middle';
		result = getDescription('cF;L;mE0;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; very much elongated/extended 0; very gradually very little/long brighter middle';
		result = getDescription('F;pL;vmE0;vgvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; much elongated/extended; spindle shaped';
		result = getDescription('vF;pS;mE;spindle shaped');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; much elongated/extended 145 degree; considerably brighter middle';
		result = getDescription('pF;pS;mE 145 deg;cbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; pretty suddenly brighter middle';
		result = getDescription('vF;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; double stars; nebulous?';
		result = getDescription('vF;D*;nebulous?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; stellar';
		result = getDescription('vF;S;R;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; gradually brighter middle';
		result = getDescription('vF;pL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; very difficult; south following 7816';
		result = getDescription('eeF;pS;v diffic;sf 7816');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; very suddenly/south much brighter middle; star of 14th magnitude south preceding';
		result = getDescription('pF;vS;vsmbM;*14 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; star of 10th magnitude north preceding';
		result = getDescription('pF;S;R;*10np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; gradually brighter middle';
		result = getDescription('vF;S;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; star of 12th magnitude - 13 north following';
		result = getDescription('vF;S;R;*12-13 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; nebula star of 13th magnitude much';
		result = getDescription('eF;neb * 13 m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; very gradually pretty suddenly much brighter middle; 2 stars 9th magnitude and fainter south following';
		result = getDescription('vF;vS;R;vgpsmbM;2 st 9 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small';
		result = getDescription('eeF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; preceding of double nebula';
		result = getDescription('eF;p of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; following of double nebula';
		result = getDescription('eF;f of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; almost stellar';
		result = getDescription('F;vS;R;alm stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; very gradually little/long brighter middle';
		result = getDescription('eF;pL;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; or nebula stars';
		result = getDescription('eF;vS;or neb st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; irregular figure';
		result = getDescription('vF;pS;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; much brighter middle';
		result = getDescription('F;S;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'Nebula (Auw. 2)';
		result = getDescription('Nebula (Auw. 2)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively large; difficult';
		result = getDescription('eF;eL;diff');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; suddenly/south brighter middle';
		result = getDescription('F;S;R;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; little/long brighter middle';
		result = getDescription('eF;vS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round; pretty suddenly very little/long brighter middle';
		result = getDescription('vF;S;iR;psvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; suddenly/south brighter middle';
		result = getDescription('pF;S;R;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - faint; pretty large; north bright middle at 150X; low surface brightness';
		result = getDescription('13\'\'-F; pL;  nBM at 150X; low surf brightness');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; gradually brighter middle';
		result = getDescription('F;pL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; gradually brighter middle';
		result = getDescription('vF;pL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; much elongated/extended';
		result = getDescription('vF;pS;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; round; little/long brighter middle';
		result = getDescription('pF;vS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; very little/long brighter middle';
		result = getDescription('vF;S;R;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; brighter middle; double stars south preceding';
		result = getDescription('vF;S;bM;D * sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended';
		result = getDescription('vF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; preceding NGC 128';
		result = getDescription('vF;vS;R;p NGC 128');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; little/long elongated/extended 2 degrees; brighter middle';
		result = getDescription('pB;pS;lE 2 degrees;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; following NGC 128';
		result = getDescription('vF;vS;R;f NGC 128');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; irregular figure; little/long brighter middle';
		result = getDescription('F;iF;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; extremely/excessively small; suddenly/south brighter middle';
		result = getDescription('F;eS;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular round';
		result = getDescription('vF;vS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular round; stars north preceding involved/involving';
		result = getDescription('vF;pL;iR;* np inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round; very gradually brighter middle';
		result = getDescription('vF;S;iR;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; little/long brighter middle';
		result = getDescription('F;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended; several stars near south preceding';
		result = getDescription('vF;S;lE;sev st nr sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; preceding of 2; star of 15th magnitude close south preceding';
		result = getDescription('F;L;p of 2;* 15 close sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; very gradually brighter middle';
		result = getDescription('pB;S;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; very gradually brighter middle';
		result = getDescription('F;S;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; star of 8th magnitude preceding 27 arcseconds; 45 arcseconds suddenly/south';
		result = getDescription('F;vS;* 8 p 27 sec;45\'\' s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; very gradually brighter middle';
		result = getDescription('pB;S;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; irregular brighter middle';
		result = getDescription('eF;vS;ibM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round; star of 9th magnitude south preceding 8 arcminutes';
		result = getDescription('F;R;* 9 sp 8\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; very gradually brighter middle; following of 2';
		result = getDescription('F;pS;R;vgbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; much brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;S;mbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint';
		result = getDescription('pF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; between 2 small stars';
		result = getDescription('F;S;bet 2 S st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; irregular little/long elongated/extended; brighter middle';
		result = getDescription('F;pS;ilE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large';
		result = getDescription('vF;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; stars near suddenly/south';
		result = getDescription('vF;S;R;* nr s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - very faint; pretty small; very elongated/extended 3X1 in position angle 150; suddenly/south bright middle at 150X';
		result = getDescription('13\'\'-vF; pS; vE 3X1 in PA 150; sBM at 150X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; among 3 stars';
		result = getDescription('eF;vS;R;am 3 st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; little/long brighter middle; stars involved/involving; 2 very small stars following';
		result = getDescription('vF;S;R;lbM;* inv;2 vS st f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'poor large; little/long elongated/extended; gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('PL;lE;gbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; little/long elongated/extended; pretty suddenly brighter middle; resolvable (mottled not resolved); star of 8th magnitude south following 4 arcminutes';
		result = getDescription('pB;pS;lE;psbM;r;* 8 sf 4\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; little/long brighter middle';
		result = getDescription('F;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; star of 10th magnitude arcseconds north; 296 north following';
		result = getDescription('F;S;R;* 10\'\'n;296 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large faint; star of 10th magnitude north following 2 arcminutes';
		result = getDescription('F;LF;* 10 nf 2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; scattered stars';
		result = getDescription('Cl;S;sc st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; round; gradually brighter middle';
		result = getDescription('pF;vS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; 1 arcminutes north preceding 315';
		result = getDescription('vF;eS;1\' np 315');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; gradually brighter middle; star of 9th magnitude north following 3 arcminutes';
		result = getDescription('pB;pL;R;gbM;* 9 nf 3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; stellar; 1 arcminutes following 315';
		result = getDescription('vF;eS;stellar;1\'f 315');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle';
		result = getDescription('vF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; little/long elongated/extended; star of 9th magnitude - 10 south following';
		result = getDescription('F;lE;* 9-10 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; several stars near suddenly/south';
		result = getDescription('vF;S;R;sev * nr s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular figure; brighter middle';
		result = getDescription('vF;vS;iF;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; very small stars involved/involving; star of 14th magnitude close preceding';
		result = getDescription('vF;vS;R;vS * inv;* 14 close p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; star of 13th magnitude suddenly/south 1 5 arcseconds; diffused';
		result = getDescription('vF;* 13 s1 5\'\';dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar; much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('stellar;mbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; between 2 stars 15th magnitude and fainter';
		result = getDescription('F;S;bet 2 st 15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; brighter middle';
		result = getDescription('pF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; suddenly/south brighter middle';
		result = getDescription('pF;S;R;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; south preceding of double nebula';
		result = getDescription('vF;S;R;sp of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; gradually brighter middle; north following double nebula';
		result = getDescription('pF;pL;R;gbM;nf Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; south preceding of 2';
		result = getDescription('pF;pS;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; north following of 2';
		result = getDescription('pF;pS;R;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round';
		result = getDescription('cF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar';
		result = getDescription('vF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended';
		result = getDescription('eF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; much brighter middle; between 2 stars';
		result = getDescription('F;vS;R;mbM;bet 2 st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; 50 arcseconds north following 392';
		result = getDescription('F;S;50\'\' nf 392');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; very faint stars preceding';
		result = getDescription('eF;S;R;vf * p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar';
		result = getDescription('vF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; Globular Cluster 217 following';
		result = getDescription('eF;vS;GC 217 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; stellar; 217 following';
		result = getDescription('eF;stellar;217 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; 217 suddenly/south 3 arcminutes';
		result = getDescription('eF;vS;R;217 s 3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; considerably elongated/extended; star of 11th magnitude suddenly/south 85 arcseconds';
		result = getDescription('vF;pS;cE;* 11 s 85\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; south preceding of 2';
		result = getDescription('vF;vS;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; 410 following 8 arcseconds';
		result = getDescription('vF;vS;410 foll 8\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; north following of 2';
		result = getDescription('pB;pL;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round; much brighter middle; 410 north preceding';
		result = getDescription('vF;S;iR;mbM;410 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; brighter middle';
		result = getDescription('F;pS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; round; faint stars north preceding';
		result = getDescription('pF;vS;R;F * np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; star of 15th magnitude preceding 8 arcminutes on parallel';
		result = getDescription('F;S;R;*15 p 8\' on parallel');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; brighter middle; star of 11th magnitude north following';
		result = getDescription('F;pL;bM;*11 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; much elongated/extended 135; little/long brighter middle';
		result = getDescription('vF;mE135;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; almost stellar';
		result = getDescription('F;vS;alm stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; stellar';
		result = getDescription('F;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; very little/long brighter middle; very faint stars involved/involving';
		result = getDescription('vF;vS;R;vlbM;vF * inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; very little/long brighter middle';
		result = getDescription('vF;vS;R;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; elongated/extended; star of 9th magnitude north preceding; small stars north following; very near';
		result = getDescription('vF;E;*9 np;S* nf;v nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; very faint stars involved/involving';
		result = getDescription('vF;vS;R;vF * inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - extremely/excessively faint; pretty large; north bright middle; irregular round; somewhat mottled at 100X';
		result = getDescription('13\'\'-eF;pL;nBM;irR;somewhat mottled at 100X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; stellar';
		result = getDescription('eF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; little/long brighter middle';
		result = getDescription('eF;vS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; gradually brighter middle';
		result = getDescription('pB;pL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; irregular round';
		result = getDescription('pB;L;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; stellar';
		result = getDescription('vF;eS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula star of 12th magnitude much';
		result = getDescription('neb *12m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; suddenly/south much brighter middle; following of 2';
		result = getDescription('pB;S;smbM; f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; stellar';
		result = getDescription('eF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; stars from 9th to 10th magnitude preceding 14 arcminutes; very difficult';
		result = getDescription('eF;vS;*9..10 p 14\';vdif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; round; star of 8th magnitude south preceding 3.5 arcminutes';
		result = getDescription('cF;pL;R;*8 sp 3.5\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; stellar; 5 arcminutes Nucleus or to a Nucleus of 488';
		result = getDescription('eF;eS;stel;5\'N of 488');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; round; suddenly/south very much brighter middle; star of 8th magnitude faint 10 arcminutes';
		result = getDescription('pB;L;R;svmbM;*8F10\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; VS';
		result = getDescription('vF;VS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; elongated/extended';
		result = getDescription('pB;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; 8 arcminutes north following 488';
		result = getDescription('vF;vS;R;8\' nf 488');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; much brighter middle; star of 11th magnitude north following 1 arcminutes';
		result = getDescription('vF;vS;mbM;*11 nf 1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; elongated/extended; 3 following stars small';
		result = getDescription('vF;pL;E;3f*S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; 1 stars of 3';
		result = getDescription('vF;S;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; small; round; brighter middle Nucleus or to a Nucleus';
		result = getDescription('cB;S;R;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar';
		result = getDescription('vF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; 2 north diameter of 3';
		result = getDescription('vF;vS;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; north preceding 499';
		result = getDescription('eeF;np 499');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('pB;pL;R;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended';
		result = getDescription('vF;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; double star of 4th magnitude arcminutes south preceding';
		result = getDescription('eF;eS;D*4\' sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; small stars involved/involving; small stars attached';
		result = getDescription('eF;vS;S* inv;S* att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; south preceding 507';
		result = getDescription('vF;vS;sp 507');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; brighter middle; suddenly/south of 2';
		result = getDescription('vF;pL;R;bM;s of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; Nucleus or to a Nucleus of 2';
		result = getDescription('vF;S;N of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended';
		result = getDescription('vF;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; little/long elongated/extended; very gradually little/long brighter middle; double star faint';
		result = getDescription('F;L;lE;vglbM;**F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; very difficult; 524 following';
		result = getDescription('eF;S;v diffic;524 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round';
		result = getDescription('F;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; round; north preceding of 2';
		result = getDescription('pF;vS;R;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably large; elongated/extended 137 degree';
		result = getDescription('F;cL;E 137 deg');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; round; stellar; south following of 2';
		result = getDescription('pF;R;stellar;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; irregular figure; (compressed large + nebula)';
		result = getDescription('eF;pL;iF;(CL+ neb)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; much brighter middle; 4 small stars near';
		result = getDescription('vB;pL;mbM;4S* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; star of 11th magnitude and 12 preceding 5 arcminutes';
		result = getDescription('vF;vS;*11 & 12 p 5\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; elongated in position angle 30 degrees; brighter middle';
		result = getDescription('vF;pL;E30;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; stellar; preceding of 2';
		result = getDescription('vS;stellar;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; stellar; following of 2';
		result = getDescription('vS;stellar;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; star of 13th magnitude; 14 south preceding';
		result = getDescription('vF;pS;*13;14 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; irregular round';
		result = getDescription('eF;pL;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; very little/long brighter middle; resolvable (mottled not resolved) ?';
		result = getDescription('eF;pS;R;vlbM;r?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very large; round; very gradually; pretty suddenly much brighter middle; partially resolved some stars seen';
		result = getDescription('F;vL;R;vg;psmbM;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; gradually brighter middle';
		result = getDescription('vF;S;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; pretty suddenly brighter middle';
		result = getDescription('pB;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round';
		result = getDescription('vF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; much elongated/extended';
		result = getDescription('F;pL;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; very difficult';
		result = getDescription('eeF;pS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; much elongated/extended; much brighter middle';
		result = getDescription('pF;pS;mE;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; (resolvable)';
		result = getDescription('F;vS;R;(resolvable)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; elongated/extended; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;pL;E;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;S;lE;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; much brighter middle Nucleus or to a Nucleus = star of 12th magnitude';
		result = getDescription('pB;S;R;mbMN=*12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; elongated in position angle 161 degrees; suddenly/south brighter middle star of 9th magnitude';
		result = getDescription('vF;E161;sbM*9');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; elongated in position angle 90 degrees; very gradually little/long brighter middle; star of 10th magnitude north following';
		result = getDescription('pF;S;E90;vglbM;*10 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; brighter middle; star of 13th magnitude north 1 arcminutes';
		result = getDescription('F;S;bM;*13n1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; irregular round; pretty suddenly much brighter middle';
		result = getDescription('pB;S;iR;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'suspected nebula';
		result = getDescription('suspected neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very stellar';
		result = getDescription('vF;very stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; preceding of 2';
		result = getDescription('pF;S;R;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; suddenly/south brighter middle; following of 2';
		result = getDescription('vF;vS;R;sbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; star of 11th magnitude; 2 arcminutes north preceding';
		result = getDescription('vF;S;R;*11;2\' np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; star of 14th magnitude following';
		result = getDescription('vF;S;*14 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; gradually brighter middle';
		result = getDescription('pF;pS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large';
		result = getDescription('vF;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stars slightly nebulous';
		result = getDescription('* slightly nebulous');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; very little/long elongated/extended';
		result = getDescription('vF;pS;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; brighter middle';
		result = getDescription('F;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; stellar';
		result = getDescription('vF;vS;R;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; considerably elongated/extended; faint stars close preceding';
		result = getDescription('eF;pS;cE;F* close p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty large; round; very difficult';
		result = getDescription('eeF;pL;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty large; round; stars near';
		result = getDescription('eeF;pL;R;* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; pretty suddenly brighter middle';
		result = getDescription('cF;cS;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round';
		result = getDescription('eF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; elongated/extended';
		result = getDescription('eF;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; very little/long elongated/extended; very gradually brighter middle';
		result = getDescription('vF;vS;vlE;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint nebula stars; (= 7477)';
		result = getDescription('F neb *;(=7477)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; brighter middle star of 15th magnitude; star of 17th magnitude attached; north = 7482';
		result = getDescription('F;S;bM*15;*17 att;n = 7482');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; stellar';
		result = getDescription('F;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended; pretty suddenly brighter middle';
		result = getDescription('vF;S;E;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar';
		result = getDescription('vF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; stellar';
		result = getDescription('vF;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar';
		result = getDescription('vF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; stellar';
		result = getDescription('vF;S;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; round; suddenly/south brighter middle star of 15th magnitude';
		result = getDescription('cF;vS;R;sbM*15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar';
		result = getDescription('vF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; pretty suddenly brighter middle';
		result = getDescription('vF;pS;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; almost stellar';
		result = getDescription('eF;vS;alm stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended';
		result = getDescription('vF;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; little/long elongated/extended';
		result = getDescription('eF;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; round; brighter middle; south preceding of 2';
		result = getDescription('vF;cS;R;bM;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; much elongated/extended 97; much brighter middle; north following of 2';
		result = getDescription('B;L;mE97;mbM;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; much elongated/extended; star of 12th magnitude - 13 close following';
		result = getDescription('vF;mE;*12-13 close f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended';
		result = getDescription('eF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; stellar Nucleus or to a Nucleus';
		result = getDescription('vF;eS;stellar N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; almost stellar; 7556 following';
		result = getDescription('eF;eS;alm stell;7556 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; round; bright double star following';
		result = getDescription('cF;pL;R;B** f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; preceding of 2';
		result = getDescription('vF;vS;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; irregular round; south preceding of 2';
		result = getDescription('F;vS;iR;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; irregular round; north following of 2';
		result = getDescription('F;vS;iR;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty small; irregular round; pretty suddenly brighter middle';
		result = getDescription('cB;pS;iR;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; 3 faint stars south following';
		result = getDescription('vF;S;R;3 F st sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; elongated/extended; easily resolvable; 3 faint stars involved/involving';
		result = getDescription('vF;pS;E;er;3 F st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; very little/long elongated/extended';
		result = getDescription('F;S;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 13.5 magnitude in very faint nebula';
		result = getDescription('*13.5 in vF neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; brighter middle';
		result = getDescription('eF;vS;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually little/long brighter middle';
		result = getDescription('vF;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; very gradually brighter middle';
		result = getDescription('pF;S;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; stellar';
		result = getDescription('F;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; triangle with 2 stars 19th magnitude and fainter north';
		result = getDescription('F;S;R;triangle w 2 st 19 n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; north following of 2';
		result = getDescription('vF;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar';
		result = getDescription('vF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; brighter middle';
		result = getDescription('vF;vS;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; surround 7667';
		result = getDescription('vF;surround 7667');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; surround 7667';
		result = getDescription('vF;surround 7667');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; surround 7667';
		result = getDescription('vF;surround 7667');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; much brighter middle Nucleus or to a Nucleus; stellar';
		result = getDescription('pB;S;R;mbMN;stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; star of 14th magnitude preceding 13.7 arcseconds; little/long north';
		result = getDescription('eF;*14 p 13.7 sec;ln');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; star of 13th magnitude north';
		result = getDescription('F;*13 n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; stellar';
		result = getDescription('F;vS;stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably large; round; gradually brighter middle; double star near';
		result = getDescription('eF;cL;R;gbM;** nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; star of 11th magnitude following 1 suddenly/south; north 85 arcseconds';
		result = getDescription('vF;vS;*11 f 1s;n 85\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small nebula or nebulous star of 14th magnitude';
		result = getDescription('S neb or neb* 14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; stellar; near 7694';
		result = getDescription('eF;stell;nr 7694');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; stellar';
		result = getDescription('eF;pL;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended';
		result = getDescription('F;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; stellar';
		result = getDescription('vF;eS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; much brighter middle; star of 11th magnitude south preceding';
		result = getDescription('vF;S;R;mbM;*11 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; star of 12th magnitude preceding; south preceding of 2';
		result = getDescription('eF;*12 p;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; star of 18th magnitude close suddenly/south; north following of 2';
		result = getDescription('vF;pS;*18 close s;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; stellar';
		result = getDescription('pF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; pretty suddenly brighter middle; star of 12th magnitude south preceding; stars 6 south following';
		result = getDescription('pB;S;R;psbM;*12 sp;*6 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round';
		result = getDescription('eF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; little/long elongated/extended; gradually brighter middle; star of 10th magnitude suddenly/south';
		result = getDescription('F;pL;lE;gbM;*10 s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small';
		result = getDescription('F;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large';
		result = getDescription('vF;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; north of 2';
		result = getDescription('vF;n of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'suddenly/south of 2; very near';
		result = getDescription('s of 2;vnr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; stars near small';
		result = getDescription('eF;pS;R;* nr S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; very little/long elongated/extended 0; little/long brighter middle; star of 11th magnitude south following';
		result = getDescription('cF;pL;vlE0;lbM;*11 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle; easily resolvable';
		result = getDescription('F;S;R;gbM;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula; 5 arcminutes south preceding 7757';
		result = getDescription('neb;5\' sp 7757');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably large; very little/long elongated/extended; very gradually little/long brighter middle; 2 stars 13th magnitude and fainter north';
		result = getDescription('vF;cL;vlE;vglbM;2 st 13 n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; pretty suddenly brighter middle; stellar; 1 stars of 4';
		result = getDescription('cF;S;R;psbM;stellar;1st of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; pretty suddenly brighter middle; stellar; 2 north diameter of 4';
		result = getDescription('pF;S;R;psbM;stellar;2nd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; little/long brighter middle; faint stars involved/involving';
		result = getDescription('vF;vS;R;lbM;F* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; 3 resolvable (mottled not resolved) diameter of 4';
		result = getDescription('F;S;R;3rd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; little/long elongated/extended; gradually little/long brighter middle; 4th of 4';
		result = getDescription('pF;pL;lE;glbM;4th of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended';
		result = getDescription('F;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; irregular round; pretty suddenly brighter middle; resolvable (mottled not resolved); star of 8th magnitude preceding 4.5 arcminutes';
		result = getDescription('pB;pS;iR;psbM;r;* 8 p 4\'.5');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; irregular round; little/long brighter middle';
		result = getDescription('eF;pS;iR;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; very little/long brighter middle';
		result = getDescription('eF;pS;R;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; pretty suddenly little/long brighter middle';
		result = getDescription('eF;S;R;pslbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; bright; poor; star of 8th magnitude th magnitude and fainter';
		result = getDescription('Cl;B;P;*8...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; irregular round; gradually brighter middle; partially resolved some stars seen';
		result = getDescription('B;pL;iR;gbM;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; very much elongated/extended 45 degree; pretty suddenly little/long brighter middle';
		result = getDescription('pB;pL;vmE 45 deg;pslbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long elongated/extended; brighter middle; among stars';
		result = getDescription('vF;S;vlE;bM;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - very bright; very very large; north compressed; scattered 38 stars at 60X';
		result = getDescription('13\'\'-vB;vvL;nC;scattered  38* at 60X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - faint; pretty large; elongated/extended 3X1; dark nebula makes Fornax few stars';
		result = getDescription('13\'\'-F; pL; E 3X1; dark nebula makes for few stars');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; large; preceding rich; irregular round; 27 stars magnitude 10th magnitude and fainter at 100X';
		result = getDescription('13\'\'-pB;L;pRi;irR; 27* mags 10... at 100X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; pretty small; north rich; suddenly/south compressed at 100X; 17 stars';
		result = getDescription('13\'\'-pF;pS;nRi;sC at 100X; 17*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; very little/long compressed';
		result = getDescription('Cl;vL;vlC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; pretty large; north rich; north compressed; 18 stars magnitude 11th magnitude and fainter at 135X';
		result = getDescription('13\'\'-pF;pL;nRi;nC; 18* mags 11... at 135X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - faint; small; 6 stars 12th magnitude at 135X';
		result = getDescription('13\'\'-F;S; 6* 12m at 135X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - faint; small; round; north bright middle; held steady at 220X';
		result = getDescription('13\'\'-F;S;R;nBM; held steady at 220X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; considerably rich; considerably compressed; stars very small';
		result = getDescription('Cl;S;cRi;cC;st vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; pretty large; suddenly/south compressed; 22 stars at 135X';
		result = getDescription('13\'\'-pB;pL;sC;  22* at 135X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small but bright; stars from 8th to 10th magnitude';
		result = getDescription('Cl;S but B;*8...10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - very faint; pretty large; round at 100X with UHC filter';
		result = getDescription('13\'\'-vF;pL;R at 100X with UHC filter');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; pretty small; 15 stars magnitude 11th magnitude and fainter at 135X';
		result = getDescription('13\'\'-pF;pS; 15* mags 11... at 135X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; small; north rich; north compressed at 135X; 6 stars magnitude 11th magnitude and fainter';
		result = getDescription('13\'\'-pF;S;nRi;nC at 135X; 6* mags 11...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; pretty small; north rich; north compressed; 7 stars 135X; asterism in horseshoe';
		result = getDescription('13\'\'-pF;pS;nRi;nC; 7* 135X; aster in horseshoe');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; little/long compressed; stars 9th magnitude and fainter th magnitude and fainter';
		result = getDescription('Cl;P;lC;st9...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; poor; very little/long compressed';
		result = getDescription('Cl;vL;P;vlC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - very faint; pretty large; elongated/extended 1.5X1; north bright middle at 100X with UHC filter';
		result = getDescription('13\'\'-vF;pL;E 1.5X1;nBM at 100X with UHC filter');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; considerably rich; stars from 11th to 13th magnitude';
		result = getDescription('Cl;L;cRi;*11...13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; large; pretty much elongated/extended; gradually much brighter middle; 2 stars involved/involving';
		result = getDescription('eF;L;pmE;gmbM;2* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; bright; very large; preceding rich; stars large and small';
		result = getDescription('Cl;B;vL;pRi;st L & S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster';
		result = getDescription('cluster');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - very faint; pretty small; elongated/extended 2X1 east-west at 135X with UHC filter';
		result = getDescription('13\'\'-vF;pS;E 2X1 E-W at 135X with UHC filter');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; rich; preceding compressed; stars very small';
		result = getDescription('Cl;vL;Ri;pC;st vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - bright; pretty large; much compressed; much bright middle; 48 stars magnitude 10th to 14th magnitude at 100X';
		result = getDescription('13\'\'-B;pL;mC;mBM;  48* mags 10..14 at 100X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - faint; pretty large; elongated/extended east-west at 100X; 14 stars magnitude 12th magnitude and fainter';
		result = getDescription('13\'\'-F;pL;E E-W at 100X;  14* mags 12...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; small; stars very small';
		result = getDescription('Cl;P;S;st vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; very little/long compressed';
		result = getDescription('Cl;vL;vlC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; very little/long compressed';
		result = getDescription('Cl;vL;vlC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; bright; preceding rich; pretty large; little/long compressed; star of 9th magnitude; 12th to 14th magnitude';
		result = getDescription('Cl;B;pRi;pL;lC;* 9;12...14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; preceding compressed; elongated/extended 0 degree; stars large and small';
		result = getDescription('Cl;pL;pC;E 0 deg;st L & S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; pretty small at 135X; 10 stars magnitude 11th magnitude and fainter';
		result = getDescription('13\'\'-pF;pS at 135X; 10* mags 11...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object; cluster; very bright; very rich; very large';
		result = getDescription('!;Cl;vB;vRi;vL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; very little/long elongated/extended; resolvable (mottled not resolved); 3 s. 75 diameter';
		result = getDescription('pB;pS;vlE;r;3s.75 d');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; not very well defined';
		result = getDescription('cB;not v well def');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '11 arcseconds - faint; large; very irregular faint; crescent shape; low surface brightness';
		result = getDescription('11\'\'-F; L; virF; crescent shape; low surf brightness');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; preceding rich; little/long compressed; stars 8th magnitude and fainter th to 13th magnitude';
		result = getDescription('Cl;L;pRi;lC;st8...13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster of 18 or 20 stars from 11th to 13th magnitude';
		result = getDescription('Cl of 18 or 20* 11...13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; pretty large; north rich; north compressed at 135X; 21 stars magnitude 11th magnitude and fainter';
		result = getDescription('13\'\'-pB;pL;nRi;nC at 135X; 21* mags 11...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very very large; very little/long compressed; one star of 4.5 magnitude';
		result = getDescription('Cl;vvL;vlC;one *4.5');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; pretty small; very compressed; north rich at 165X';
		result = getDescription('13\'\'-pB;pS;vC;nRi at 165X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended; among 60 stars';
		result = getDescription('F;S;lE;am 60*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; preceding rich; preceding compressed';
		result = getDescription('Cl;S;pRi;pC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - faint; pretty large; north rich; north compressed; 10 stars and fuzz at 135X';
		result = getDescription('13\'\'-F; pL; nRi; nC; 10* and fuzz at 135X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; considerably large; preceding rich; little/long compressed; stars 12th magnitude and fainter';
		result = getDescription('Cl;cL;pRi;lC;st12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; small; preceding rich; very compressed; 19 stars magnitude 11th magnitude and fainter at 165X';
		result = getDescription('13\'\'-pB;S;pRi;vC; 19* mags 11... at 165X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object; cluster; bright; rich; large; little/long compressed; star of 12th magnitude';
		result = getDescription('!;Cl;B;Ri;L;lC;*12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very large; round; easily resolvable; star of 8th magnitude much';
		result = getDescription('pB;vL;R;er;*8m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; preceding rich; preceding compressed; stars small';
		result = getDescription('Cl;pL;pRi;pC;st S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; considerably rich; very little/long compressed';
		result = getDescription('Cl;L;cRi;vlC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; little/long compressed';
		result = getDescription('Cl;L;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; pretty large; north rich; north compressed at 100X; 22 stars magnitude 11th to 13th magnitude';
		result = getDescription('13\'\'-pB;pL;nRi;nC at 100X; 22* mags 11...13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - faint; pretty small; compressed; 6 stars magnitude 12th magnitude and fainter at 135X';
		result = getDescription('13\'\'-F;pS;C; 6* mags 12... at 135X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; considerably rich; preceding compressed; stars from 11th to 13th magnitude';
		result = getDescription('Cl;pL;cRi;pC;* 11..13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; very little/long elongated/extended 90 degree; gradually little/long brighter middle; among stars';
		result = getDescription('cF;S;vlE 90 deg;glbM;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - bright; large; rich at 100X; 52 stars; seen in 11X80 finder';
		result = getDescription('13\'\'-B;L;Ri at 100X; 52* ; seen in 11X80 findr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; pretty large; north rich; north compressed at 100X; 8 stars resolved and glow';
		result = getDescription('13\'\'-pB;pL;nRi;nC at 100X; 8* resolv and glow');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; bright; preceding rich; little/long compressed; stars small';
		result = getDescription('Cl;B;pRi;lC;st S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; small; north rich; preceding compressed; 12 stars at 165X';
		result = getDescription('13\'\'-pF;S;nRi;pC; 12* at 165X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; between 3 stars 13 - 14';
		result = getDescription('F;vS;R;bet 3* 13-14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '4 arcseconds - pretty bright; very large; scattered; 78 stars; 6stars are magnitude 6 and 7';
		result = getDescription('4\'\'-pB; vL; scattered; 78*; 6* are mags 6 and 7');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; bright; preceding rich; preceding compressed';
		result = getDescription('Cl;B;pRi;pC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; preceding rich; little/long compressed; stars from 10th to 15th magnitude';
		result = getDescription('Cl;vL;pRi;lC;*10..15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; round; very gradually very little/long brighter middle; among stars';
		result = getDescription('cF;pL;R;vgvlbM;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; rich; compressed; star of 9th magnitude; 13th to 14th magnitude';
		result = getDescription('Cl;pL;Ri;C;*9;13..14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; rich; little/long compressed; stars from 11th to 13th magnitude';
		result = getDescription('Cl;vL;Ri;lC;*11...13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebulous star of 5th magnitude';
		result = getDescription('nebulous *5');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; bright; large; little/long compressed; irregular elongated/extended; stars from 9th to 12th magnitude';
		result = getDescription('Cl;B;L;lC;iE;*9...12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '10 arcseconds - bright; large; scattered; stars 10 to 12 magnitude; not much';
		result = getDescription('10\'\'-B; L; scattered; stars 10 to 12 mag; not much');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; gradually much brighter middle; among 60 stars';
		result = getDescription('F;pL;gmbM;am 60*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; faint stars involved/involving';
		result = getDescription('vF;pL;F* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually brighter middle; among many stars';
		result = getDescription('vF;S;R;gbM;am many*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; preceding rich; little/long compressed; irregular round; star of 11th magnitude .';
		result = getDescription('Cl;pL;pRi;lC;iR;*11.');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably large; extremely/excessively round; very small north extremely/excessively gradually or nebula star of 11th magnitude with star of 12th magnitude close';
		result = getDescription('vF;cL;eR;vS neg or neb *11 w *12 close');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; considerably rich; little/long compressed; stars 9';
		result = getDescription('Cl;vL;cRi;lC;st9');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'double stars in pretty small nebula; among 70 stars';
		result = getDescription('D* in pS neb;am 70*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very little/long elongated/extended; gradually brighter middle; resolvable (mottled not resolved); among 50 stars';
		result = getDescription('F;vlE;gbM;r;am 50*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; considerably large; preceding rich; preceding compressed; round; stars 12th magnitude and fainter';
		result = getDescription('Cl;cL;pRi;pC;R;st12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; faint; small; round; gradually brighter middle; stars 15th magnitude and fainter';
		result = getDescription('Cl;F;S;R;gbM;st 15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; pretty small; north compressed; north rich 18 stars at 135X';
		result = getDescription('13\'\'-pF;pS;nC;nRi  18* at 135X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty much compressed middle; irregular figure; stars 9th magnitude and fainter th to 13th magnitude';
		result = getDescription('Cl;pmCM;iF;st9...13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; large; very much elongated/extended 110 degree';
		result = getDescription('cB;L;vmE 110 deg');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; considerably large; preceding rich; preceding compressed; stars from 11th to 13th magnitude';
		result = getDescription('Cl;cL;pRi;pC;*11..13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty much compressed; irregular resolvable (mottled not resolved) triangle; stars 13th magnitude and fainter';
		result = getDescription('Cl;pmC;irr triangle;st 13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '11 arcseconds - pretty faint; small; round; very little/long bright middle; tiny disk at 200X';
		result = getDescription('11\'\'-pF; S; R; vlBM; tiny disk at 200X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty small; little/long rich; little/long compressed; irregular figure; stars 12th magnitude and fainter - 13';
		result = getDescription('Cl;pS;lRi;lC;iF;st12-13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '11 arcseconds - pretty faint; pretty small; north compressed; north rich; 8 stars in circlet';
		result = getDescription('11\'\'-pF; pS; nC; nRi; 8* in circlet');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; little/long elongated/extended';
		result = getDescription('pF;pS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; very gradually pretty much brighter middle';
		result = getDescription('pF;S;R;vgpmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; little/long elongated/extended; little/long brighter middle';
		result = getDescription('eF;lE;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object pretty bright; pretty large; round; very gradually little/long brighter middle; in large cluster';
		result = getDescription('!pB;pL;R;vglbM;in L Cl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; star of 11th magnitude attached';
		result = getDescription('eF;*11 att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very gradually little/long brighter middle; well resolved clearly consisting of stars; stars 15th magnitude and fainter';
		result = getDescription('vF;S;vglbM;rrr;st 15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; gradually much brighter middle';
		result = getDescription('cF;S;R;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle';
		result = getDescription('F;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; elongated/extended; very gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;L;E;vgbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; gradually little/long brighter middle; among 7 bright stars';
		result = getDescription('cF;S;R;glbM;am 7B*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; very little/long elongated/extended; pretty much brighter middle';
		result = getDescription('pB;S;vlE;pmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; star of 10th magnitude north preceding';
		result = getDescription('eF;pS;R;*10 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; gradually little/long brighter middle';
		result = getDescription('eF;vS;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually brighter middle';
		result = getDescription('vF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; very small star of 3th magnitude; 4 double south following';
		result = getDescription('F;S;R;vS*3;4D sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; pretty large; very little/long brighter middle';
		result = getDescription('vF;R;pL;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; elongated/extended; suddenly/south much brighter middle Nucleus or to a Nucleus = star of 11th magnitude';
		result = getDescription('B;pL;E;smbMN=*11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; brighter middle';
		result = getDescription('F;pL;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; much elongated/extended; very gradually pretty much brighter middle; star of 14th magnitude attached north';
		result = getDescription('vB;vL;mE;vgpmbM;*14 att n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; pretty gradually brighter middle; 2 small stars south following';
		result = getDescription('pB;S;R;pgbM;2S* sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; among stars';
		result = getDescription('vF;S;R;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '8X42 binoculars - very bright; very large; scattered; not much compressed large';
		result = getDescription('8X42 binocs-vB; vL; scattered; not much CL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably large; much elongated/extended; very gradually little/long brighter middle';
		result = getDescription('eF;cL;mE;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably large; very little/long elongated/extended; gradually little/long brighter middle';
		result = getDescription('F;cL;vlE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably large; much elongated/extended; gradually brighter much';
		result = getDescription('vF;cL;mE;gbm');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; very much elongated/extended; tri-nuclear';
		result = getDescription('vB;vL;vmE;triN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; little/long elongated/extended; star of 14th magnitude following';
		result = getDescription('pB;pL;lE;* 14f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; little/long elongated/extended; double star of 2th magnitude arcminutes north preceding';
		result = getDescription('vF;pL;lE;D * 2\'np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; pretty much elongated/extended; very gradually brighter middle; preceding of 2';
		result = getDescription('F;pL;pmE;vgbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; very much elongated/extended 47 degrees; pretty suddenly brighter middle; following of 2; star of 10th magnitude north preceding 45 arcseconds';
		result = getDescription('vB;L;vmE 47 degrees;psbM;f of 2;*10 np 45\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; small; little/long elongated/extended 90 degrees; suddenly/south much brighter middle star of 11th magnitude';
		result = getDescription('vB;S;lE 90 degrees;smbM*11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round';
		result = getDescription('pF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended 160; stars north; perhaps spiral';
		result = getDescription('E 160; * n; perhaps spiral');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; very little/long elongated/extended; among bright stars';
		result = getDescription('eF;S;vlE;am B st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty small; little/long elongated/extended; suddenly/south much brighter middle; star of 8th magnitude north following 5 arcminutes';
		result = getDescription('vB;pS;lE;smbM;* 8 nf 5\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/very remarkable object very very bright; very very large; very much elongated/extended 54 degrees; gradually brighter middle';
		result = getDescription('!!vvB;vvL;vmE 54 degrees;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; very suddenly/south very much brighter middle star of 13th magnitude';
		result = getDescription('F;S;R;vsvmbM * 13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; pretty much elongated/extended; gradually brighter middle; star of 11th magnitude north preceding';
		result = getDescription('vB;L;pmE;gbM;* 11 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; little/long elongated/extended; stars from 12th to 16th magnitude';
		result = getDescription('B;L;lE;st 12...16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very large; very much irregular elongated/extended; very gradually pretty much brighter middle';
		result = getDescription('pB;vL;vmiE;vgpmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; pretty bright stars following 2 arcminutes';
		result = getDescription('eF;vS;R;pB * f 2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually little/long brighter middle; 2 stars 11th magnitude and fainter suddenly/south';
		result = getDescription('vF;S;R;glbM;2 st 11 s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very very large; most extremely faint; little/long elongated/extended';
		result = getDescription('vvL;eeF;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually little/long brighter middle';
		result = getDescription('F;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually brighter middle';
		result = getDescription('vF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; very small stars near';
		result = getDescription('eF;S;R;vS * nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually little/long brighter middle';
		result = getDescription('vF;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; very gradually little/long brighter middle; preceding of 2';
		result = getDescription('F;pL;R;vglbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated/extended; gradually little/long brighter middle; following of 2';
		result = getDescription('eF;S;E;glbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually little/long brighter middle';
		result = getDescription('vF;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '3 very small stars with nebula (?)';
		result = getDescription('3 vS st w neby (?)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually little/long brighter middle';
		result = getDescription('pF;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; gradually brighter middle';
		result = getDescription('pB;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually brighter middle';
		result = getDescription('pF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; round; gradually little/long brighter middle';
		result = getDescription('pB;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; very little/long elongated/extended; brighter middle; very small stars near';
		result = getDescription('B;S;vlE;bM;vS * nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended; brighter middle; faint of 2';
		result = getDescription('F;S;lE;bM;F of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; very gradually brighter middle; 1 stars of 4';
		result = getDescription('eeF;S;R;vgbM;1st of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; very gradually brighter middle; 4th of 4';
		result = getDescription('eeF;S;R;vgbM;4th of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; very gradually brighter middle; 2 north diameter of 4';
		result = getDescription('eeF;S;R;vgbM;2nd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; very gradually brighter middle; 3 resolvable (mottled not resolved) diameter or 4';
		result = getDescription('eeF;S;R;vgbM;3rd or 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; attached to stars; bright stars near';
		result = getDescription('eF;S;att to *;B* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; double stars position 225 degree involved/involving';
		result = getDescription('vS;D* pos 225 deg inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle';
		result = getDescription('F;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; star of 12th magnitude';
		result = getDescription('F;vS;R;*12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; very much elongated/extended 118; suddenly/south brighter middle; stars north following';
		result = getDescription('vB;vL;vmE118;sbM;* nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; round; preceding of 2';
		result = getDescription('eeF;vS;R;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; following of 2';
		result = getDescription('F;S;R;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; brighter middle';
		result = getDescription('pF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; brighter middle';
		result = getDescription('pF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; gradually brighter middle; double star north preceding';
		result = getDescription('pB;S;R;gbM;** np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; preceding of 2';
		result = getDescription('vF;vS;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; gradually brighter middle; following of 2; stars faint';
		result = getDescription('vF;pS;R;gbM;f of 2;*F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; little/long brighter middle; star of 8th magnitude - 9 attached suddenly/south';
		result = getDescription('pB;S;R;lbM;*8-9 att s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably small; round; pretty suddenly very much brighter middle; star of 10th magnitude north preceding';
		result = getDescription('pB;cS;R;psvmbM;*10 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; elongated/extended; gradually brighter middle';
		result = getDescription('vF;pL;E;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; suddenly/south brighter middle';
		result = getDescription('eF;S;R;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually little/long brighter middle';
		result = getDescription('vF;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very large; brighter middle; between 2 stars; double stars preceding 45 degree';
		result = getDescription('eF;vL;bM;bet 2 *;D* p 45 deg');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; elongated/extended; very gradually brighter middle';
		result = getDescription('pB;L;E;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually much brighter middle; star of 12th magnitude following';
		result = getDescription('vF;S;R;gmbM;* 12 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; considerably large; round; pretty suddenly much brighter middle';
		result = getDescription('B;cL;R;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'like a comet (1850)';
		result = getDescription('Like a comet (1850)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; preceding rich; stars very small';
		result = getDescription('Cl;pL;pRi;st vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; suddenly/south brighter middle';
		result = getDescription('vF;S;R;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + round';
		result = getDescription('E+R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '4 arcseconds - extremely/excessively faint; large; elongated/extended 1.8X1; low surface brightness';
		result = getDescription('4\'\'-eF; L; E 1.8X1; low surf brightness');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very large; extremely/excessively faint; elongated/extended; irregular; Nu-2 Scorpii involved/involving';
		result = getDescription('vL;eF;E;Irr;Nu-2 Scorpii inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; round; very gradually very little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pF;R;vgvlbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated/extended; little/long brighter middle';
		result = getDescription('eF;S;E;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; very much brighter middle; well resolved clearly consisting of stars; stars 14th magnitude and fainter...';
		result = getDescription('vB;L;vmbM;rrr;st 14...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'annular';
		result = getDescription('annular');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + round';
		result = getDescription('E+R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2 stars 8th magnitude and fainter in extremely/excessively large; diffused nebula; little/long elongated/extended north preceding south following';
		result = getDescription('2 st 8 in eL;dif neb;lE np sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; 8 or 10 bright stars in line; well resolved clearly consisting of stars';
		result = getDescription('Cl;8 or 10 B* in line;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; bright; large; preceding rich; little/long compressed middle; stars from 9th to 11th magnitude';
		result = getDescription('Cl;B;L;pRi;lCM;*9..11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; considerably large; much compressed; gradually brighter middle; well resolved clearly consisting of stars';
		result = getDescription('Cl;cL;mC;gbM;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; round; pretty suddenly brighter middle; partially resolved some stars seen';
		result = getDescription('B;pL;R;psbM;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 7th magnitude in extremely/excessively faint; very large nebula';
		result = getDescription('* 7 in eF;vL neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'planetary; stellar';
		result = getDescription('Planetary;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; bright; small; stars pretty large';
		result = getDescription('Cl;B;S;st pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; preceding rich; irregular round; stars 11th magnitude and fainter th to 14th magnitude';
		result = getDescription('Cl;pL;pRi;iR;st11..14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty small; preceding rich; preceding compressed; stars from 12th to 15th magnitude';
		result = getDescription('Cl;pS;pRi;pC;*12..15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; very rich; little/long brighter middle; stars from 12th to 13th magnitude';
		result = getDescription('Cl;vL;vRi;lbM;*12..13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; extremely/excessively large; Eridanus; in Milky Way';
		result = getDescription('Cl;eL;eRi;in Milky Way');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; bright; considerably large; preceding rich; stars 10th magnitude and fainter th to 13th magnitude';
		result = getDescription('Cl;B;cL;pRi;st10..13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; bright; large; rich; stars 8th magnitude and fainter th to 11th magnitude';
		result = getDescription('Cl;B;L;Ri;st8...11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; extremely/excessively large; elongated/extended preceding following; diffused';
		result = getDescription('F;eL;E pf;dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very very large; bright; elongated/extended; irregular; 100 stars magnitude 10th magnitude and fainter';
		result = getDescription('vvL; B; E; Irr; 100* mags 10...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; very little/long compressed; irregular figure; stars large and small';
		result = getDescription('Cl;pRi;vlC;iF;st L&S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very large; irregular round; very gradually brighter middle';
		result = getDescription('vF;vL;iR;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; bright; very large; very rich; stars 11th magnitude and fainter th magnitude and fainter';
		result = getDescription('Cl;B;vL;vRi;st11...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '4 arcseconds - medium contrast; UHC brings out bright nebula';
		result = getDescription('4\'\'-medium contrast; UHC brings out BRTNB');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; bright; pretty large; considerably rich; stars 10th magnitude and fainter th magnitude and fainter';
		result = getDescription('Cl;B;pL;cRi;st10...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; preceding rich; little/long compressed; stars 9th magnitude and fainter th to 11th magnitude';
		result = getDescription('Cl;L;pRi;lC;st9...11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; faint; nearly stellar';
		result = getDescription('vS;F;nearly stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; elongated/extended preceding following';
		result = getDescription('pB;E pf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; rich; round; gradually brighter middle; star of 12th magnitude th magnitude and fainter';
		result = getDescription('Cl;pL;Ri;R;gbM;*12..');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; preceding rich; little/long compressed';
		result = getDescription('Cl;vL;pRi;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'diffused nebula in patches';
		result = getDescription('dif neb in patches');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very large; ICF; very gradually little/long bright following; star of 8th magnitude involved/involving';
		result = getDescription('cF;vL;ICF;vglBf;*8inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'ring shaped nebula; extremely/excessively faint; small; among stars';
		result = getDescription('ring shaped neb;eF;S;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; faint';
		result = getDescription('S;F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; elongated/extended; very gradually little/long brighter middle; double stars involved/involving';
		result = getDescription('F;L;E;vglbM;D* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; pretty large; elongated/extended; lots of faint stars at 165X';
		result = getDescription('13\'\'-pB; pL; E; lots of F* at 165X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; little/long elongated/extended; star of 9th magnitude attached';
		result = getDescription('eF;pS;lE;*9 att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; poor; bright stars involved/involving';
		result = getDescription('Cl;S;P;B* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; stars 13th magnitude and fainter; star of 6th magnitude; 7 in magnitude';
		result = getDescription('Cl;st13;*6;7 in mag');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; round; pretty gradually; pretty suddenly very much brighter middle';
		result = getDescription('vB;L;R;pg;psvmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; little/long rich; little/long compressed';
		result = getDescription('Cl;pL;lRi;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; faint; large; preceding rich; little/long compressed; stars from 13th to 15th magnitude';
		result = getDescription('Cl;F;L;pRi;lC;*13..15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; preceding rich; irregular round; stars from 9th to 10th magnitude';
		result = getDescription('Cl;pL;pRi;iR;*9...10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; irregular round; little/long compressed; stars 7; 10th magnitude and fainter';
		result = getDescription('Cl;L;iR;lC;st7;10...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula portion of Milky Way';
		result = getDescription('neb portion of Milky Way');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; rich; little/long compressed';
		result = getDescription('Cl;vL;Ri;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; nearly stellar';
		result = getDescription('vF;S;nearly stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; preceding rich; stars 8th magnitude and fainter th to 12th magnitude';
		result = getDescription('Cl;vL;pRi;st8...12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty small; little/long rich; little/long compressed; stars from 10th to 12th magnitude';
		result = getDescription('Cl;pS;lRi;lC;*10..12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; faint; extremely/excessively large; very small stars + nebula';
		result = getDescription('Cl;F;eL;vS st+neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; very rich; stars 12th magnitude and fainter th to 13th magnitude';
		result = getDescription('Cl;vL;vRi;st12...13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; round; very gradually much brighter middle';
		result = getDescription('vB;pL;R;vgmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; preceding rich; brighter if irregular diameter; stars 12th magnitude and fainter';
		result = getDescription('Cl;pL;pRi;bifid;st12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; irregular round; pretty much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('Cl;iR;pmbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; partially resolved some stars seen; stars extremely/excessively small + nebula';
		result = getDescription('Cl;rr;st eS+neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very bright; preceding rich; little/long compressed; stars from 7th to 12th magnitude';
		result = getDescription('Cl;vB;pRi;lC;*7...12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula small part of Milky Way';
		result = getDescription('neb S part of Milky Way');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; very small; little/long elongated/extended; central stars seen at 220X';
		result = getDescription('13\'\'-pB;vS;lE;central * seen at 220X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; irregular';
		result = getDescription('F;pL;Irr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula + cluster; pretty large; much elongated/extended; gradually very little/long brighter middle';
		result = getDescription('neb+Cl;pL;mE;gvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; little/long compressed; little/long rich; stars 11th magnitude and fainter th to 12th magnitude';
		result = getDescription('Cl;lC;lRi;st11...12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '4 arcseconds - very faint; pretty small; round; averted vision helps; difficult';
		result = getDescription('4\'\'-vF; pS; R; averted vision helps; difficult');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; preceding rich; stars 12th magnitude and fainter th to 15th magnitude';
		result = getDescription('Cl;pL;pRi;st12...15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; in Milky Way';
		result = getDescription('Cl;in Milky Way');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - extremely/excessively faint; pretty large; irregular round; north bright middle; averted vision only; difficult';
		result = getDescription('13\'\'-eF; pL; irR; nBM; averted vision only; difficult');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 5.5 magnitude in large; elongated/extended nebula';
		result = getDescription('* 5.5 in L;E neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '3';
		result = getDescription('3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; little/long compressed; pretty small; star of 9th magnitude; 10; 12';
		result = getDescription('Cl;P;lC;pS;*9;10;12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; elongated/extended; north following';
		result = getDescription('pF;vS;E;nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; preceding rich; very little/long compressed';
		result = getDescription('Cl;L;pRi;vlC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; rich; stars 10th magnitude and fainter th to 18th magnitude';
		result = getDescription('Cl;L;Ri;st10...18');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very rich; very little/long compressed; in Milky Way';
		result = getDescription('Cl;vRi;vlC;in Milky Way');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; considerably large; preceding rich; preceding compressed; stars 12th magnitude and fainter th to 15th magnitude';
		result = getDescription('Cl;cL;pRi;pC;st12..15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; pretty small; north compressed 12 stars and hazy background at 100X';
		result = getDescription('13\'\'-pF;pS;nC 12* and hazy backround at 100X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; bright; 60 stars 13th magnitude and fainter';
		result = getDescription('Cl;B;60st13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/very remarkable object cluster; very bright; large; irregular round; rich; star of 9th magnitude th magnitude and fainter';
		result = getDescription('!!Cl;vB;L;iR;Ri;*9..');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - dark lane runs south of compressed large middle 11';
		result = getDescription('13\'\'-dark lane runs south of CL M11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very large; irregular resolvable (mottled not resolved); well resolved clearly consisting of stars';
		result = getDescription('pB;vL;irr;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty large; extremely/excessively faint; 0.4 arcminutes east south-east from NGC 6712';
		result = getDescription('pL;eF;0.4\' ESE from NGC 6712');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; gradually brighter middle';
		result = getDescription('pF;pS;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - extremely/excessively faint; pretty large; north bright middle at 100X; low surface brightness';
		result = getDescription('13\'\'-eF;pL;nBM at 100X; low surface brightness');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/very remarkable object; very bright; large; extremely/excessively compressed middle; Eridanus';
		result = getDescription('!!;vB;L;eCM;eRi');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; easily resolvable';
		result = getDescription('vF;S;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; 2 faint stars involved/involving';
		result = getDescription('vF;vS;2F* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; very little/long elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('vF;pL;vlE;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; little/long elongated/extended; north preceding of 2';
		result = getDescription('eeF;pS;lE;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; little/long elongated/extended; south following of 2';
		result = getDescription('eeF;pS;lE;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably large; irregular round; very suddenly/south brighter middle star of 12th magnitude; among stars';
		result = getDescription('cB;cL;iR;vsbM*12;am *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; 2 stars near';
		result = getDescription('F;vS;2st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably small; round; pretty suddenly brighter middle; star of 7th magnitude north';
		result = getDescription('pB;cS;R;psbM;*7n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round';
		result = getDescription('eF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; irregular round; very gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;pL;iR;vgbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; very gradually brighter middle; 3 stars following';
		result = getDescription('pB;pS;R;vgbM;3st f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; faint stars poor; 1 stars of 4';
		result = getDescription('eF;pS;R;F*P;1st of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; 3 resolvable (mottled not resolved) diameter of 4';
		result = getDescription('eeF;S;R;3rd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; 2 north diameter of 4';
		result = getDescription('eeF;S;R;2nd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; 4th of 4';
		result = getDescription('eeF;S;R;4th of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint star in very faint nebula; very faint stars close';
		result = getDescription('F*in vf neby;vf * close');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; elongated in position angle 150 degrees';
		result = getDescription('F;pS;E150');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably small; preceding of double nebula';
		result = getDescription('pB;cS;p of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably small; following of double nebula';
		result = getDescription('pB;cS;f of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; almost stellar';
		result = getDescription('eF;vS;alm stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; star of 16th magnitude close following';
		result = getDescription('F;S;R;*16 close f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; stellar';
		result = getDescription('eF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; cometic; little/long brighter middle';
		result = getDescription('pB;pL;com;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; nebula stars';
		result = getDescription('vF;S;neb *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; irregular little/long elongated/extended; gradually brighter middle';
		result = getDescription('pF;pL;ilE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very large; round; very gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('eF;vL;R;vgbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; partially resolved some stars seen';
		result = getDescription('pF;pL;R;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; irregular resolvable (mottled not resolved) round';
		result = getDescription('F;pS;irrR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular resolvable (mottled not resolved) round; several very faint stars involved/involving';
		result = getDescription('vF;vS;irrR;sev vf * inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; little/long brighter middle';
		result = getDescription('eF;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; elongated in position angle 0 degrees';
		result = getDescription('F;pS;E0');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; very little/long brighter middle';
		result = getDescription('eF;eS;R;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; elongated in position angle 135 degrees; brighter middle';
		result = getDescription('pB;S;E135;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; faint stars near nucleus';
		result = getDescription('eeF;pS;R;F* nr Nuc');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; much brighter middle';
		result = getDescription('pF;S;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; gradually brighter middle';
		result = getDescription('vF;vS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; south preceding 5996';
		result = getDescription('S;sp 5996');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably small; round; resolvable (mottled not resolved); between 2 double stars';
		result = getDescription('pF;cS;R;r;bet 2D*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; most extremely small; stellar';
		result = getDescription('eF;eeS;stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; small stars involved/involving';
		result = getDescription('F;vS;S* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; little/long elongated/extended; little/long brighter middle';
		result = getDescription('vF;pL;lE;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; pretty large; brighter middle';
		result = getDescription('vF;R;pL;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; pretty large; brighter middle';
		result = getDescription('vF;R;pL;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large';
		result = getDescription('F;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; stellar';
		result = getDescription('F;vS;stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; between 2 bright stars';
		result = getDescription('F;bet 2B st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; elongated in position angle 90 degrees; gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pF;S;E90;gbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; elongated/extended';
		result = getDescription('pB;pL;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; irregular round; little/long brighter middle';
		result = getDescription('eF;eS;iR;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; disc gradually; suddenly/south much brighter middle';
		result = getDescription('vF;vS;R;disc g;smbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended; preceding of 2';
		result = getDescription('vF;S;lE;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; little/long elongated/extended; following of 2';
		result = getDescription('eF;vS;lE;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small';
		result = getDescription('eF;eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle';
		result = getDescription('F;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very faint star in very; 2 very faint stars near';
		result = getDescription('eF;vF*inv;2vF st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very faint stars involved/involving; 2 very faint stars near';
		result = getDescription('eF;vF * inv;2 vf st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'southeast; brighter middle';
		result = getDescription('sE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'diffused; brighter middle';
		result = getDescription('dif;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar';
		result = getDescription('Stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very diffused; little/long brighter middle';
		result = getDescription('v dif;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty large; irregular round';
		result = getDescription('eeF;pL;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint nebula stars';
		result = getDescription('vF neb *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; stellar';
		result = getDescription('vF;vS;R;stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle Nucleus or to a Nucleus; star of 10th magnitude south following';
		result = getDescription('F;S;R;gbMN;*10 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 7th magnitude in photosphere';
		result = getDescription('*7 in photosphere');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; very little/long brighter middle';
		result = getDescription('F;pL;R;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; round; south preceding of 2';
		result = getDescription('eeF;vS;R;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; round; 2 pretty bright stars near; north following of 2';
		result = getDescription('eeF;vS;R;2 pB* nr;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; pretty much elongated/extended; very gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;L;pmE;vgbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; much brighter middle; with star of 12.5 magnitude 20 north following(nebulous ?)';
		result = getDescription('pB;pS;R;mbM;w *12.5 20 nf(nebs ?)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; most extremely faint stars close preceding';
		result = getDescription('eeF;vS;eeF* close p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably large; considerably elongated/extended 45; resolvable (mottled not resolved)';
		result = getDescription('vF;cL;cE45;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - extremely/excessively faint; pretty small; little/long elongated/extended 1.5X1 in position angle 15; averted vision only';
		result = getDescription('13\'\'-eF; pS; lE 1.5X1 in PA 15; averted vision only');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; very small nebula stars preceding';
		result = getDescription('pF;vS;vS neb *p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; faint';
		result = getDescription('vS;F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very large; very difficult; double stars close preceding';
		result = getDescription('eeF;vL;v difficult;D* close p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; pretty small; north rich; little/long compressed; 21 stars and fuzzy background';
		result = getDescription('13\'\'-pB; pS; nRi; lC; 21* and fuzzy background');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; little/long rich; little/long compressed';
		result = getDescription('Cl;lRi;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; little/long rich; little/long compressed; stars 10th magnitude and fainter th to 12th magnitude';
		result = getDescription('Cl;lRi;lC;st10...12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'large; bright; scattered cluster; nebula involved/involving';
		result = getDescription('L;B;scattered Cl;neb invl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very very large; scattered group of 80 stars magnitude 7th magnitude and fainter';
		result = getDescription('vvL;scattered group of 80 * mags 7....');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; irregular round; very gradually little/long brighter middle';
		result = getDescription('vF;pS;iR;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; very gradually little/long brighter middle';
		result = getDescription('pF;pL;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint stars in very faint; little/long elongated/extended nebula; faint stars preceding 30 arcseconds';
		result = getDescription('vF* in vF;lE neb;F* p 30\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; elongated/extended 50 degree; gradually brighter middle; stellar Nucleus or to a Nucleus; star of 9th magnitude south preceding 50 arcseconds';
		result = getDescription('F;pS;E 50 deg;gbM;stel N;* 9 sp 50\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; considerably small; irregular round; brighter middle; star of 9th magnitude south preceding 43 arcseconds';
		result = getDescription('B;cS;iR;bM;*9 sp 43\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; very little/long elongated/extended; pretty suddenly brighter middle';
		result = getDescription('pF;pS;vlE;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; very little/long elongated/extended; gradually brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;pS;vlE;gbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended 0 degree; very gradually little/long brighter middle';
		result = getDescription('vF;pS;lE 0 deg;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; 2980 north 10 arcminutes';
		result = getDescription('eF;S;R;2980 n 10\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; irregular figure; several very faint stars involved/involving';
		result = getDescription('eF;S;iF;sev vF * inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; little/long elongated/extended 90 degree';
		result = getDescription('F;pS;lE 90 deg');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; irregular round; little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('eF;S;iR;lbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round';
		result = getDescription('pF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; preceding of 2';
		result = getDescription('eF;pL;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; star of 11th magnitude north preceding 3 arcminutes';
		result = getDescription('eF;vS;*11 np 3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; almost stellar';
		result = getDescription('F;vS;alm stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; brighter middle';
		result = getDescription('vF;vS;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round; very gradually little/long brighter middle; following of 2';
		result = getDescription('F;R;vglbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; irregular round; little/long brighter middle; diffused';
		result = getDescription('pF;pL;iR;lbM;dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; several very faint stars involved/involving';
		result = getDescription('pF;pL;R;sev vf st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round';
		result = getDescription('vF;S;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; very little/long elongated/extended; gradually brighter middle';
		result = getDescription('pB;S;vlE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very large; very much elongated/extended 122';
		result = getDescription('vF;vL;vmE 122');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; very little/long elongated/extended; very gradually brighter middle; partially resolved some stars seen; star of 7th magnitude following 92';
		result = getDescription('F;pL;vlE;vgbM;rr;*7 f 92');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; elongated/extended 45';
		result = getDescription('eF;vS;E 45');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; almost stellar';
		result = getDescription('vF;vS;alm stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; elongated/extended';
		result = getDescription('eF;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - faint; pretty large; elongated/extended 2X1; north much bright middle at 100X';
		result = getDescription('13\'\'-F;pL;E 2X1;nmBM at 100X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; irregular round';
		result = getDescription('eF;S;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; irregular round; resolvable (mottled not resolved)';
		result = getDescription('F;vS;iR;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended; easily resolvable';
		result = getDescription('F;S;lE;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; very much elongated/extended 46; very gradually suddenly/south much brighter middle elongated/extended Nucleus or to a Nucleus';
		result = getDescription('vB;L;vmE 46;vgsmbMEN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - extremely/excessively faint; pretty small; north bright middle at 100X; low surface brightness';
		result = getDescription('13\'\'-eF;pS;nBM at 100X; low surface brghtness');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; small stars involved/involving';
		result = getDescription('vF;vS;R;S* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula; no description';
		result = getDescription('neb;no description');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round';
		result = getDescription('F;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; round; pretty suddenly brighter middle; star of 9th magnitude - 10 south following 2 arcminutes';
		result = getDescription('F;cS;R;psbM;*9-10 sf 2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; much elongated/extended 0; 1 stars of 3';
		result = getDescription('vF;mE 0;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; round; pretty suddenly much brighter middle; 2 north diameter of 3';
		result = getDescription('B;pS;R;psmbM;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; very little/long elongated/extended; pretty gradually much brighter middle; star of 11th magnitude; 78; 80 arcseconds; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('B;pL;vlE;pgmbM;*11;78;80\'\';3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint';
		result = getDescription('F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended; between 2 stars';
		result = getDescription('vF;S;lE;bet 2 st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; 2 stars triangle; star of 6th magnitude; 300; 8 arcminutes';
		result = getDescription('eF;S;R;2 st tri;*6;300;8\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended';
		result = getDescription('vF;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; very small stars involved/involving';
		result = getDescription('F;vS;vS* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; stellar';
		result = getDescription('vF;eS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; almost stellar';
		result = getDescription('eF;vS;alm stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; stellar';
		result = getDescription('eF;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; poor with NGC 3361';
		result = getDescription('vF;R;P w NGC 3361');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'much elongated/extended 160; brighter than NGC 3360';
		result = getDescription('mE 160;brighter than NGC 3360');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; large; extremely/excessively elongated/extended 159; very gradually very little/long brighter middle';
		result = getDescription('eF;L;eE 159;vgvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually much brighter middle';
		result = getDescription('F;S;R;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; suddenly/south of 2';
		result = getDescription('vF;S;R;s of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended; brighter middle; north of 2';
		result = getDescription('vF;S;lE;bM;n of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small';
		result = getDescription('eF;eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint (not verified)';
		result = getDescription('eF (not verified)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very large; round; very gradually brighter middle; partially resolved some stars seen';
		result = getDescription('F;vL;R;vgbM;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - very faint; pretty small; suddenly/south bright middle at 100X; no stars resolvable (mottled not resolved) extremely/excessively suddenly/south little/long very diameter at 320X';
		result = getDescription('13\'\'-vF;pS;sBM at 100X; no* reslvd at 320X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + round';
		result = getDescription('E+R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; pretty large; round; north bright middle; 2 stars involved/involving at 100X; UHC helps';
		result = getDescription('13\'\'-pF;pL;R;nBM; 2* invl at 100X; UHC helps');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; pretty large; much elongated/extended; small side bright at 135X with UHC filter';
		result = getDescription('13\'\'-pF;pL;mE;S side B at 135X with UHC filter');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty large; little/long compressed; 29 stars 11th magnitude and fainter';
		result = getDescription('pL;lC; 29* 11...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; very rich; pretty much compressed; stars from 11th to 16th magnitude';
		result = getDescription('Cl;vL;vRi;pmC;*11...16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very small; very compressed';
		result = getDescription('Cl;vS;vC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; little/long compressed; stars 10th magnitude and fainter th to 13th magnitude; double stars involved/involving';
		result = getDescription('Cl;lC;st10..13;D* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar = 10th magnitude';
		result = getDescription('stellar=10m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar = 10th magnitude';
		result = getDescription('stellar=10m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint nebula stars(extremely/excessively small cluster)';
		result = getDescription('eF neb *(eS Cl)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar';
		result = getDescription('Stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '11 arcseconds - obvious dark oval with double star centered';
		result = getDescription('11\'\'-obvious dark oval with dbl star centered');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; stars very small';
		result = getDescription('Cl;st vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar = 13th magnitude';
		result = getDescription('stellar=13m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; brighter middle';
		result = getDescription('pB;pL;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; gradually brighter middle; resolvable (mottled not resolved); star of 15th magnitude north preceding';
		result = getDescription('pB;pS;R;gbM;r;*15 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; (suspected)';
		result = getDescription('eF;S;(suspected)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; in Milky Way';
		result = getDescription('Cl;pRi;in Milky Way');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula small part of Milky Way';
		result = getDescription('neb S part of Milky Way');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'center star variable AS Sagittarius';
		result = getDescription('cent* variable AS Sgr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; bright; very large; preceding rich; little/long compressed; star of 10th magnitude th magnitude and fainter';
		result = getDescription('Cl;B;vL;pRi;lC;*10..');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty small; little/long rich; little/long compressed';
		result = getDescription('Cl;pS;lRi;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; rich; extremely/excessively large; very little/long compressed';
		result = getDescription('Cl;Ri;eL;vlC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - very prominent dark oval with compressed large nearby';
		result = getDescription('13\'\'-very prominet dark oval with CL nearby');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; Trifid; double stars involved/involving';
		result = getDescription('vB;vL;Trifid;D* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'annular; 13 magnitude stars north following 33 arcseconds';
		result = getDescription('annular;13 mag * nf 33\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; north preceding 6522';
		result = getDescription('vF;np 6522');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty small; rich; little/long compressed; stars 9th magnitude and fainter th to 13th magnitude';
		result = getDescription('Cl;pS;Ri;lC;st9...13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; round; gradually very much bright middle; well resolved clearly consisting of stars';
		result = getDescription('B;pL;R;gvmBM;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'a magnificent or otherwise interesting object; very bright; extremely/excessively large; extremely/excessively irregular figure; with large cluster';
		result = getDescription('!!!;vB;eL;eiF;w L Cl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; considerably elongated/extended';
		result = getDescription('F;L;cE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively large; extremely/excessively irregular figure; stars faint';
		result = getDescription('eL;eiF;st F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; little/long compressed; stars 9th magnitude and fainter th to 12th magnitude';
		result = getDescription('Cl;pRi;lC;st9...12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; bright; large; preceding rich; following middle 8';
		result = getDescription('Cl;B;L;pRi;f M8');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably small; round; gradually brighter middle; well resolved clearly consisting of stars';
		result = getDescription('pF;cS;R;gbM;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; stellar';
		result = getDescription('B;S;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster in Milky Way';
		result = getDescription('Cl in Milky Way');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; little/long elongated/extended; easily resolvable or cluster';
		result = getDescription('pF;S;lE;er or Cl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; irregular round; resolvable (mottled not resolved)';
		result = getDescription('cF;pL;iR;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; very rich';
		result = getDescription('Cl;vL;vRi');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; partially resolved some stars seen';
		result = getDescription('vF;vS;R;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; very little/long compressed; stars large and small';
		result = getDescription('Cl;pRi;vlC;st L&S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small nebula or nebula stars';
		result = getDescription('S neb or neb *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 7.5 magnitude in large; diffused nebula';
		result = getDescription('* 7.5 in L;dif neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; little/long elongated/extended; very gradually little/long brighter middle; partially resolved some stars seen';
		result = getDescription('F;L;lE;vglbM;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '6 arcseconds - bright; large; north rich; north compressed; 27 stars magnitude 8 to 11';
		result = getDescription('6\'\'-B; L; nRi; nC; 27* mags 8 to 11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very large; considerably elongated/extended; little/long brighter middle; partially resolved some stars seen';
		result = getDescription('F;vL;cE;lbM;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very large; little/long elongated/extended; double star involved/involving';
		result = getDescription('vF;vL;lE;** inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '3 stars 8th magnitude and fainter. 5 to 9th magnitude in pretty large nebula';
		result = getDescription('3 st 8.5 to 9m in pL neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2 stars 8th magnitude and fainter and 8.5 in pretty large nebula';
		result = getDescription('2 st 8 & 8.5 in pL neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; gradually little/long brighter middle; well resolved clearly consisting of stars';
		result = getDescription('pB;pL;R;glbM;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; little/long compressed; stars cluster';
		result = getDescription('Cl;L;lC;st Cl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar';
		result = getDescription('stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; considerably elongated/extended; hazy edge';
		result = getDescription('F;L;cE;hazy edge');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; little/long compressed';
		result = getDescription('Cl;vL;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; large; round; well resolved clearly consisting of stars; star of 15th magnitude th magnitude and fainter';
		result = getDescription('cB;L;R;rrr;*15..');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; stars very small';
		result = getDescription('Cl;st vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar; 11th magnitude; in a cluster';
		result = getDescription('stell;11m;in a Cl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - large; very prominent dark nebula at 60X';
		result = getDescription('13\'\'-L;very prominent Dark neb at 60X');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; preceding compressed; considerably elongated/extended; stars 13th magnitude and fainter th magnitude and fainter';
		result = getDescription('Cl;pRi;pC;cE;st13...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively large; connection with cloud IC 4715';
		result = getDescription('eL;conn w cloud IC 4715');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar = 13th magnitude a gradually';
		result = getDescription('stellar=13mag');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'double star in the center extremely/excessively faint; pretty large nebula';
		result = getDescription('D*center eF;pL neby');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'double star in the center pretty faint; pretty large; round nebula';
		result = getDescription('D*center pF;pL;R neby');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; considerably elongated/extended; double star involved/involving';
		result = getDescription('F;pL;cE;** inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; little/long compressed';
		result = getDescription('Cl;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 7.6 magnitude in nebula; 15 arcminutes diameter';
		result = getDescription('* 7.6 in neb;15\' diam');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very rich; very much compressed; round';
		result = getDescription('Cl;vRi;vmC;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; very little/long compressed';
		result = getDescription('Cl;P;vlC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'a magnificent or otherwise interesting object; bright; extremely/excessively large; extremely/excessively irregular figure; 2 hooked';
		result = getDescription('!!!;B;eL;eiF;2 hooked');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'planetary; stellar';
		result = getDescription('Planetary;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; round; well resolved clearly consisting of stars; stars 16th magnitude and fainter th magnitude and fainter';
		result = getDescription('vB;pL;R;rrr;st16..');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; round; gradually extremely/excessively compressed middle; well resolved clearly consisting of stars';
		result = getDescription('vB;L;R;geCM;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; most extremely small; round';
		result = getDescription('pB;eeS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely large cloud of stars and nebula';
		result = getDescription('eeL cloud of st and neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; partially resolved some stars seen';
		result = getDescription('B;S;R;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula with out stars';
		result = getDescription('neb w out stars');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; round; well resolved clearly consisting of stars; stars from 14th to 16th magnitude';
		result = getDescription('B;L;R;rrr;*14..16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; rich; little/long compressed; stars very small';
		result = getDescription('Cl;L;Ri;lC;st vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding compressed';
		result = getDescription('Cl;pC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; irregular round; gradually pretty much brighter middle';
		result = getDescription('pB;pL;iR;gpmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; very rich; preceding compressed; stars 11th magnitude and fainter th to 15th magnitude';
		result = getDescription('Cl;pL;vRi;pC;st11..15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'planetary; stellar';
		result = getDescription('Planetary;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar';
		result = getDescription('Stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; little/long elongated/extended; well resolved clearly consisting of stars; stars 15th magnitude and fainter';
		result = getDescription('B;S;lE;rrr;st15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; round; very rich; very much compressed';
		result = getDescription('vB;vL;R;vRi;vmC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; round; gradually brighter middle';
		result = getDescription('B;pL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; faint';
		result = getDescription('vS;F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'suspected cluster; considerably large; stars very faint';
		result = getDescription('susp Cl;cL;st vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; stars 9th magnitude and fainter th to 13th magnitude';
		result = getDescription('Cl;pRi;st9...13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; round; gradually; suddenly/south much brighter middle';
		result = getDescription('vB;L;R;g;smbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; partially resolved some stars seen; cluster + nebula';
		result = getDescription('F;S;rr;Cl+neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very large; very little/long elongated/extended; very gradually brighter middle; well resolved clearly consisting of stars';
		result = getDescription('vL;vlE;vgbM;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - very faint; pretty small; round; north bright middle; averted vision helps; difficult';
		result = getDescription('13\'\'-vF; pS; R; nBM; averted vision helps; difficult');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; preceding rich; round; stars 12th magnitude and fainter th to 15th magnitude';
		result = getDescription('Cl;pL;pRi;R;st12..15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; little/long compressed';
		result = getDescription('Cl;vL;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; very gradually very little/long brighter middle';
		result = getDescription('eF;pS;R;vgvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula with star of 9th magnitude attached following';
		result = getDescription('neb w *9 att f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; round; very gradually brighter middle';
		result = getDescription('eF;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; star of 14th magnitude attached';
		result = getDescription('eF;vS;*14 att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; round; very rich; very gradually brighter middle';
		result = getDescription('pB;L;R;vRi;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; very little/long brighter middle; stars north preceding';
		result = getDescription('eF;pS;R;vlbM;* np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; very small; round';
		result = getDescription('B;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; elongated/extended; difficult';
		result = getDescription('vF;L;E;Dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; much elongated/extended';
		result = getDescription('F;pL;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; diffused';
		result = getDescription('vF;pL;R;dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; pretty suddenly brighter middle';
		result = getDescription('vF;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; round; very much brighter middle bright Nucleus or to a Nucleus; partially resolved some stars seen';
		result = getDescription('B;pL;R;vmbMBN;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; very small stars north preceding';
		result = getDescription('pB;S;R;vS* np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; gradually little/long brighter middle';
		result = getDescription('vF;pL;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; very gradually little/long brighter middle';
		result = getDescription('pF;S;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; faint; much elongated/extended';
		result = getDescription('S;F;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; round; brighter middle';
		result = getDescription('F;cS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint';
		result = getDescription('F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; between 2 stars';
		result = getDescription('eeF;S;R;bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula star of 13th magnitude';
		result = getDescription('neb * 13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; stellar or little/long elongated/extended; Seyfert?';
		result = getDescription('eF;stellar or lE;Seyfert?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'makes double nebula with 1409; position 0';
		result = getDescription('makes Dneb w 1409;pos 0');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; irregular round';
		result = getDescription('eF;pL;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very large; difficult (Maia in Pleiades)';
		result = getDescription('eF;vL;diff (Maia in Pleiades)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very large; difficult; (Merope in Pleiades)';
		result = getDescription('vF;vL;diff;(Merope in Pleiades)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; elongated/extended 165 degree; distance or distant ars 36th magnitude and fainter arcseconds from Merope';
		result = getDescription('eF;vS;E 165 deg;dist 36\'\' from Merope');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very very bright; very large; brilliant naked eye cluster; nebula involved/involving';
		result = getDescription('vvB;vL;brilliant naked eye cluster;neb inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'double star of 10th magnitude - 12; companion nebulous at 130; 9 arcseconds';
		result = getDescription('D*10-12;comp nebulous at 130;9\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 6th magnitude in extremely/excessively faint; most extremely large nebula';
		result = getDescription('* 6 mag in eF; eeL nebula');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long elongated/extended';
		result = getDescription('vF;S;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; most extremely large; very diffused';
		result = getDescription('vF;eeL;v dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 12th magnitude involved/involving in nebula';
		result = getDescription('*12 inv in neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; irregular round; much brighter middle';
		result = getDescription('eF;vS;iR;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;vS;R;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; most extremely large; very diffused';
		result = getDescription('vF;eeL;v dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; resolvable (mottled not resolved); star of 9th magnitude; 10 south following';
		result = getDescription('vF;vS;R;r;*9;10 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 9th magnitude in nebula 3 arcminutes diameter';
		result = getDescription('*9 in neb 3\'Diam');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; faint; comet-shaped; 12 magnitude stars at south tip';
		result = getDescription('S;F;comet-shaped;12 mag * at south tip');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended';
		result = getDescription('vF;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; gradually brighter middle';
		result = getDescription('vF;vS;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; star of 13th magnitude near';
		result = getDescription('vF;S;R;*13 nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; probably 1550';
		result = getDescription('F;vS;R;probably 1550');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'variable; small; round; Nucleus or to a Nucleus north = star of 13th magnitude; a magnificent or otherwise interesting object';
		result = getDescription('var;S;R;Nn=*13;!!!');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; variable; a magnificent or otherwise interesting object';
		result = getDescription('vF;S;variable;!!!');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very very bright; very very large; irregular resolvable (mottled not resolved)';
		result = getDescription('vvB;vvL;irr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty bright; pretty large; round; center star of 9th magnitude much; averted vision helps';
		result = getDescription('13\'\'-pB; pL; R; cent* 9m; averted vision helps');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '11 arcseconds - pretty faint; pretty small; north rich; north compressed; 12 stars magnitude 11 and fainter; not much';
		result = getDescription('11\'\'-pF; pS; nRi; nC; 12* mags 11 and fainter; not much');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; resolvable (mottled not resolved); preceding of double nebula';
		result = getDescription('F;pS;R;r;p of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; resolvable (mottled not resolved); following of double nebula';
		result = getDescription('F;vS;R;r;f of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; little/long elongated/extended 132; star of 42th magnitude; 80 arcseconds';
		result = getDescription('F;pL;lE132;*42;80\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; star of 12th magnitude north following';
		result = getDescription('F;S;*12 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably small; star of 12th magnitude 2 arcminutes north';
		result = getDescription('pF;cS;*12 2\'n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; little/long brighter middle; very small stars involved/involving';
		result = getDescription('vF;vS;R;lbM;vS* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; faint; in hole of extremely/excessively large nebula';
		result = getDescription('S;F;in hole of eL neby');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; star of 8th magnitude south preceding; preceding of double nebula';
		result = getDescription('eF;S;R;*8 sp;p of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; following of double nebula';
		result = getDescription('eF;vS;f of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round; cometary; triangle with 2 stars superimposed';
		result = getDescription('F;R;cometary;tri w 2 * superimposed');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; stars large; suddenly/south compressed';
		result = getDescription('Cl;vL;st L;sC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; round; gradually brighter middle; star of 10th magnitude suddenly/south';
		result = getDescription('pB;R;gbM;*10s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'First of 2; faint nebula in same field';
		result = getDescription('First of 2;F neb in same field');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'Second of 2 faint nebula in same field';
		result = getDescription('Second of 2 F neb in same field');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor';
		result = getDescription('Cl;P');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; stars large; very considerably scattered';
		result = getDescription('Cl;st L;vc sc');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding compressed; stars large and small';
		result = getDescription('Cl;pC;st L & S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; stars considerably scattered';
		result = getDescription('Cl;st c sc');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; stars large and small';
		result = getDescription('Cl;pRi;st L & S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; rich; little/long compressed; stars 11th magnitude and fainter th to 14th magnitude';
		result = getDescription('Cl;L;Ri;lC;st11...14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; elongated in position angle 135 degrees; very gradually little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vB;vL;E135;vglbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '10 arcseconds - pretty bright; large; north compressed; north rich; 17 stars magnitude 9 to 12; not much';
		result = getDescription('10\'\'-pB; L; nC; nRi; 17* mag 9 to12; not much');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'variable';
		result = getDescription('var');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; little/long compressed; little/long rich';
		result = getDescription('Cl;L;lC;lRi');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '6 arcseconds - extremely/excessively faint; extremely/excessively large; low surface brightness filaments';
		result = getDescription('6\'\'-eF;eL; low surface brightness filaments');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; little/long rich; little/long compressed; stars pretty large';
		result = getDescription('Cl;lRi;lC;st pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 8th magnitude - 9 with faint nebula';
		result = getDescription('*8-9 w F neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; faint; stellar';
		result = getDescription('S;F;Stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably large; round; gradually much brighter middle; well resolved clearly consisting of stars';
		result = getDescription('cB;cL;R;gmbM;rrr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; very little/long elongated/extended; gradually brighter middle';
		result = getDescription('F;S;vlE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually pretty much brighter middle; last of group';
		result = getDescription('pF;S;R;gpmbM;last of group');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round';
		result = getDescription('eF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; much elongated/extended 63; very gradually little/long brighter middle';
		result = getDescription('pF;pL;mE63;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round';
		result = getDescription('pB;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; irregular round';
		result = getDescription('vF;pS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; round; very gradually little/long brighter middle';
		result = getDescription('vF;L;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; much elongated/extended; pretty suddenly little/long brighter middle';
		result = getDescription('pB;S;mE;pslbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; little/long brighter middle; 3 very small stars near';
		result = getDescription('eF;vS;R;lbM;3vS* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright middle; magnitude 10';
		result = getDescription('BM; mag 10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; pretty much elongated/extended; gradually little/long brighter middle';
		result = getDescription('pB;pS;pmE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long elongated/extended; gradually little/long brighter middle';
		result = getDescription('vF;S;vlE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably large; round; very gradually little/long brighter middle; 2 stars following';
		result = getDescription('cF;cL;R;vglbM;2st f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle';
		result = getDescription('vF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; very little/long elongated/extended; pretty suddenly brighter middle';
		result = getDescription('pF;S;vlE;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; very little/long elongated/extended; gradually little/long brighter middle';
		result = getDescription('F;S;vlE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round';
		result = getDescription('pF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; considerably elongated/extended; gradually pretty much brighter middle';
		result = getDescription('B;S;cE;gpmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended; gradually little/long brighter middle';
		result = getDescription('F;S;lE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; small; round; pretty gradually very much brighter middle';
		result = getDescription('vB;S;R;pgvmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; elongated in position angle 90 degrees; gradually brighter middle';
		result = getDescription('cF;cS;E90;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; large; pretty much elongated/extended';
		result = getDescription('eeF;L;pmE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; very gradually much brighter middle; star of 7th magnitude north following';
		result = getDescription('F;vS;R;vgmbM;*7 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably large; pretty much elongated/extended; gradually little/long brighter middle';
		result = getDescription('pF;cL;pmE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; little/long elongated/extended';
		result = getDescription('vF;L;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; suddenly/south very brighter middle star of 12th magnitude';
		result = getDescription('pF;S;R;svbM*12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually little/long brighter middle; among stars';
		result = getDescription('F;S;R;glbM;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; gradually brighter middle; 2 stars 10 near';
		result = getDescription('pB;pL;gbM;2*10 nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; very gradually very little/long brighter middle';
		result = getDescription('pB;pL;R;vgvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; among stars';
		result = getDescription('F;S;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; round; among 150 stars';
		result = getDescription('pF;vS;R;am 150st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; bright; very large; preceding rich; little/long compressed; star of 7th magnitude th magnitude and fainter';
		result = getDescription('Cl;B;vL;pRi;lC;*7...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; very little/long elongated/extended; gradually brighter middle';
		result = getDescription('pF;pL;vlE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; round; gradually brighter middle';
		result = getDescription('vF;eS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; gradually brighter middle';
		result = getDescription('vF;pL;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; pretty much elongated/extended; star of 12th magnitude';
		result = getDescription('vF;pL;pmE;*12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very very following; small; (small cluster)';
		result = getDescription('vvf;S;(S Cl)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; preceding of 2';
		result = getDescription('F;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; following of 2';
		result = getDescription('F;pL;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; involved/involving in middle 33';
		result = getDescription('vF;S;R;inv in M 33');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively bright; extremely/excessively large; round; very gradually brighter middle Nucleus or to a Nucleus';
		result = getDescription('eB;eL;R;vgbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; very small; round; very very little/long bright middle';
		result = getDescription('B;vS;R;vvlBM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small nebula or cluster with 3 stars involved/involving';
		result = getDescription('S neb or Cl w 3* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty suddenly brighter middle; stellar';
		result = getDescription('vF;psbM;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; brighter middle; ? Place';
		result = getDescription('pB;pL;bM;? Place');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty suddenly brighter middle; stellar';
		result = getDescription('pF;psbM;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; place doubtful';
		result = getDescription('vF;R;place doubtful');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula double stars; star of 8th magnitude north preceding';
		result = getDescription('neb D*;*8 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; round; brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;eS;R;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; several faint stars involved/involving';
		result = getDescription('eF;eS;sev F* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;S;R;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint star in extremely/excessively faint; extremely/excessively small nebula';
		result = getDescription('vF*in eF;eS neby');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; much elongated/extended; gradually brighter middle';
		result = getDescription('pF;pL;mE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended';
		result = getDescription('F;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; stars involved/involving; NGC 672 north following';
		result = getDescription('F;L;st inv;NGC 672 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; much elongated/extended 80';
		result = getDescription('F;pL;mE80');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; elongated/extended; star of 13th magnitude following 100 arcseconds';
		result = getDescription('F;E;*13f100\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; (resolvable)';
		result = getDescription('vF;vS;(resolvable)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; 2 arcminutes preceding 736';
		result = getDescription('vF;2\'p 736');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; stellar';
		result = getDescription('eeF;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; round; brighter middle';
		result = getDescription('pB;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'stellar nebula (faint stars ); 736 suddenly/south';
		result = getDescription('stellar neb (F*);736 s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula; 75 arcseconds north following 736';
		result = getDescription('neb;75\'\'nf 736');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; round; in 3 stars';
		result = getDescription('cF;vS;R;in 3*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; considerably elongated/extended';
		result = getDescription('F;L;cE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; round; poor with 751; 25 arcseconds; position 173 degree';
		result = getDescription('cB;pL;R;P w 751;25\'\'; pos 173 deg');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; extremely/excessively small; round; brighter middle; poor with 750';
		result = getDescription('pF;eS;R;bM;P w 750');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; 761 north following';
		result = getDescription('vF;R;761 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably large; 4 faint stars near';
		result = getDescription('pF;cL;4F* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular round; brighter middle; faint stars attached';
		result = getDescription('vF;vS;iR;bM;F* att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; gradually little/long brighter middle';
		result = getDescription('pB;pL;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; little/long brighter middle';
		result = getDescription('eF;vS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; elongated/extended; 3 stars preceding';
		result = getDescription('vF;vS;E;3*p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; irregular round; very faint stars attached';
		result = getDescription('eF;S;iR;vF st att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; elongated/extended; double';
		result = getDescription('vF;L;E;Double');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; very faint stars attached';
		result = getDescription('eF;eS;vF * att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended';
		result = getDescription('vF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'V very faint; between 2 stars; south following 789';
		result = getDescription('V vf;bet 2*;sf 789');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; 2 stars 14 preceding';
		result = getDescription('eF;eS;R;2*14p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular round; between 2 stars north and south preceding';
		result = getDescription('vF;vS;iR;bet 2* n&sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular figure';
		result = getDescription('vF;vS;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; round; star of 13th magnitude north';
		result = getDescription('pF;vS;R;*13 n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; little/long brighter middle';
		result = getDescription('eF;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; star of 9.10 magnitude south preceding';
		result = getDescription('F;vS;*9.10 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'Globular; faint; small; round';
		result = getDescription('Globular;F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended 90; brighter middle';
		result = getDescription('F;S;lE90;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 13th magnitude in faint nebula';
		result = getDescription('*13in F neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; double stars attached south preceding';
		result = getDescription('vF;S;D* att sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; irregular round';
		result = getDescription('eF;eS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; brighter middle; 3 faint stars south preceding';
		result = getDescription('B;S;R;bM;3F* sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; 4 stars near; (very small cluster)';
		result = getDescription('vF;S;R;4* nr;(vS Cl)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably large; elongated/extended; very gradually brighter middle; 2 stars 13 north preceding';
		result = getDescription('cF;cL;E;vgbM;2*13 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; irregular round';
		result = getDescription('F;pL;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle';
		result = getDescription('F;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; large; elongated/extended; very gradually brighter middle';
		result = getDescription('cB;L;E;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; much brighter middle';
		result = getDescription('pF;S;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle';
		result = getDescription('vF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; little/long elongated/extended; little/long brighter middle';
		result = getDescription('eF;pL;lE;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; brighter middle';
		result = getDescription('pF;pS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; round; pretty suddenly brighter middle; 1 stars of 5';
		result = getDescription('S;R;psbM;1st of 5');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; 2 north diameter of 5';
		result = getDescription('vF;vS;R;2nd of 5');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; 3 resolvable (mottled not resolved) diameter of 5';
		result = getDescription('vF;vS;R;3rd of 5');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; much elongated/extended; pretty bright stars near south preceding';
		result = getDescription('eeF;S;mE;pB* nr sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; brighter middle; 4th of 5';
		result = getDescription('vF;R;bM;4th of 5');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; round; 5th of 5';
		result = getDescription('pB;R;5th of 5');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; very little/long elongated/extended; brighter middle; resolvable (mottled not resolved); 2 stars 14 north preceding';
		result = getDescription('F;S;vlE;bM;r;2*14 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; brighter middle';
		result = getDescription('eF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular round; brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;vS;iR;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; double';
		result = getDescription('vF;double');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; little/long brighter middle; stars faint 46 suddenly/south; 3 arcminutes suddenly/south';
		result = getDescription('F;pL;R;lbM;*F46s;3\'s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle';
		result = getDescription('vF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint';
		result = getDescription('eeF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; little/long brighter middle; suddenly/south of 2';
		result = getDescription('vF;pL;R;lbM;s of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; north of 2';
		result = getDescription('eF;S;n of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively following; very small';
		result = getDescription('ef;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle';
		result = getDescription('F;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; brighter middle';
		result = getDescription('eF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/very remarkable object very bright; very large; Eridanus; very much compressed middle';
		result = getDescription('!! vB;vL;eRi;vmCM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; little/long elongated/extended; very gradually brighter middle';
		result = getDescription('pB;pS;lE;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; round; very gradually little/long brighter middle';
		result = getDescription('vF;L;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; very little/long elongated/extended; resolvable (mottled not resolved); star of 8th magnitude near';
		result = getDescription('eF;S;vlE;r;*8 nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; irregular round; very gradually brighter middle; 1 stars of several';
		result = getDescription('F;iR;vgbM;1st of several');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; 2 north diameter of several';
		result = getDescription('vF;R;2nd of several');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'in train of stars and nebula';
		result = getDescription('in train of st and neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round';
		result = getDescription('vF;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; binuclear';
		result = getDescription('vF;S;bi-N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended or binuclear; very gradually little/long brighter middle';
		result = getDescription('F;S;E or bi-N;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; very little/long elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('F;pL;vlE;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle; star of 9th magnitude north following 40 arcseconds';
		result = getDescription('F;S;R;gbM;* 9 nf 40\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; gradually brighter middle star of 13th magnitude';
		result = getDescription('F;pL;R;gbM * 13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round';
		result = getDescription('F;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; faint; pretty large; stars very small';
		result = getDescription('Cl;F;pL;st vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'a magnificent or otherwise interesting object very very bright; most extremely large; irregular round; stars from 12th to 18th magnitude';
		result = getDescription('!!!vvB;eeL;iR;st 12...18');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; very gradually little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;pL;R;vglbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; round; gradually very little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;vS;R;gvlbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small';
		result = getDescription('F;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; small; little/long elongated/extended; stars from 13th to 15th magnitude';
		result = getDescription('vB;S;lE;st 13...15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; round; very gradually brighter middle';
		result = getDescription('F;L;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; very irregular figure; much brighter middle double stars; resolvable (mottled not resolved)';
		result = getDescription('B;L;viF;mbMD*;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very very faint; pretty large; very little/long elongated/extended; very gradually brighter middle';
		result = getDescription('vvF;pL;vlE;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very much elongated/extended 145 degrees; very little/long brighter middle';
		result = getDescription('eF;vmE 145 degrees;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; very compressed; very much brighter middle';
		result = getDescription('vB;vL;vC;vmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; faint; large; round; preceding compressed; stars from 14th to 16th magnitude';
		result = getDescription('Cl;F;L;R;pC;st 14...16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round';
		result = getDescription('B;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; gradually little/long brighter middle';
		result = getDescription('vF;pL;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very large; round; very gradually little/long brighter middle';
		result = getDescription('F;vL;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round; gradually very little/long brighter middle';
		result = getDescription('eF;pL;R;gvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; gradually brighter middle';
		result = getDescription('F;pS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; gradually brighter middle';
		result = getDescription('pB;pL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; (in Nubec. minor)';
		result = getDescription('vF;(in Nubec. minor)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle; star of 12th magnitude following';
		result = getDescription('F;S;R;gbM;* 12 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; pretty suddenly brighter middle';
		result = getDescription('B;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round';
		result = getDescription('F;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; irregular round; resolvable (mottled not resolved); 1 stars of several';
		result = getDescription('pF;pL;iR;r;1st of sev');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; irregular round; gradually brighter middle; 2 north diameter of several';
		result = getDescription('F;pL;iR;gbM;2nd of sev');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; round; very gradually brighter middle';
		result = getDescription('pF;L;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; irregular figure; 3 resolvable (mottled not resolved) diameter of several';
		result = getDescription('pB;pL;iF;3rd of sev');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; gradually brighter middle';
		result = getDescription('vF;pS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; small; little/long elongated/extended; pretty suddenly much brighter middle';
		result = getDescription('vB;S;lE;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; 2 stars near';
		result = getDescription('pB;S;R;2st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; little/long elongated/extended; very gradually very little/long brighter middle; 3 stars south following';
		result = getDescription('eeF;lE;vgvlbM;3 st sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; much elongated/extended 90';
		result = getDescription('pB;pS;mE90');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle';
		result = getDescription('F;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; very gradually little/long brighter middle';
		result = getDescription('pB;pS;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably small; round; gradually pretty much brighter middle';
		result = getDescription('pB;cS;R;gpmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; extremely/excessively small; among 5 stars (doubtful)';
		result = getDescription('cF;eS;am 5 st (doubtful)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; gradually little/long brighter middle; north preceding of 2';
		result = getDescription('pF;pS;R;glbM;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; south following of 2';
		result = getDescription('eF;S;R;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; round';
		result = getDescription('eF;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably large; round; very gradually very little/long brighter middle';
		result = getDescription('eF;cL;R;vgvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; little/long elongated/extended; very suddenly/south very much brighter middle star of 11th magnitude';
		result = getDescription('B;S;lE;vsvmbM *11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty large';
		result = getDescription('eeF;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; preceding of 2';
		result = getDescription('eF;S;R;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably small; round; following of 2';
		result = getDescription('eF;cS;R;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; star of 95th magnitude degree';
		result = getDescription('eF;S;R;* 95 deg');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'no description';
		result = getDescription('no description');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long brighter middle';
		result = getDescription('F;S;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; stars north following (310 degree)';
		result = getDescription('cF;S;R;* nf (310 deg)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round';
		result = getDescription('eF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; small; elongated in position angle 130 degrees; pretty suddenly much brighter middle';
		result = getDescription('cB;S;E130;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '1 stars of 2 very faint; very small; very near 2629';
		result = getDescription('1st of 2 vF;vS;vnr 2629');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2 north diameter of 2 very faint; very small; very near 2629';
		result = getDescription('2nd of 2 vF;vS;vnr 2629');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; stellar';
		result = getDescription('vF;S;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty suddenly brighter middle';
		result = getDescription('eF;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; stellar';
		result = getDescription('vF;S;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; faint stars in middle; faint stars close south preceding';
		result = getDescription('pF;S;F* in M;F* close sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; irregular figure; extremely/excessively round';
		result = getDescription('pB;pL;iF;eR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; little/long compressed';
		result = getDescription('Cl;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; 4 pretty bright stars north following';
		result = getDescription('eeF;pS;R;4pB* nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; star of 15th magnitude preceding 12 small';
		result = getDescription('vF;R;*15p 12S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; very gradually; very suddenly/south much brighter middle star of 10th magnitude';
		result = getDescription('vB;vL;vg;vsmbM *10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; gradually brighter middle; 4 small stars near';
		result = getDescription('F;pL;R;gbM;4S* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; double or stars close following';
		result = getDescription('vF;vS;D or* close f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small';
		result = getDescription('vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small';
		result = getDescription('vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very very faint; small';
		result = getDescription('vvF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very very faint; small';
		result = getDescription('vvF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; round; faint stars in centre';
		result = getDescription('pF;R;F* in centre');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; pretty suddenly brighter middle';
		result = getDescription('vF;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; little/long elongated/extended; pretty suddenly much brighter middle';
		result = getDescription('pB;lE;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; 1 arcminutes suddenly/south of 2693';
		result = getDescription('vF;vS;1\'s of 2693');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; fan-shaped; star of 11th magnitude attached';
		result = getDescription('pB;fan-shaped;*11 att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty small; irregular round; easily resolvable';
		result = getDescription('cF;pS;iR;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; north preceding 2740';
		result = getDescription('vF;S;R;np 2740');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round';
		result = getDescription('vF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'inner regions very Black--MCG';
		result = getDescription('Inner Regions Very Black--MCG');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably large; elongated/extended 90 degree; easily resolvable';
		result = getDescription('cB;cL;E 90 deg;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty much elongated/extended';
		result = getDescription('F;pmE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; elongated/extended; very gradually brighter middle';
		result = getDescription('pB;pS;E;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very very faint; small; round; 1 stars of 4';
		result = getDescription('vvF;S;R;1st of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; suddenly/south brighter middle star of 15th magnitude; 2 north diameter of 4';
		result = getDescription('vF;sbM *15;2nd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; elongated/extended; pretty suddenly little/long brighter middle; 3 resolvable (mottled not resolved) diameter of 4';
		result = getDescription('pF;S;E;pslbM;3rd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended; 4th of 4';
		result = getDescription('vF;S;lE;4th of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably large; little/long elongated/extended; pretty suddenly brighter middle; large bright Nucleus or to a Nucleus';
		result = getDescription('cB;cL;lE;psbM;LBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended; stars attached; stars involved/involving';
		result = getDescription('vF;S;lE;* att;* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; little/long elongated/extended 90 degree; much brighter middle; resolvable (mottled not resolved); very small stars south following involved/involving';
		result = getDescription('B;pL;lE 90 deg;mbM;r;vS* sf inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; round; much brighter middle';
		result = getDescription('vF;L;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular figure; 1 stars of 2';
		result = getDescription('F;S;iF;1st of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended; 2 north diameter of 2';
		result = getDescription('F;S;E;2nd of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; very much elongated/extended 151; very suddenly/south much brighter middle = star of 10th magnitude';
		result = getDescription('vB;L;vmE151;vsmbM = *10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; brighter middle';
		result = getDescription('F;cS;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; very little/long elongated/extended; pretty gradually little/long brighter middle';
		result = getDescription('cF;cS;vlE;pglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; little/long elongated/extended; brighter middle';
		result = getDescription('cF;cS;lE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; 4 stars preceding';
		result = getDescription('vF;pL;4 st p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; elongated/extended; very gradually little/long brighter middle';
		result = getDescription('cF;S;E;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; considerably small; round; much brighter middle; among stars; in field of 23 Ursa Majoris';
		result = getDescription('B;cS;R;mbM;am st;in field of 23 Ursa Majoris');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; very gradually brighter middle; double star of 7th magnitude arcminutes suddenly/south';
		result = getDescription('vF;vS;R;vgbM;D* 7\'s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; little/long brighter middle';
		result = getDescription('pF;pS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; pretty suddenly brighter middle';
		result = getDescription('eF;S;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; round; very gradually very much brighter middle Nucleus or to a Nucleus';
		result = getDescription('B;pS;R;vgvmbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; very gradually little/long brighter middle; stars north';
		result = getDescription('F;pL;R;vglbM;st n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; little/long elongated/extended; north following 2959';
		result = getDescription('cF;S;lE;nf 2959');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; very large; much elongated/extended 152; stars involved/involving';
		result = getDescription('B;vL;mE152;st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; elongated in position angle 51 degrees; brighter middle Nucleus or to a Nucleus; resolvable (mottled not resolved)';
		result = getDescription('pF;pL;E51;bMN;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round; resolvable (mottled not resolved)';
		result = getDescription('vF;S;iR;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small';
		result = getDescription('eeF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; suspected';
		result = getDescription('eF;suspected');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; elongated/extended north north preceding suddenly/south south following';
		result = getDescription('vF;pS;E nnp ssf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; stellar';
		result = getDescription('vF;S;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; elongated/extended; star of 13th magnitude - 14 preceding 1 arcminutes';
		result = getDescription('pF;S;E;*13-14 p 1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; round; brighter middle; resolvable (mottled not resolved); preceding of 2';
		result = getDescription('pF;R;bM;r;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; considerably large; round; pretty suddenly much brighter middle; stars involved/involving following';
		result = getDescription('vB;cL;R;psmbM;* inv f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty suddenly brighter middle; partially resolved some stars seen; following of 2';
		result = getDescription('F;psbM;rr;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object extremely/excessively bright; extremely/excessively large; elongated/extended 156; gradually suddenly/south very much brighter middle; bright Nucleus or to a Nucleus';
		result = getDescription('! eB;eL;E 156;gsvmbM;BN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very large; little/long elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('vF;vL;lE;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; very much elongated/extended (ray)';
		result = getDescription('vB;vL;vmE(ray)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty small; little/long elongated/extended; very gradually brighter middle; star of 10th magnitude north 7 arcminutes';
		result = getDescription('cF;pS;lE;vgbM;*10 n 7\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very gradually little/long brighter middle';
		result = getDescription('vF;S;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round';
		result = getDescription('F;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; round; brighter middle; star of 11th magnitude near';
		result = getDescription('pF;vS;R;bM;*11 nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; much elongated/extended 135; long streak';
		result = getDescription('vB;L;mE 135;long streak');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; very gradually little/long brighter middle';
		result = getDescription('vF;vS;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably large; much brighter middle; round with ray';
		result = getDescription('cB;cL;mbM;R w ray');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula stars ? 2 arcminutes north preceding 3102';
		result = getDescription('neb *? 2\' np 3102');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; brighter middle; star of 11th magnitude; 142';
		result = getDescription('vF;vS;R;bM;*11;142');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; suddenly/south much brighter middle star of 12th magnitude';
		result = getDescription('pB;S;R;smbM *12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle';
		result = getDescription('F;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 7th magnitude in photosphere 2 arcminutes or 3arcminutes diameter';
		result = getDescription('*7 in photosphere 2\' or 3\' d');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; very gradually little/long brighter middle';
		result = getDescription('eF;S;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty suddenly brighter middle; stellar; star of 7th magnitude - 8 north preceding 5 arcminutes';
		result = getDescription('F;psbM;stellar;*7-8 np 5\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; round; brighter middle Nucleus or to a Nucleus; in line with 2 stars';
		result = getDescription('S;R;bMN;in line w 2 st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; elongated/extended; connected with 3184';
		result = getDescription('vF;E;connected w 3184');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; elongated/extended; connected with 3184';
		result = getDescription('vF;E;connected w 3184');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very large; round; very gradually brighter middle';
		result = getDescription('pB;vL;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle';
		result = getDescription('F;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; (= 3191)';
		result = getDescription('eF;vS;(=3191)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably large; irregular round; very gradually brighter middle';
		result = getDescription('cB;cL;iR;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round';
		result = getDescription('vF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very large; much elongated/extended 45; very gradually brighter middle';
		result = getDescription('pB;vL;mE 45;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; very gradually brighter middle; 1 stars of 3';
		result = getDescription('cF;S;R;vgbM;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; very gradually brighter middle; 2 north diameter of 3';
		result = getDescription('cF;S;R;vgbM;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; stellar; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('cF;S;R;stellar;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; elongated/extended; very gradually little/long brighter middle';
		result = getDescription('pB;cL;E;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; very small; round; suddenly/south brighter middle; 5 arcminutes preceding 3220';
		result = getDescription('cB;vS;R;sbM;5\' p 3220');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably large; elongated/extended 92; star of 9th magnitude following 9.5 arcminutes';
		result = getDescription('pF;cL;E 92;*9 f 9\'.5');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; little/long elongated/extended; very gradually brighter middle';
		result = getDescription('cF;pL;lE;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; pretty gradually brighter middle';
		result = getDescription('vF;vS;R;pgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; pretty suddenly little/long brighter middle';
		result = getDescription('F;S;R;pslbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; pretty suddenly brighter middle; 2 stars 11th magnitude and fainter- 12 following';
		result = getDescription('eF;vS;psbM;2 st 11-12 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; considerably large; poor; little/long compressed; stars from 10th to 12th magnitude';
		result = getDescription('Cl;cL;P;lC;*10...12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very large; irregular; much elongated/extended';
		result = getDescription('eF;vL;Irr;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; between 2 small stars';
		result = getDescription('eF;bet 2 S st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle';
		result = getDescription('F;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; round; pretty suddenly much brighter middle stars';
		result = getDescription('cF;vS;R;psmbM *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; pretty suddenly little/long brighter middle';
		result = getDescription('vF;pS;R;pslbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably small; round; very gradually little/long brighter middle';
		result = getDescription('eF;cS;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; irregular elongated/extended';
		result = getDescription('vF;pS;iE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; round; very gradually; very suddenly/south much brighter middle Nucleus or to a Nucleus 15 arcseconds';
		result = getDescription('cB;pL;R;vg;vsmbMN 15\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; large; much elongated/extended';
		result = getDescription('cF;L;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; much elongated/extended; star of 10th magnitude north following';
		result = getDescription('F;pS;mE;*10 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; round; pretty gradually brighter middle; stars suddenly/south 90 arcseconds';
		result = getDescription('F;cS;R;pgbM;* s 90\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; elongated/extended 0; gradually little/long brighter middle';
		result = getDescription('pB;L;E 0;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; irregular little/long elongated/extended; pretty suddenly brighter middle; star of 11th magnitude 282; 21 arcseconds';
		result = getDescription('B;S;ilE;psbM;*11 282;21\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; irregular round';
		result = getDescription('vF;cS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; round; very gradually brighter middle; resolvable (mottled not resolved); double stars south following';
		result = getDescription('vF;L;R;vgbM;r;D* sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; little/long elongated/extended; very gradually brighter middle';
		result = getDescription('cF;S;lE;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; pretty suddenly brighter middle; stars near';
		result = getDescription('vF;S;psbM;st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended; easily resolvable';
		result = getDescription('vF;S;E;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; round; pretty gradually brighter middle';
		result = getDescription('pB;R;pgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; very little/long elongated/extended; stellar; 3 small stars near';
		result = getDescription('pB;S;vlE;stell;3 S st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint (faint stars ? ); north of 3415';
		result = getDescription('eF (F*?);n of 3415');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; diffused; 2 arcminutes south following 3406';
		result = getDescription('F;pS;dif;2\' sf 3406');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; round; 2 pretty bright stars suddenly/south';
		result = getDescription('vF;cS;R;2 pB st s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; very small stars near';
		result = getDescription('vF;vS;R;vS * nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended';
		result = getDescription('vF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; irregular round; very gradually little/long brighter middle; star of 10th magnitude north following 2 arcminutes';
		result = getDescription('cB;pL;iR;vglbM;*10 nf 2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; much elongated/extended 67; gradually brighter middle';
		result = getDescription('B;pL;mE 67;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty small; little/long elongated/extended; very gradually brighter middle';
		result = getDescription('cF;pS;lE;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very small; round; stellar';
		result = getDescription('vB;vS;R;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; extremely/excessively small; round; brighter middle';
		result = getDescription('F;eS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; very gradually brighter middle';
		result = getDescription('vF;S;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle';
		result = getDescription('vF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very little/long elongated/extended; pretty small; star of 13th magnitude suddenly/south attached';
		result = getDescription('eF;vlE;pS;*13 s att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar';
		result = getDescription('vF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; very gradually brighter middle';
		result = getDescription('eF;S;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; irregular round; pretty suddenly much brighter middle stars';
		result = getDescription('pB;vS;iR;psmbM *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; star of 10th magnitude preceding 60 arcseconds';
		result = getDescription('eF;S;*10 p 60\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; pretty gradually brighter middle';
		result = getDescription('vF;S;R;pgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle';
		result = getDescription('F;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; pretty suddenly brighter middle; star of 7th magnitude preceding 7 arcminutes';
		result = getDescription('vF;R;psbM;*7 p 7\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; star of 8th magnitude; preceding';
		result = getDescription('eF;S;*8;p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular resolvable (mottled not resolved) round; little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;S;irrR;lbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular resolvable (mottled not resolved) round; little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;vS;irrR;lbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint (variable?); small; round; brighter middle; star of 9th magnitude following 1 arcminutes; 1 stars of 4';
		result = getDescription('F (var?);S;R;bM;*9 f 1\';1st of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; 2 north diameter of 4';
		result = getDescription('eF;vS;2nd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; forms double nebula with NGC 3552';
		result = getDescription('eF;vS;forms Dneb w NGC 3552');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; brighter middle; 3 resolvable (mottled not resolved) diameter of 4';
		result = getDescription('vF;pS;R;bM;3rd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; elongated/extended 0; resolvable (mottled not resolved)';
		result = getDescription('eF;vS;E 0;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably large; considerably elongated/extended 160';
		result = getDescription('cB;cL;cE 160');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small';
		result = getDescription('pF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; 4th of 4';
		result = getDescription('vF;pL;4th of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; very large; very much elongated/extended 79; pretty bright middle';
		result = getDescription('cB;vL;vmE 79;pBM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; stellar';
		result = getDescription('F;vS;stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; preceding of 2';
		result = getDescription('eF;vS;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; very gradually much brighter middle';
		result = getDescription('pB;pL;R;vgmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/very remarkable object very bright; very large; round; very very gradually; very suddenly/south brighter middle';
		result = getDescription('!! vB;vL;R;vvg;vsbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; elongated/extended; very gradually brighter middle; in triangle of large stars';
		result = getDescription('vF;L;E;vgbM;in tri of L st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; very little/long elongated/extended; stellar; considerably bright stars north';
		result = getDescription('vF;vS;vlE;stellar;cB* n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; little/long elongated/extended 0; very gradually brighter middle';
		result = getDescription('pF;S;lE 0;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar';
		result = getDescription('vF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty small; little/long elongated/extended 90; very suddenly/south very much brighter middle supernova';
		result = getDescription('vB;pS;lE 90;vsvmbMSN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; little/long elongated/extended 90; gradually little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;pL;lE 90;glbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; considerably large; much elongated/extended 305; suddenly/south much brighter middle Nucleus or to a Nucleus';
		result = getDescription('vB;cL;mE 305;smbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably large; round; very gradually much brighter middle';
		result = getDescription('cB;cL;R;vgmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; gradually brighter middle';
		result = getDescription('pB;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended 135';
		result = getDescription('F;S;lE 135');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; round; suddenly/south very much brighter middle resolvable (mottled not resolved) Nucleus or to a Nucleus';
		result = getDescription('pB;L;R;svmbMrN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - 5 galaxies seen at 165X; 2 brightest pretty faint; small; round';
		result = getDescription('13\'\'-5 gals seen at 165X; 2 brightest pF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; very gradually brighter middle';
		result = getDescription('pB;pL;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; pretty much elongated/extended; brighter middle Nucleus or to a Nucleus = close double star ?';
		result = getDescription('pB;S;pmE;bMN = close ** ?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably large; little/long elongated/extended; very gradually brighter middle';
		result = getDescription('pF;cL;lE;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; very gradually brighter middle; star of 12th magnitude preceding';
		result = getDescription('pB;S;R;vgbM;*12 p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; round; stellar';
		result = getDescription('cF;vS;R;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; suddenly/south very much brighter middle Nucleus or to a Nucleus = star of 14th magnitude';
		result = getDescription('F;S;R;svmbMN = *14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended 15';
		result = getDescription('F;S;lE 15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably large; irregular round; pretty gradually much brighter middle';
		result = getDescription('cB;cL;iR;pgmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; pretty much elongated/extended 135; easily resolvable';
		result = getDescription('vF;pL;pmE 135;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; irregular round; gradually brighter middle; star of 9th magnitude north preceding';
		result = getDescription('F;pS;iR;gbM;*9 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; 2 very small stars involved/involving';
		result = getDescription('vF;vS;2 vS st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; considerably large; very much elongated/extended 0; very suddenly/south much brighter middle Nucleus or to a Nucleus; many stars preceding';
		result = getDescription('vB;cL;vmE 0;vsmbMN;many st p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; very suddenly/south brighter middle stars; 2 stars 11th magnitude and fainter north following';
		result = getDescription('eF;S;R;vsbM *;2 st 11 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; irregular figure';
		result = getDescription('pF;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; 2 stars near';
		result = getDescription('pF;pS;R;2 * nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; elongated/extended';
		result = getDescription('cB;pL;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;pS;R;lbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; very little/long elongated/extended 80; pretty gradually brighter middle; small stars south following near';
		result = getDescription('pB;pS;vlE 80;pgbM;S st sf nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; much brighter middle';
		result = getDescription('cF;S;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; NGC 3694 4 arcminutes suddenly/south';
		result = getDescription('eF;pS;NGC 3694 4\' s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; NGC 3694 preceding';
		result = getDescription('eF;NGC 3694 p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; suddenly/south much brighter middle';
		result = getDescription('F;vS;R;smbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; pretty suddenly brighter middle';
		result = getDescription('F;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very large; round; very gradually little/long brighter middle';
		result = getDescription('pB;vL;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very large; little/long elongated/extended 0; very suddenly/south much brighter middle star of 15th magnitude; star of 11th magnitude north';
		result = getDescription('pB;vL;lE 0;vsmbM *15;*11 n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; gradually very little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cF;S;R;gvlbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; little/long elongated/extended 0; gradually brighter middle; star of 12th magnitude near';
		result = getDescription('pB;pL;lE 0;gbM;*12 nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; irregular round; star of 6th magnitude south following';
		result = getDescription('eF;S;iR;*6 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; stellar';
		result = getDescription('vF;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; brighter middle';
		result = getDescription('pB;pL;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; very gradually brighter middle';
		result = getDescription('vF;S;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; very gradually brighter middle';
		result = getDescription('vF;vS;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; pretty much elongated/extended; gradually brighter middle';
		result = getDescription('eF;pL;pmE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; much elongated/extended north-south';
		result = getDescription('pF;L;mE N-S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular round; star of 11th magnitude near';
		result = getDescription('F;S;iR;*11 nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; stellar; very small star of 1th magnitude diameter south following';
		result = getDescription('vF;R;stellar;vS* 1 d sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very little/long elongated/extended; gradually brighter middle';
		result = getDescription('F;vlE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; pretty much elongated/extended';
		result = getDescription('pB;S;pmE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pF;S;R;gbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; attached to star of 15th magnitude; another stars involved/involving';
		result = getDescription('F;S;att to *15;another * inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; very little/long elongated/extended; very gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pF;L;vlE;vgbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; elongated/extended 57; gradually brighter middle; preceding of 2';
		result = getDescription('pB;pL;E 57;gbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; pretty much elongated/extended 177; pretty gradually brighter middle';
		result = getDescription('cB;pL;pmE 177;pgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; following NGC 3788';
		result = getDescription('vS;f NGC 3788');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; much elongated/extended';
		result = getDescription('vF;S;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; following NGC 3788';
		result = getDescription('vS;f NGC 3788');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; round; much brighter middle';
		result = getDescription('F;cS;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty small; very small stars very near';
		result = getDescription('cF;pS;vS* vnr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; elongated/extended';
		result = getDescription('pB;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; gradually little/long brighter middle';
		result = getDescription('pB;S;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; very little/long elongated/extended; gradually little/long brighter middle';
		result = getDescription('F;S;vlE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; pretty much elongated/extended 83; brighter middle';
		result = getDescription('cB;pL;pmE 83;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; pretty much elongated/extended';
		result = getDescription('vF;cS;pmE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; elongated/extended; gradually brighter middle; south following 5 arcminutes';
		result = getDescription('pB;E;gbM;sf 5\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably small; elongated/extended; pretty suddenly brighter middle star of 12th magnitude';
		result = getDescription('pB;cS;E;psbM *12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; pretty suddenly brighter middle';
		result = getDescription('F;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; brighter middle';
		result = getDescription('vF;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; very gradually brighter middle';
		result = getDescription('F;pL;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; little/long elongated/extended';
		result = getDescription('eF;pL;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; round; pretty suddenly brighter middle';
		result = getDescription('cF;cS;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; much elongated/extended 37';
		result = getDescription('B;L;mE 37');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; round; gradually brighter middle; 1 stars of 4';
		result = getDescription('eF;R;gbM;1st of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; 2 north diameter of 4';
		result = getDescription('vF;R;2nd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; gradually brighter middle; 3 resolvable (mottled not resolved) diameter of 4';
		result = getDescription('vF;R;gbM;3rd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; gradually brighter middle; 4th of 4';
		result = getDescription('vF;R;gbM;4th of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; little/long elongated/extended; pretty gradually brighter middle';
		result = getDescription('pB;S;lE;pgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; 5 arcminutes south following NGC 3888';
		result = getDescription('vF;vS;5\' sf NGC 3888');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; brighter middle';
		result = getDescription('pB;S;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; round; much brighter middle';
		result = getDescription('B;pL;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; irregular round; pretty gradually much brighter middle; preceding of 2';
		result = getDescription('B;pL;iR;pgmbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small';
		result = getDescription('F;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle';
		result = getDescription('F;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; very little/long elongated/extended; gradually brighter middle; following of 2';
		result = getDescription('pF;pL;vlE;gbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; little/long elongated/extended; suddenly/south very much brighter middle';
		result = getDescription('B;pL;lE;svmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large';
		result = getDescription('eF;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; elongated/extended';
		result = getDescription('F;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; very much elongated/extended; very gradually brighter middle';
		result = getDescription('F;L;vmE;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; round; gradually brighter middle';
		result = getDescription('eF;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; pretty suddenly pretty much brighter middle';
		result = getDescription('pF;S;R;pspmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; irregular figure; brighter middle';
		result = getDescription('pB;S;iF;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; pretty suddenly pretty much brighter middle';
		result = getDescription('pF;S;R;pspmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably large; irregular figure; gradually little/long brighter middle; star of 7th magnitude (Grb 1830) following';
		result = getDescription('eF;cL;iF;glbM;*7 (Grb 1830) f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; little/long elongated/extended; pretty suddenly brighter middle';
		result = getDescription('pF;S;lE;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very difficult; NGC 3928 north preceding';
		result = getDescription('vF;v diffic;NGC 3928 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; very large; round; brighter middle; pretty bright Nucleus or to a Nucleus; easily resolvable';
		result = getDescription('B;vL;R;bM;pBN;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; round; suddenly/south much brighter middle star of 9th magnitude';
		result = getDescription('vB;pL;R;smbM *9');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; round; gradually much brighter middle; resolvable (mottled not resolved); star of 12th magnitude south preceding';
		result = getDescription('B;pL;R;gmbM;r;*12 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; pretty much elongated/extended; very gradually brighter middle';
		result = getDescription('cB;pL;pmE;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; 2.6 arcminutes north of NGC 3949';
		result = getDescription('eF;2.6\' n of NGC 3949');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; large; elongated/extended 0; very suddenly/south brighter middle; fine spiral';
		result = getDescription('cB;L;E 0;vsbM;fine spiral');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; pretty much elongated/extended; very gradually brighter middle';
		result = getDescription('pF;pS;pmE;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably large; round; very gradually suddenly/south brighter middle';
		result = getDescription('pF;cL;R;vgsbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; round; brighter middle';
		result = getDescription('pF;vS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; brighter middle';
		result = getDescription('eF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; elongated/extended';
		result = getDescription('pB;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; NGC 3978 following 17 arcseconds';
		result = getDescription('vF;vS;NGC 3978 f 17\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small';
		result = getDescription('F;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; elongated/extended; double stars near';
		result = getDescription('eF;pL;E;D* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; little/long elongated/extended; brighter middle; star of 8th magnitude; 90; 6 arcminutes';
		result = getDescription('cF;S;lE;bM;*8;90;6\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very diffused';
		result = getDescription('vF;S;v dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; round; gradually; suddenly/south brighter middle; disc';
		result = getDescription('B;pL;R;g;sbM;disc');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; little/long elongated/extended; brighter middle; star of 12th magnitude preceding';
		result = getDescription('F;pL;lE;bM;*12 p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; another suspected';
		result = getDescription('vF;cS;another suspected');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; pretty much elongated/extended 90; star of 11th magnitude near';
		result = getDescription('pF;S;pmE 90;*11 nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended; 1 stars of 3';
		result = getDescription('F;S;lE;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; little/long elongated/extended; pretty suddenly little/long brighter middle';
		result = getDescription('pF;S;lE;pslbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; very large; pretty much elongated/extended; suddenly/south brighter middle; bright Nucleus or to a Nucleus';
		result = getDescription('cB;vL;pmE;sbM;BN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; 2 north diameter of 3';
		result = getDescription('pB;vS;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; irregular round; brighter middle; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('F;pL;iR;bM;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'inner regions completely Black--MCG';
		result = getDescription('Inner Regions Completely Black--MCG');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty small; round; very gradually; suddenly/south much brighter middle';
		result = getDescription('cB;pS;R;vg;smbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; round; 7 arcminutes north preceding 4010';
		result = getDescription('S;R;7\' np 4010');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; considerably large; much elongated/extended 62; very suddenly/south very much brighter middle star of 10th magnitude';
		result = getDescription('B;cL;mE62;vsvmbM*10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; elongated/extended; little/long brighter middle';
		result = getDescription('pB;L;E;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; much elongated/extended; very gradually little/long brighter middle';
		result = getDescription('F;pL;mE;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; little/long elongated/extended; brighter middle';
		result = getDescription('pB;L;lE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; elongated in position angle 20 degrees; binuclear';
		result = getDescription('pB;pL;E20;biN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round';
		result = getDescription('eF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; considerably large; much elongated/extended 176; very suddenly/south very much brighter middle; bright Nucleus or to a Nucleus';
		result = getDescription('vB;cL;mE176;vsvmbM;BN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'inner regions completely Black--MCG';
		result = getDescription('Inner Regions Completely Black--MCG');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; star of 17th magnitude very near south';
		result = getDescription('eF;vS;*17 vnr south');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; elongated/extended; very bright Nucleus or to a Nucleus';
		result = getDescription('vB;vL;E;vBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; considerably large; round; gradually; pretty suddenly very much brighter middle resolvable (mottled not resolved) Nucleus or to a Nucleus; very bright center with companion struct';
		result = getDescription('B;cL;R;g;psvmbMrN;vB cent w comp struct');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; very suddenly/south very bright Nucleus or to a Nucleus';
		result = getDescription('pB;pS;R;vsvBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; very large; elongated/extended; very gradually very suddenly/south much brighter middle star of 11th magnitude; very suddenly/south extremely/excessively bright Nucleus or to a Nucleus or stars';
		result = getDescription('B;vL;E;vgvsmbM*11;vseBN or *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; stellar';
		result = getDescription('pF;S;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very large; much elongated/extended 97; very gradually brighter middle; very suddenly/south bright Nucleus or to a Nucleus';
		result = getDescription('pB;vL;mE97;vgbM;vsBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; between 2 distance or distant Antlia stars';
		result = getDescription('eeF;pS;R;between 2 distant *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; much elongated/extended; double stars near';
		result = getDescription('F;S;mE;D* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; pretty much elongated/extended 78; very suddenly/south brighter middle';
		result = getDescription('B;pL;pmE78;vsbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; considerably large; elongated in position angle 55 degrees; little/long brighter middle';
		result = getDescription('B;cL;E55;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very large; much elongated/extended 32; suddenly/south bright Nucleus or to a Nucleus or bar';
		result = getDescription('pB;vL;mE32;sBN or bar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; stellar; star of 10th magnitude south preceding 2 arcminutes';
		result = getDescription('eF;vS;R;stellar;*10 sp 2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very large; very much elongated/extended 161; very gradually very little/long brighter middle; very suddenly/south bright Nucleus or to a Nucleus';
		result = getDescription('pB;vL;vmE161;vgvlbM;vsBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; round; brighter middle; bright Nucleus or to a Nucleus; star of 12th magnitude south preceding';
		result = getDescription('B;pS;R;bM;BN;*12 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular figure; very gradually little/long brighter middle; easily resolvable';
		result = getDescription('vF;S;iF;vglbM;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended; gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;pS;lE;gbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably large; very much elongated/extended 109; very gradually brighter middle; bright middle no bright Nucleus or to a Nucleus';
		result = getDescription('pF;cL;vmE109;vgbM;BM no BN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended';
		result = getDescription('F;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated in position angle 90 degrees';
		result = getDescription('vF;S;E90');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably large; very much elongated/extended 60';
		result = getDescription('pF;cL;vmE60');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended; gradually brighter middle';
		result = getDescription('F;S;lE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; very suddenly/south brighter middle star of 12th magnitude';
		result = getDescription('pB;vS;vsbM *12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; little/long elongated/extended; gradually brighter middle';
		result = getDescription('pF;pS;lE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; irregular figure';
		result = getDescription('pB;pL;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; little/long elongated/extended; preceding of 2';
		result = getDescription('cF;lE;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; round; gradually much brighter middle';
		result = getDescription('pB;L;R;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula double stars';
		result = getDescription('Neb D*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; elongated/extended; gradually brighter middle';
		result = getDescription('pB;S;E;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; little/long elongated/extended';
		result = getDescription('cF;cS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; round; resolvable (mottled not resolved)';
		result = getDescription('vF;cS;R;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; round';
		result = getDescription('cF;cS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; irregular round';
		result = getDescription('cF;S;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; considerably small; elongated/extended; pretty gradually brighter middle; star of 9th magnitude following 50 arcseconds';
		result = getDescription('B;cS;E;pgbM;*9 f 50\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; irregular round; very gradually brighter middle';
		result = getDescription('pF;vS;iR;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; elongated/extended; very gradually brighter middle; star of 9th magnitude following 2 arcminutes; preceding of 2';
		result = getDescription('vF;pS;E;vgbM;*9 f 2\';p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; elongated/extended; following of 2';
		result = getDescription('eF;pS;E;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; irregular round; gradually brighter middle';
		result = getDescription('pF;S;iR;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; very much elongated/extended 118; gradually little/long brighter middle';
		result = getDescription('B;L;vmE118;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually brighter middle';
		result = getDescription('vF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; 4 very small stars south preceding';
		result = getDescription('F;S;4 vS * sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; gradually brighter middle; 2 bright star of 6th magnitude arcminutes north preceding';
		result = getDescription('pF;pL;gbM;2 B * 6\' np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; elongated/extended; resolvable (mottled not resolved) ?';
		result = getDescription('F;E;r?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; little/long elongated/extended 7';
		result = getDescription('cF;S;lE7');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; very much elongated/extended; very suddenly/south much brighter middle';
		result = getDescription('pF;vS;vmE;vsmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; very little/long elongated/extended; much brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;pS;vlE;mbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; very suddenly/south much brighter middle';
		result = getDescription('F;S;vsmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended';
		result = getDescription('eF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; very little/long elongated/extended; very gradually brighter middle';
		result = getDescription('B;pS;vlE;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended';
		result = getDescription('eF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended; stars attached';
		result = getDescription('vF;S;E;* att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small';
		result = getDescription('cF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'inner regions very Black--MCG';
		result = getDescription('Inner Regions Very Black--MCG');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; north preceding of 2';
		result = getDescription('vF;vS;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; irregular round; gradually brighter middle';
		result = getDescription('pF;S;iR;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; round; stellar';
		result = getDescription('cF;vS;R;Stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; considerably elongated/extended';
		result = getDescription('cF;S;cE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; elongated/extended; (= 5109)';
		result = getDescription('cF;S;E;(=5109)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; stellar';
		result = getDescription('cF;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; irregular round';
		result = getDescription('cF;S;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably small; round; very gradually little/long brighter middle';
		result = getDescription('pF;cS;R;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; irregular round; gradually much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;cL;iR;gmbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; between 2 very faint stars';
		result = getDescription('vF;pS;R;bet 2 vf *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; very little/long elongated/extended';
		result = getDescription('pB;S;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; gradually brighter middle';
		result = getDescription('pB;pL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; very gradually brighter middle';
		result = getDescription('pB;S;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; gradually brighter middle';
		result = getDescription('eF;vS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; round; very small nebula 40 arcseconds following; stars Nucleus or to a Nucleus';
		result = getDescription('pF;R;vS neb 40\'\'f;*N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; following of 2';
		result = getDescription('F;vS;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; 2 stars attached or involved/involving';
		result = getDescription('eF;2st att or inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; much elongated/extended 57; pretty suddenly brighter middle; bright Nucleus or to a Nucleus';
		result = getDescription('B;pL;mE57;psbM;BN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; irregular round; pretty suddenly much brighter middle';
		result = getDescription('vB;pL;iR;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small';
		result = getDescription('F;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; round; stellar; star of 16th magnitude north following';
		result = getDescription('F;cS;R;stell;*16 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; elongated/extended; (double star involved/involving)';
		result = getDescription('cF;S;E;(** inv)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; very little/long elongated/extended; very gradually much brighter middle';
		result = getDescription('cB;pL;vlE;vgmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; elongated/extended; much brighter middle';
		result = getDescription('pB;pS;E;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; elongated/extended; much brighter middle Nucleus or to a Nucleus';
		result = getDescription('pB;pL;E;mbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; pretty much elongated/extended 45; very suddenly/south very much brighter middle Nucleus or to a Nucleus';
		result = getDescription('pB;S;pmE45;vsvmbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended; bright star of 4th magnitude arcminutes north';
		result = getDescription('eF;S;lE;B*4\'n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; irregular elongated/extended; much brighter middle';
		result = getDescription('pB;S;iE;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; elongated/extended';
		result = getDescription('pF;L;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; gradually much brighter middle; connection middle 101';
		result = getDescription('pB;S;R;gmbM;conn M101');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; gradually very little/long brighter middle; connection middle 101';
		result = getDescription('vF;pL;gvlbM;conn M101');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; irregular round; gradually little/long brighter middle; connection middle 101';
		result = getDescription('F;pS;iR;glbM;conn M101');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular round; very little/long brighter middle; connection middle 101';
		result = getDescription('vF;pL;iR;vlbM;conn M101');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; very much elongated/extended 90; suddenly/south much brighter middle Nucleus or to a Nucleus';
		result = getDescription('pB;cL;vmE90;smbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; little/long elongated/extended; very little/long brighter middle; connection middle 101';
		result = getDescription('F;pL;lE;vlbM;conn M101');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; pretty suddenly brighter middle; connection middle 101';
		result = getDescription('pB;pS;R;psbM;conn M101');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very large; irregular round; gradually; very suddenly/south much brighter middle; bright supernova';
		result = getDescription('pB;vL;iR;g;vsmbM;BSN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; very little/long brighter middle; connection middle 101';
		result = getDescription('vF;pL;R;vlbM;conn M101');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; round; pretty suddenly brighter middle; connection middle 101';
		result = getDescription('B;pS;R;psbM;conn M101');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; irregular round; gradually brighter middle; connection middle 101';
		result = getDescription('pB;pL;iR;gbM;conn M101');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + stars';
		result = getDescription('E+*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; star of 12th magnitude; 13 preceding';
		result = getDescription('F;S;R;*12;13p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; gradually brighter middle';
		result = getDescription('pB;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; brighter middle; poor with middle 101';
		result = getDescription('pB;L;bM;P w M101');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; pretty much elongated/extended; brighter middle';
		result = getDescription('pB;S;pmE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large';
		result = getDescription('vF;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; very gradually brighter middle; north preceding of 2';
		result = getDescription('F;pS;vgbM;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; suddenly/south much brighter middle; stellar; south following of 2';
		result = getDescription('F;vS;smbM;stell;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; 4 arcminutes from 5485';
		result = getDescription('vF;S;R;4\'from 5485');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; round; very gradually brighter middle; following of 2';
		result = getDescription('cB;R;vgbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large';
		result = getDescription('F;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round; very difficult';
		result = getDescription('eeF;pS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; round; very difficult';
		result = getDescription('eeF;vS;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('vF;S;E;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; stellar';
		result = getDescription('eF;vS;R;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; faint stars close preceding';
		result = getDescription('eF;pS;R;F* close p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; irregular round; very gradually much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pF;L;iR;vgmbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; pretty suddenly brighter middle Nucleus or to a Nucleus';
		result = getDescription('B;S;R;psbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; gradually brighter middle; star of 11th magnitude 2 arcminutes suddenly/south';
		result = getDescription('vF;R;gbM;*11 2\' s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; small; round; gradually; suddenly/south bright middle';
		result = getDescription('cB;S;R;g;sBM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; little/long elongated/extended 0';
		result = getDescription('vF;pS;lE0');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; stellar; extremely/excessively faint stars very near';
		result = getDescription('vF;eS;stellar;eF*v nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; small';
		result = getDescription('Cl;P;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; irregular round; very gradually very little/long brighter middle';
		result = getDescription('vF;pL;iR;vgvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; 2 faint stars near';
		result = getDescription('eF;vS;R;2F* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; double stars preceding';
		result = getDescription('pF;S;R;D*p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; between 2 stars';
		result = getDescription('eF;vS;R;bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; elongated in position angle 0 degrees';
		result = getDescription('eF;vS;E0');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably small; irregular round; brighter middle; easily resolvable';
		result = getDescription('pF;cS;iR;bM;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; brighter middle';
		result = getDescription('vF;pL;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; small cluster preceding';
		result = getDescription('vF;S;R;S Cl p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round; between 2 stars';
		result = getDescription('vF;S;iR;bet 2 st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; triangle with 2 stars';
		result = getDescription('F;pL;triangle w 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; irregular round; brightest towards the preceding side; resolvable (mottled not resolved)';
		result = getDescription('pB;cL;iR;bp;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; little/long elongated/extended; 2 stars involved/involving';
		result = getDescription('eF;vS;lE;2* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - very faint; large; elongated/extended 1.5X1 at 60X; low surface brightness';
		result = getDescription('13\'\'-vF;L;E 1.5X1 at 60X; low surface brghtnss');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; little/long elongated/extended';
		result = getDescription('pB;pS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated in position angle 90 degrees; very small stars following';
		result = getDescription('vF;S;E90;vS*f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended 0; resolvable (mottled not resolved)';
		result = getDescription('vF;vS;lE0;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round; brighter middle';
		result = getDescription('F;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended';
		result = getDescription('vF;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; stars Nucleus or to a Nucleus';
		result = getDescription('vF;vS;R;*N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; brighter middle; preceding of 2';
		result = getDescription('cF;S;bM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; considerably large; little/long elongated/extended; suddenly/south little/long bright middle';
		result = getDescription('B;cL;lE;slBM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; following of 2';
		result = getDescription('vF;vS;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended; small stars suddenly/south';
		result = getDescription('vF;S;E;S*s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; bright; large; little/long compressed; stars 7th magnitude and fainter th to 16th magnitude';
		result = getDescription('Cl;B;L;lC;st7...16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended + round';
		result = getDescription('E+R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 9th magnitude involved/involving in pretty bright; pretty large; round nebula';
		result = getDescription('*9 inv in pB;pL;R neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; stars large and small';
		result = getDescription('Cl;S;st L and S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very large; bright';
		result = getDescription('vL;B');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'about 16 stars magnitude 9th magnitude and fainter';
		result = getDescription('about 16 stars mags 9...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; rich; pretty much elongated/extended; stars 11th magnitude and fainter th to 14th magnitude';
		result = getDescription('Cl;L;Ri;pmE;st11..14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty small; much compressed; irregular round; gradually brighter middle; stars from 13th to 15th magnitude';
		result = getDescription('Cl;pS;mC;iR;gbM;*13...15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; poor; little/long compressed; stars 13th magnitude and fainter th magnitude and fainter';
		result = getDescription('Cl;pL;P;lC;st13...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; little/long compressed middle; stars 12th magnitude and fainter th to 13th magnitude';
		result = getDescription('Cl;pRi;lCM;st12...13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; poor; little/long compressed; stars from 10th to 13th magnitude';
		result = getDescription('Cl;L;P;lC;*10...13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object most extremely faint; very large; very very much elongated/extended 19 degree';
		result = getDescription('! eeF;vL;vvmE 19 deg');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object planetary; pretty bright = star of 9th magnitude; very small; round; among stars';
		result = getDescription('! Planetary;pB=*9;vS;R;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; star of 12th magnitude attached south following';
		result = getDescription('vF;S;R;*12 att sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably large; round; very gradually little/long brighter middle; partially resolved some stars seen';
		result = getDescription('eF;cL;R;vglbM;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; little/long compressed';
		result = getDescription('Cl;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; gradually much brighter middle; among 80 stars';
		result = getDescription('F;pL;R;gmbM;am 80st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'about 50 stars magnitude 11th magnitude and fainter';
		result = getDescription('about 50 stars mags 11....');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; considerably large; preceding rich; preceding compressed; stars from 10th to 14th magnitude';
		result = getDescription('Cl;cL;pRi;pC;*10..14');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; preceding rich; preceding compressed; double stars taken';
		result = getDescription('Cl;pRi;pC;D* taken');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; extremely/excessively large; very rich; stars large and small';
		result = getDescription('Cl;eL;vRi;st L and S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; little/long rich; preceding compressed; stars 13th magnitude and fainter';
		result = getDescription('Cl;S;lRi;pC;st 13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; little/long rich; irregular figure; stars 12th magnitude and fainter th to 15th magnitude';
		result = getDescription('Cl;S;lRi;iF;st12..15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; elongated/extended; stars 10th magnitude and fainter th to 11th magnitude';
		result = getDescription('Cl;P;E;st10...11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; little/long compressed';
		result = getDescription('Cl;P;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; preceding rich; irregular figure; stars from 11th to 12th magnitude';
		result = getDescription('Cl;pL;pRi;iF;*11..12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; compressed; little/long elongated/extended; stars from 13th to 16th magnitude';
		result = getDescription('Cl;C;lE;st 13...16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/very remarkable object planetary; very bright; very large; little/long elongated/extended star of 9th magnitude much';
		result = getDescription('!! Planetary;vB;vL;lE *9m');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very large; irregular round; little/long compressed middle; stars from 13th to 16th magnitude';
		result = getDescription('vL;iR;lCM;st 13...16');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; 9 large and a few small stars';
		result = getDescription('Cl;9 L and a few S st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; small; round; gradually much brighter middle';
		result = getDescription('cB;S;R;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; among stars';
		result = getDescription('F;S;R;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; much elongated/extended 280; pretty suddenly brighter middle';
		result = getDescription('F;S;mE 280;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually brighter middle';
		result = getDescription('pF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; elongated/extended; gradually brighter middle; star of 6th magnitude - 7 very near';
		result = getDescription('F;E;gbM;*6-7 vnr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; pretty much elongated/extended; little/long brighter middle';
		result = getDescription('cF;pL;pmE;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; stars 9th magnitude and fainter...';
		result = getDescription('Cl;P;st 9...');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; pretty large; poor; little/long compressed; irregular figure; stars from 9th to 13th magnitude';
		result = getDescription('Cl;pL;P;lC;iF;st 9...13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; gradually brighter middle';
		result = getDescription('eF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; diffused';
		result = getDescription('vF;dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; little/long elongated/extended at 45 degree; brighter middle';
		result = getDescription('F;pL;lE at 45 deg;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; pretty suddenly brighter middle';
		result = getDescription('F;pS;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; 3 resolvable (mottled not resolved) diameter of 4';
		result = getDescription('pF;pS;3rd of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; 4th of 4';
		result = getDescription('pF;pS;4th of 4');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small';
		result = getDescription('eF;pS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; elongated/extended south preceding north following; star of 11th magnitude preceding';
		result = getDescription('F;E sp nf;*11 p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; 2 arcminutes little/long; much elongated/extended 70; gradually little/long brighter middle';
		result = getDescription('vF;2\' l;mE 70;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; resolvable (mottled not resolved)';
		result = getDescription('vF;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; faint star of 2th magnitude arcminutes suddenly/south south preceding';
		result = getDescription('F;S;F* 2\' ssp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; suspected';
		result = getDescription('vF;vS;suspected');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; between 2 stars';
		result = getDescription('eF;eS;bet 2 st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; pretty suddenly brighter middle';
		result = getDescription('eF;S;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; little/long brighter middle; star of 13th magnitude north preceding 80 arcseconds';
		result = getDescription('F;vS;R;lbM;*13 np 80\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; little/long elongated/extended 90; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cF;cS;lE 90;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; considerably elongated/extended 30; very suddenly/south much brighter middle Nucleus or to a Nucleus';
		result = getDescription('B;pL;cE 30;vsmbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; star of 11th magnitude - 12 north following';
		result = getDescription('pF;*11-12 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle; star of 11th magnitude north following';
		result = getDescription('F;S;R;bM;*11 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended';
		result = getDescription('vF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended; stellar Nucleus or to a Nucleus';
		result = getDescription('vF;vS;lE;stellar N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; large; very little/long elongated/extended; pretty suddenly much brighter middle; bright stars near';
		result = getDescription('cB;L;vlE;psmbM;B* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; pretty suddenly brighter middle; double star following 30 arcseconds';
		result = getDescription('pF;S;R;psbM;**f30\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; round; brighter middle';
		result = getDescription('cF;cS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; round; suddenly/south brighter middle; stars south following';
		result = getDescription('pF;L;R;sbM;* sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; triangle 2 following stars; = 4045';
		result = getDescription('F;pS;tri 2f*;=4045');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; brighter middle';
		result = getDescription('vF;pS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; bright points involved/involving';
		result = getDescription('eF;vS;B pts inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; gradually brighter middle';
		result = getDescription('F;pS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; pretty gradually brighter middle; north preceding of 2';
		result = getDescription('F;pS;R;pgbM;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round';
		result = getDescription('F;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; very little/long elongated/extended; brighter middle; south following of 2';
		result = getDescription('cF;cS;vlE;bM;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; difficult; preceding of double nebula';
		result = getDescription('F;S;diffic;p of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; difficult; following of double nebula';
		result = getDescription('F;S;diffic;f of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; gradually little/long brighter middle';
		result = getDescription('F;vS;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; round; star of 10th magnitude north 1 arcminutes';
		result = getDescription('F;L;R;*10 n 1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'planetary; pretty bright; small; little/long elongated/extended; star of 10th magnitude - 11 north preceding';
		result = getDescription('Planetary;pB;S;lE;*10-11 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended; little/long brighter middle';
		result = getDescription('vF;vS;lE;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small';
		result = getDescription('eF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; elongated/extended(hook shape); south preceding of 2';
		result = getDescription('vF;E(hook shape);sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'little/long elongated/extended';
		result = getDescription('lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very large; elongated in position angle 90 degrees; brighter middle Nucleus or to a Nucleus';
		result = getDescription('cF;vL;E90;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; much elongated/extended 118; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;pL;mE118;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; pretty much elongated/extended 95; very gradually little/long brighter middle';
		result = getDescription('F;pL;pmE95;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'preceding elongated/extended; little/long brighter middle; star of 13th magnitude preceding 5 arcminutes';
		result = getDescription('pE;lbM;*13 p 5\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; 2 arcminutes - 3arcminutes suddenly/south of 4165';
		result = getDescription('vF;2\'-3\' s of 4165');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; star of 10th magnitude north preceding; 4168 following';
		result = getDescription('eF;*10 np;4168f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; irregular figure; pretty suddenly brighter middle; resolvable (mottled not resolved); stars involved/involving';
		result = getDescription('pB;pL;iF;psbM;r;* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; very little/long brighter middle';
		result = getDescription('vF;pS;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; suddenly/south little/long brighter middle; star of 10th magnitude';
		result = getDescription('eF;vS;R;slbM;*10');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very large; elongated in position angle 45 degrees; star of 7th magnitude following';
		result = getDescription('vF;vL;E45;*7f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; pretty much elongated/extended 135; brighter middle Nucleus or to a Nucleus';
		result = getDescription('pB;pS;pmE135;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; little/long elongated/extended 0; resolvable (mottled not resolved)';
		result = getDescription('pF;S;lE0;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; (very small cluster ? )';
		result = getDescription('vS;(vS Cl?)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; round; brighter middle; near small stars';
		result = getDescription('cF;R;bM;near S*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; elongated/extended; very gradually brighter middle';
		result = getDescription('vF;pL;E;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty much elongated/extended; very gradually brighter middle';
		result = getDescription('pF;pmE;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; little/long elongated/extended; little/long brighter middle';
		result = getDescription('cF;lE;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;eS;R;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very much elongated/extended';
		result = getDescription('F;vmE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; little/long elongated/extended; star of 14th magnitude north preceding';
		result = getDescription('pF;pS;lE;*14 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; elongated/extended at 170 degree';
		result = getDescription('cF;pL;E at 170 deg');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; elongated/extended; suddenly/south brighter middle star of 11th magnitude';
		result = getDescription('B;pS;E;sbM*11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; very much elongated/extended 17; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('vB;vL;vmE17;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; little/long elongated/extended; gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;pS;lE;gbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; round; very suddenly/south brighter middle supernova';
		result = getDescription('pF;R;vsbMSN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; round; gradually brighter middle';
		result = getDescription('pB;L;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; pretty much elongated/extended; brighter middle; preceding of 2';
		result = getDescription('pB;pL;pmE;bM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; resolvable (mottled not resolved); = 4241 ?';
		result = getDescription('pF;pL;R;r;=4241?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; star of 12th magnitude south preceding 1/2 arcminutes';
		result = getDescription('pB;S;*12 sp 1/2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; extremely/excessively small; pretty bright stars close preceding';
		result = getDescription('pB;eS;pB* close p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; elongated/extended';
		result = getDescription('vF;pL;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; very gradually brighter middle; star of 7th magnitude small';
		result = getDescription('vF;L;vgbM;*7S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; elongated/extended';
		result = getDescription('cF;pL;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle; 6 arcminutes north of 4246';
		result = getDescription('F;S;R;bM;6\'n of 4246');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint';
		result = getDescription('F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; irregular resolvable (mottled not resolved); cometary; faint star of 1th magnitude arcminutes north following';
		result = getDescription('F;irr;cometary;F*1\' nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; elongated/extended';
		result = getDescription('F;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; stellar Nucleus or to a Nucleus';
		result = getDescription('vF;S;stell N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; pretty much brighter middle';
		result = getDescription('S;pmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round';
		result = getDescription('F;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; star of 18th magnitude suddenly/south 2 arcminutes';
		result = getDescription('vF;pS;R;*18 s 2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round';
		result = getDescription('F;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; elongated/extended; pretty suddenly brighter middle';
		result = getDescription('pB;E;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; gradually brighter middle';
		result = getDescription('pB;pS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; gradually brighter middle';
		result = getDescription('F;pS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint';
		result = getDescription('pF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; round; very suddenly/south much brighter middle';
		result = getDescription('pB;vS;R;vsmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; 2 north diameter of 6 nebula';
		result = getDescription('pF;S;2nd of 6 neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; star of 9th magnitude following 1.7 arcseconds; north 85 arcseconds';
		result = getDescription('pF;S;R;*9 f 1.7\'\';n85\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; elongated/extended';
		result = getDescription('pB;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; elongated/extended; gradually brighter middle';
		result = getDescription('pB;L;E;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large';
		result = getDescription('pF;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small';
		result = getDescription('vF;eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; very small; round';
		result = getDescription('eeF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; very large; round; pretty gradually brighter middle';
		result = getDescription('B;vL;R;pgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint';
		result = getDescription('pF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; round';
		result = getDescription('eeF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint';
		result = getDescription('pF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; star of 8.5 magnitude 12 arcseconds following';
		result = getDescription('vF;S;*8.5 12\'\'f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; very gradually little/long brighter middle; star of 9th magnitude north preceding 72 arcseconds';
		result = getDescription('F;S;R;vglbM;*9 np 72\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; much elongated/extended 135; binuclear; preceding of 2';
		result = getDescription('F;L;mE135;biN;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small';
		result = getDescription('eF;eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; little/long elongated/extended; very gradually brighter middle; following of 2';
		result = getDescription('F;L;lE;vgbM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; little/long elongated/extended; very gradually brighter middle';
		result = getDescription('F;lE;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; very suddenly/south brighter middle stars; binuclear';
		result = getDescription('vB;vL;vsbM*;biN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round';
		result = getDescription('vF;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; 4305 south preceding';
		result = getDescription('vF;pL;R;4305 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; much elongated/extended; 3 knots';
		result = getDescription('pF;L;mE;3 knots');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; star of 11th magnitude following 12 arcseconds';
		result = getDescription('F;S;*11 f 12\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; elongated/extended; 10 arcminutes north following 4292';
		result = getDescription('F;E;10\' nf 4292');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; elongated in position angle 135 degrees';
		result = getDescription('vF;L;E135');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; much elongated/extended; 2 knots';
		result = getDescription('vF;S;mE;2 knots');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; star of 8th magnitude Nucleus or to a Nucleus 5 arcminutes';
		result = getDescription('eF;*8 N 5\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; south preceding of 2';
		result = getDescription('F;vS;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; round or little/long elongated/extended; brighter middle';
		result = getDescription('pB;R or lE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular round; north following of 2';
		result = getDescription('vF;vS;iR;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle; 1 of 3';
		result = getDescription('vF;S;R;bM;1 of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; much elongated/extended';
		result = getDescription('vF;L;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; brighter middle; 2 of 3';
		result = getDescription('F;pS;R;bM;2 of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; stars very near';
		result = getDescription('pF;S;R;* vnr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; round; brighter middle; 3 of 3';
		result = getDescription('B;pL;R;bM;3 of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; elongated/extended; double ?';
		result = getDescription('pF;S;E;D?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; little/long elongated/extended';
		result = getDescription('eF;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; round; brighter middle';
		result = getDescription('F;cS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round';
		result = getDescription('eF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; elongated in position angle 70 degrees; very little/long brighter middle';
		result = getDescription('F;pL;E70;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; irregular round; brighter middle';
		result = getDescription('F;pL;iR;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty large; very difficult; = 4351 ?';
		result = getDescription('eeF;pL;v diffic;=4351?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably small; round';
		result = getDescription('pF;cS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; stars ?';
		result = getDescription('pB;*?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; little/long elongated/extended';
		result = getDescription('cF;cS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; faint stars involved/involving; star of 9.5 magnitude north preceding';
		result = getDescription('F;F * inv;*9.5 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; very little/long elongated/extended; gradually little/long; suddenly/south much brighter middle';
		result = getDescription('cB;pL;vlE;gl;smbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; little/long elongated/extended; brighter middle';
		result = getDescription('pF;pS;lE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; round; gradually brighter middle';
		result = getDescription('B;pS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; round; pretty suddenly brighter middle';
		result = getDescription('vB;pL;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small';
		result = getDescription('F;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; star of 8th magnitude; 9 south following 3 arcminutes';
		result = getDescription('B;S;*8;9 sf 3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; little/long brighter middle';
		result = getDescription('vF;pL;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; almost stellar; very suddenly/south very bright Nucleus or to a Nucleus';
		result = getDescription('vF;vS;alm stell;vsvBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; round; star of 13th magnitude north preceding 90 arcseconds; north preceding of 2';
		result = getDescription('pF;vS;R;*13 np 90\'\';np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; elongated/extended; south following of 2';
		result = getDescription('vF;E;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round';
		result = getDescription('vF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty small; much elongated/extended at 130 degree';
		result = getDescription('cF;pS;mE at 130 deg');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; 4390 preceding 14 arcseconds; 14 arcminutes suddenly/south';
		result = getDescription('F;pS;4390 p 14\'\';14\' s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; much elongated/extended 90';
		result = getDescription('F;L;mE90');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; elongated/extended';
		result = getDescription('vF;vS;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; round; gradually brighter middle Nucleus or to a Nucleus';
		result = getDescription('vB;L;R;gbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; elongated/extended';
		result = getDescription('vF;vS;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'following of 2 nebula; = 4413 ?';
		result = getDescription('f of 2 neb;=4413?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very large; round; gradually brighter middle';
		result = getDescription('pF;vL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large';
		result = getDescription('F;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; gradually brighter middle; 2 stars north; north preceding';
		result = getDescription('cF;S;gbM;2* n;np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;pL;R;gbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small';
		result = getDescription('eF;pS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; round; star of 7th magnitude south preceding 5 arcminutes';
		result = getDescription('vF;L;R;*7 sp 5\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; elongated/extended; little/long brightest towards the preceding side';
		result = getDescription('F;pL;E;lbp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint or very faint; small or considerably large; round or much elongated/extended; stars near';
		result = getDescription('F or vF;S or cL;R or mE;* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; resolvable (mottled not resolved); = 4420 ?';
		result = getDescription('vF;pS;r;=4420?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; little/long elongated/extended; resolvable (mottled not resolved); = 4409 ?';
		result = getDescription('F;pL;lE;r;=4409?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; pretty suddenly brighter middle; 2 small stars near';
		result = getDescription('F;vS;R;psbM;2S* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; elongated/extended';
		result = getDescription('vF;vS;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; irregular round; brighter middle';
		result = getDescription('F;pL;iR;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; brighter middle';
		result = getDescription('pF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; considerably elongated/extended; pretty suddenly brighter middle; star of 10th magnitude north following';
		result = getDescription('B;L;cE;psbM;*10 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; large; round; gradually brighter middle';
		result = getDescription('cF;L;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; elongated/extended';
		result = getDescription('vF;pL;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; considerably elongated/extended; gradually brighter middle';
		result = getDescription('vF;vS;cE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2 stars in extremely/excessively faint nebula';
		result = getDescription('2* in eF neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; little/long elongated/extended';
		result = getDescription('pF;pL;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small';
		result = getDescription('pF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; considerably large; round; north preceding of 2';
		result = getDescription('vB;cL;R;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; gradually brighter middle';
		result = getDescription('cF;S;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; considerably large; very little/long elongated/extended; resolvable (mottled not resolved); south following of 2';
		result = getDescription('B;cL;vlE;r;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; round; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('B;pS;R;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; round; suddenly/south much brighter middle';
		result = getDescription('vB;pL;R;smbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small';
		result = getDescription('F;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; much elongated/extended';
		result = getDescription('vF;pL;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; brighter middle; star of 13th magnitude suddenly/south';
		result = getDescription('pB;pS;R;bM;*13 s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; very much elongated/extended';
		result = getDescription('pB;S;vmE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;pS;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; round; gradually brighter middle; easily resolvable; very suddenly/south bright Nucleus or to a Nucleus; broad weak bar';
		result = getDescription('F;L;R;gbM;er;vsBN;broad weak bar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually brighter middle';
		result = getDescription('pF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty small; round; suddenly/south much brighter middle Nucleus or to a Nucleus; very bright Nucleus or to a Nucleus';
		result = getDescription('cB;pS;R;smbMN;vBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; brighter middle; preceding of 2';
		result = getDescription('pB;S;R;bM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; brighter middle; following of 2';
		result = getDescription('pF;S;R;bM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '17.5 arcseconds - pretty faint; stellar; looks like double stars';
		result = getDescription('17.5\'\'-pF;stellar;looks like D*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; pretty gradually brighter middle (= 4665)';
		result = getDescription('F;vS;R;pgbM(=4665)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very diffused';
		result = getDescription('vF;v dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; irregular round';
		result = getDescription('vF;pS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended';
		result = getDescription('vF;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; much elongated/extended; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pF;pL;mE;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; irregular round; brighter middle';
		result = getDescription('F;pL;iR;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very large';
		result = getDescription('F;vL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; round; much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vB;L;R;mbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle; 1 of 3';
		result = getDescription('F;S;R;bM;1 of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large';
		result = getDescription('eF;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; pretty suddenly brighter middle; 2 of 3';
		result = getDescription('pB;S;R;psbM;2 of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; elongated/extended; brightest towards the south side';
		result = getDescription('pF;pS;E;bs');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; brighter middle';
		result = getDescription('pB;pS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; round; much brighter middle; 3 of 3';
		result = getDescription('vB;vL;R;mbM;3 of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'inner regions completely Black--MCG';
		result = getDescription('Inner Regions Completely Black--MCG');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended';
		result = getDescription('vF;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; round';
		result = getDescription('F;L;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; very gradually little/long brighter middle; 2 stars near';
		result = getDescription('pF;pL;vglbM;2* nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very large; easily resolvable';
		result = getDescription('F;vL;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular round';
		result = getDescription('vF;vS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint or pretty faint';
		result = getDescription('vF or pF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably large; binuclear or double nebula';
		result = getDescription('F;cL;biN or Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably large; resolvable (mottled not resolved); following of 2; = 4496 ?';
		result = getDescription('vF;cL;r;f of 2;=4496?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; gradually brighter middle';
		result = getDescription('pB;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; irregular elongated/extended; gradually very little/long brighter middle; easily resolvable';
		result = getDescription('pB;cL;iE;gvlbM;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; round; suddenly/south brighter middle star of 13th magnitude';
		result = getDescription('vS;R;sbM *13');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint narrow bar';
		result = getDescription('vF narrow bar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; difficult';
		result = getDescription('vF;pS;R;diff');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; extremely/excessively elongated/extended 75; star of 10th magnitude north following; = 4517';
		result = getDescription('F;eE75;*10 nf;=4517');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; very large; very much elongated/extended 89; pretty bright stars in in contact';
		result = getDescription('cB;vL;vmE89;pB*in cont');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle';
		result = getDescription('F;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;pL;R;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; little/long elongated/extended; very little/long brighter middle';
		result = getDescription('eF;pL;lE;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably small; elongated/extended (wisps) 130 degree; brighter middle';
		result = getDescription('cS;E (wisps) 130 deg;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; 2 very small stars involved/involving';
		result = getDescription('vF;S;2vS* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; very large; much elongated/extended 120; pretty suddenly much brighter middle';
		result = getDescription('vB;vL;mE120;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; round; gradually brighter middle';
		result = getDescription('cB;pL;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; pretty much elongated/extended 69; much brighter middle; very suddenly/south extremely/excessively bright Nucleus or to a Nucleus or stars';
		result = getDescription('pB;L;pmE69;mbM;vseBN or *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably small; round; brighter middle; star of 9th magnitude following 30 arcseconds';
		result = getDescription('pF;cS;R;bM;*9 f 30sec');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; round; very gradually brighter middle';
		result = getDescription('F;pL;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; pretty much elongated/extended; very gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;pL;pmE;vgbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very large; resolvable (mottled not resolved); very suddenly/south extremely/excessively bright Nucleus or to a Nucleus or stars';
		result = getDescription('pF;vL;r;vseBN or *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; 4536 south following';
		result = getDescription('F;4536 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; very large; much elongated/extended 110; suddenly/south brighter middle; easily resolvable';
		result = getDescription('B;vL;mE110;sbM;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; nearly round';
		result = getDescription('eF;vS;nearly R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; gradually brighter middle';
		result = getDescription('F;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably small; round; brighter middle';
		result = getDescription('pF;cS;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; considerably large; pretty much elongated/extended 78; very suddenly/south much brighter middle Nucleus or to a Nucleus';
		result = getDescription('vB;cL;pmE78;vsmbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; very little/long elongated/extended; south preceding of 2';
		result = getDescription('pB;S;vlE;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; between 2 stars';
		result = getDescription('vF;S;R;bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; brighter middle; north following of 2';
		result = getDescription('pB;S;R;bM;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; gradually much brighter middle';
		result = getDescription('pB;pS;R;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; little/long elongated/extended; pretty suddenly brighter middle';
		result = getDescription('pB;S;lE;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; north preceding of double nebula';
		result = getDescription('vF;L;np of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; difficult';
		result = getDescription('pF;pS;diff');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; south following of double nebula';
		result = getDescription('vF;L;sf of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very much elongated/extended; 13 magnitude stars south following; 2 stars 12th magnitude and fainter magnitude near';
		result = getDescription('vmE;13 mag * sf;2 st 12 mag nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty large; brighter middle Nucleus or to a Nucleus';
		result = getDescription('pL;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty small; much elongated/extended 0; suddenly/south brighter middle';
		result = getDescription('cB;pS;mE0;sbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; suddenly/south brighter middle Nucleus or to a Nucleus; stars north preceding';
		result = getDescription('pF;pS;R;sbMN;* np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; star of 7th magnitude south following';
		result = getDescription('F;*7 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; irregular round; very much brighter middle';
		result = getDescription('B;L;iR;vmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; very gradually brighter middle; very suddenly/south bright Nucleus or to a Nucleus';
		result = getDescription('pB;L;vgbM;vsBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; brighter middle; stellar Nucleus or to a Nucleus';
		result = getDescription('F;S;bM;stell N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 12th magnitude in faint nebula';
		result = getDescription('*12 in F neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; elongated/extended; pretty suddenly brighter middle; suddenly/south bright Nucleus or to a Nucleus';
		result = getDescription('pB;L;E;psbM;sBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; much brighter middle';
		result = getDescription('F;pS;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small';
		result = getDescription('vF;eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; = NGC 4543';
		result = getDescription('vF;vS;=NGC 4543');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; compressed small';
		result = getDescription('vF;CS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; elongated in position angle 90 degrees; very gradually brighter middle; bright middle no bright Nucleus or to a Nucleus';
		result = getDescription('F;L;E90;vgbM;BM no BN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; elongated/extended; suddenly/south brighter middle Nucleus or to a Nucleus = stars; very bright Nucleus or to a Nucleus in smooth bar';
		result = getDescription('pB;cL;E;sbMN=*;vBN in smooth bar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; round; gradually much brighter middle; resolvable (mottled not resolved); 3 stars following';
		result = getDescription('B;pS;R;gmbM;r;3 * f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'remarkable object very bright; very large; extremely/excessively elongated/extended 92; very suddenly/south much brighter middle Nucleus or to a Nucleus';
		result = getDescription('!vB;vL;eE92;vsmbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very large; brighter middle';
		result = getDescription('F;vL;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; large; round; very little/long brighter middle';
		result = getDescription('eF;L;R;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; 2 stars 8 following';
		result = getDescription('F;S;R;2 * 8 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; elongated/extended; very gradually little/long brighter middle';
		result = getDescription('F;L;E;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'no description';
		result = getDescription('No description');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; elongated/extended; 2 or 3 very small stars involved/involving';
		result = getDescription('vF;pS;E;2 or 3 vS * inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; much elongated/extended; 3 arcminutes or 4arcminutes following NGC 4606';
		result = getDescription('F;mE;3\' or 4\' f NGC 4606');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; pretty suddenly brighter middle; resolvable (mottled not resolved); stars north preceding 1 arcminutes';
		result = getDescription('pB;pL;R;psbM;r;* np 1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; pretty suddenly much brighter middle';
		result = getDescription('pB;S;R;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; very gradually brighter middle';
		result = getDescription('vF;S;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; little/long elongated/extended; very suddenly/south very much brighter middle; 2 stars preceding';
		result = getDescription('B;pL;lE;vsvmbM;2 * p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; elongated/extended; pretty suddenly little/long brighter middle';
		result = getDescription('cF;pL;E;pslbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; little/long elongated/extended; gradually little/long brighter middle';
		result = getDescription('vF;cS;lE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; elongated/extended; gradually brighter middle';
		result = getDescription('cF;S;E;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; elongated/extended; little/long brighter middle; binary?';
		result = getDescription('pB;pL;E;lbM;biN?');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; little/long brighter middle';
		result = getDescription('cF;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; elongated in position angle 45 degrees; bright middle no defined bright Nucleus or to a Nucleus';
		result = getDescription('pB;L;E45;BM no def BN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; irregular round; very gradually very much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('B;L;iR;vgvmbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; round; gradually brighter middle; very bright center';
		result = getDescription('F;R;gbM;vB cent');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; pretty suddenly brighter middle';
		result = getDescription('B;S;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; small; like a star of 10th magnitude; double nebula with NGC 4638';
		result = getDescription('cB;S;like a *10;Dneb w NGC 4638');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; elongated/extended; round; star of 12th magnitude south following 1 arcminutes';
		result = getDescription('pB;S;E;R;*12 sf 1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; little/long elongated/extended; stars near preceding';
		result = getDescription('eF;pL;lE;* nr p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round; faint stars near following';
		result = getDescription('eF;pL;R;F* nr f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; elongated/extended';
		result = getDescription('vF;cS;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty small; little/long elongated/extended; much brighter middle';
		result = getDescription('cB;pS;lE;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; little/long elongated/extended 115; north preceding of double nebula';
		result = getDescription('pF;pL;lE115;np of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; round; following of double nebula';
		result = getDescription('vB;pL;R;f of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large';
		result = getDescription('vF;pL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very large; pretty much elongated/extended (double ? ); 3 stars near';
		result = getDescription('F;vL;pmE(D?);3 * nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; small; very suddenly/south very much brighter middle Nucleus or to a Nucleus';
		result = getDescription('vB;S;vsvmbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; elongated/extended; star of 16th magnitude attached; stars 9 preceding';
		result = getDescription('vF;L;E;*16 att;*9 p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; star of 13th magnitude - 14 following';
		result = getDescription('vF;S;*13-14 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; elongated/extended; = 4636';
		result = getDescription('B;E;=4636');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; 2 small stars in middle; small stars preceding; = 4665';
		result = getDescription('pB;2 S * in M;S* p;=4665');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; irregular round; much brighter middle; star of 10th magnitude south preceding';
		result = getDescription('B;pL;iR;mbM;*10 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; very large; much elongated/extended 45; pretty suddenly brighter middle';
		result = getDescription('B;vL;mE45;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular figure';
		result = getDescription('vF;S;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; pretty suddenly much brighter middle';
		result = getDescription('pF;S;R;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; round; gradually little/long brighter middle';
		result = getDescription('vF;cS;R;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; 1 or 2 stars involved/involving';
		result = getDescription('eF;S;1 or 2 * inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; large; elongated in position angle 45 degrees; gradually very little/long brighter middle';
		result = getDescription('cF;L;E45;gvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; pretty much elongated/extended 25';
		result = getDescription('B;pL;pmE25');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; star of 9th magnitude - 10 preceding 10 suddenly/south';
		result = getDescription('eF;pL;*9-10 p 10s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; elongated in position angle 90 degrees; much brighter middle';
		result = getDescription('pB;pL;E90;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; very little/long elongated/extended; very bright Nucleus or to a Nucleus';
		result = getDescription('pF;S;vlE;vBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; irregular round; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cB;pL;iR;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; large; little/long elongated/extended 45; suddenly/south much brighter middle Nucleus or to a Nucleus';
		result = getDescription('vB;L;lE45;smbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; round; very much brighter middle resolvable (mottled not resolved) Nucleus or to a Nucleus; resolvable (mottled not resolved)';
		result = getDescription('vB;R;vmbMrN;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; much elongated/extended 40; very little/long brighter middle; bright stars preceding';
		result = getDescription('F;L;mE40;vlbM;B* p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; very suddenly/south bright Nucleus or to a Nucleus; complex bright center';
		result = getDescription('F;S;vsBN;complex B cent.');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably small; pretty much elongated/extended';
		result = getDescription('eF;cS;pmE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended; spiral pattern ill-defined';
		result = getDescription('F;S;lE;spiral pattern ill-defined');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; little/long elongated/extended';
		result = getDescription('cF;pL;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; (nebulous??); star of 2th magnitude arcseconds following';
		result = getDescription('eF;eS;R;(neb?);* 2\'\' f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; very little/long elongated/extended; gradually little/long brighter middle';
		result = getDescription('pB;L;vlE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; between 2 stars';
		result = getDescription('eF;vS;bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'south following NGC 4716 A and fainter';
		result = getDescription('sf NGC 4716A & fainter');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; brighter middle';
		result = getDescription('eF;S;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; elongated/extended';
		result = getDescription('vF;pL;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; little/long elongated/extended; resolvable (mottled not resolved); star of 12th magnitude preceding';
		result = getDescription('cF;pL;lE;r;*12 p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; little/long elongated/extended; pretty gradually little/long brighter middle';
		result = getDescription('F;pL;lE;pglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; very brighter middle Nucleus or to a Nucleus = star of 11th magnitude; star of 10th magnitude south following';
		result = getDescription('pB;vS;vbMN=*11;*10 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; much elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('pB;mE;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; round; pretty suddenly brighter middle; preceding of 2';
		result = getDescription('B;pL;R;psbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; large; very little/long elongated/extended; very gradually little/long brighter middle';
		result = getDescription('cB;L;vlE;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very much elongated/extended 31; 3 bright stars suddenly/south; following of 2';
		result = getDescription('pB;vmE31;3 B * s;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty large; double; star of 10th magnitude south preceding 2 arcminutes';
		result = getDescription('pL;double;*10 sp 2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; round';
		result = getDescription('pB;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; south following double nebula 4759';
		result = getDescription('eF;eS;sf Dneb 4759');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; very little/long brighter middle; preceding of double nebula';
		result = getDescription('F;S;R;vlbM;p of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; very little/long brighter middle; following of double nebula';
		result = getDescription('vF;S;R;vlbM;f of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; 1 arcminutes following double nebula 4759';
		result = getDescription('eF;eS;1\' f Dneb 4759');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; round; gradually brighter middle';
		result = getDescription('F;cS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; preceding 4770';
		result = getDescription('vF;vS;p 4770');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; preceding 4770';
		result = getDescription('vF;vS;p 4770');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; much elongated/extended; star of 9th magnitude preceding 90 degree';
		result = getDescription('F;pL;mE;*9 p 90deg');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; round; much brighter middle';
		result = getDescription('pF;pS;R;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably large; round; very gradually little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('F;cL;R;vglbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; round; resolvable (mottled not resolved)';
		result = getDescription('vF;pL;R;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; following 4773 and 4777';
		result = getDescription('vF;f 4773 and 4777');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; very large; much elongated/extended';
		result = getDescription('cB;vL;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;pS;mbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small';
		result = getDescription('eF;eS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; little/long elongated/extended; very little/long brighter middle';
		result = getDescription('eF;vS;lE;vlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; double nebula with 4810; knotty in core';
		result = getDescription('F;Dneb w 4810;knotty core');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; irregular round';
		result = getDescription('pF;pS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; double nebula with 4809; bright knotty in core';
		result = getDescription('F;Dneb w 4809;B knotty core');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;pL;R;bM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; almost stellar; close following 4795';
		result = getDescription('eF;eS;alm stell;close f 4795');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; elongated/extended';
		result = getDescription('F;pS;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; very small stars attached';
		result = getDescription('cF;S;vS* att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; little/long brighter middle';
		result = getDescription('eF;eS;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; elongated in position angle 135 degrees; very suddenly/south bright Nucleus or to a Nucleus';
		result = getDescription('pB;cL;E135;vsBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle';
		result = getDescription('F;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; pretty much elongated/extended 0; gradually brighter middle';
		result = getDescription('pB;L;pmE0;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; south preceding of 4825';
		result = getDescription('vS;sp of 4825');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; stars involved/involving';
		result = getDescription('F;* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; irregular figure; brighter middle';
		result = getDescription('pB;iF;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; south preceding of 4825';
		result = getDescription('vS;sp of 4825');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very small; south following 4825';
		result = getDescription('vS;sf 4825');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; stars involved/involving; star of 8th magnitude 5 arcminutes south following';
		result = getDescription('F;L;* inv;*8 5\' sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; large; diffused';
		result = getDescription('vF;L;dif');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; 3 small stars south preceding';
		result = getDescription('vF;pS;R;3 S * sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; elongated/extended; extremely/excessively round; stars south following 30 arcseconds';
		result = getDescription('cF;E;eR;* sf 30\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; pretty much elongated/extended; very gradually brighter middle; stars north following';
		result = getDescription('pF;pL;pmE;vgbM;* nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very large; partially resolved some stars seen';
		result = getDescription('eF;vL;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small';
		result = getDescription('F;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small nebulous star; star of 9th magnitude preceding 40 arcseconds on parallel';
		result = getDescription('F;S neb*;*9 p 40sec on parallel');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; stars involved/involving';
		result = getDescription('F;S;st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; round; pretty suddenly much brighter middle; star of 13th magnitude north preceding';
		result = getDescription('B;R;psmbM;*13 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round';
		result = getDescription('eF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; much elongated/extended 90; suddenly/south brighter middle Nucleus or to a Nucleus; small stars involved/involving';
		result = getDescription('B;pL;mE90;sbMN;S* inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; much elongated/extended 45; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('eF;S;mE45;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; round; very gradually little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cF;pL;R;vglbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; preceding of 2';
		result = getDescription('vF;vS;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; much brighter middle';
		result = getDescription('pB;pL;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; following of 2';
		result = getDescription('vF;vS;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated/extended';
		result = getDescription('vF;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably small; elongated/extended; pretty suddenly brighter middle; double star north preceding';
		result = getDescription('pF;cS;E;psbM;** np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; irregular round; brighter middle';
		result = getDescription('cF;S;iR;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; 4902 north following';
		result = getDescription('vF;4902 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably elongated/extended; star of 10th magnitude attached position 135';
		result = getDescription('cB;cE;*10 att pos135');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint nebulous star';
		result = getDescription('F neb*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint';
		result = getDescription('F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; extremely/excessively large';
		result = getDescription('pF;eL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; irregular round; stars near';
		result = getDescription('pB;pL;iR;st nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; brighter middle; bright narrow bar';
		result = getDescription('pB;pS;R;bM;B narrow bar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; brighter middle';
		result = getDescription('pB;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; brighter middle Nucleus or to a Nucleus; 4915 south preceding 4 arcminutes';
		result = getDescription('eF;eS;R;bMN;4915 sp 4\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small';
		result = getDescription('cF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; large; very little/long elongated/extended 45';
		result = getDescription('cF;L;vlE45');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; very little/long elongated/extended; gradually little/long brighter middle';
		result = getDescription('F;pS;vlE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; irregular round';
		result = getDescription('pB;pL;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; round; gradually much brighter middle';
		result = getDescription('pB;L;R;gmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; large; elongated/extended; gradually brighter middle bright Nucleus or to a Nucleus; resolvable (mottled not resolved)';
		result = getDescription('pF;L;E;gbMBN;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty small; little/long elongated/extended; 4958 following';
		result = getDescription('eeF;pS;lE;4958 f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; little/long elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('F;pL;lE;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty small; elongated/extended; brighter middle bright Nucleus or to a Nucleus';
		result = getDescription('vB;pS;E;bMBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; very difficult';
		result = getDescription('eeF;S;R;v diffic');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; pretty suddenly brighter middle';
		result = getDescription('vF;vS;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; round; star of 10th magnitude south following 1 arcminutes';
		result = getDescription('B;pL;R;*10 sf 1\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; round; pretty suddenly much brighter middle';
		result = getDescription('B;pL;R;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended; 2 small stars suddenly/south';
		result = getDescription('vF;S;lE;2 S * s');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; star of 4th magnitude south following';
		result = getDescription('pB;S;R;*4 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; brighter middle';
		result = getDescription('pB;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; round; little/long brighter middle; easily resolvable';
		result = getDescription('cF;pL;R;lbM;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; very gradually pretty much brighter middle; star of 8th magnitude north preceding';
		result = getDescription('pB;pL;R;vgpmbM;*8 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 6.5 magnitude 2 arcminutes preceding';
		result = getDescription('*6.5 2\' p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint stars close preceding';
		result = getDescription('F* close p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; brighter middle; star of 10th magnitude north preceding 5 arcminutes';
		result = getDescription('vF;R;bM;*10 np 5\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably large; irregular round; little/long brighter middle';
		result = getDescription('F;cL;iR;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'inner regions completely Black--MCG';
		result = getDescription('Inner Regions Completely Black--MCG');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; easily resolvable';
		result = getDescription('eF;vS;R;er');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably large; very little/long elongated/extended; little/long brighter middle';
		result = getDescription('cF;cL;vlE;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; brighter middle';
		result = getDescription('vF;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; small; round; much brighter middle pretty bright Nucleus or to a Nucleus';
		result = getDescription('cB;S;R;mbMpBN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; pretty gradually brighter middle';
		result = getDescription('vF;S;R;pgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; elongated in position angle 30 degrees; gradually brighter middle; following 5018';
		result = getDescription('vF;pL;E30;gbM;f5018');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; star of 11th magnitude; 12';
		result = getDescription('vF;S;*11;12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; stellar';
		result = getDescription('vF;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; gradually brighter middle; 1 stars of 2';
		result = getDescription('eF;vS;R;gbM;1st of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle Nucleus or to a Nucleus';
		result = getDescription('F;S;R;bMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; elongated in position angle 45 degrees; 2 north diameter of 2';
		result = getDescription('eF;eS;E45;2nd of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty small; very little/long elongated/extended; brighter middle';
		result = getDescription('cF;pS;vlE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; elongated in position angle 90 degrees; stellar';
		result = getDescription('pB;E90;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; round; brighter middle';
		result = getDescription('pB;pL;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; stellar';
		result = getDescription('F;vS;stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; stellar nucleus';
		result = getDescription('F;vS;R;stell nucl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small';
		result = getDescription('cF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very very faint';
		result = getDescription('vvF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; irregular round';
		result = getDescription('F;pS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended';
		result = getDescription('eF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended';
		result = getDescription('F;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; (= 5066)';
		result = getDescription('eF;vS;(=5066)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; stellar';
		result = getDescription('eF;eS;stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; irregular round; brighter middle';
		result = getDescription('F;L;iR;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; extremely/excessively small; stellar';
		result = getDescription('vF;eS;stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; extremely/excessively small; very faint stars near; 5072 near';
		result = getDescription('eeF;eS;vf * nr;5072 nr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; star of 14th magnitude north following';
		result = getDescription('F;S;*14 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; pretty much elongated/extended 135';
		result = getDescription('vF;pL;pmE135');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; star of 7th magnitude north following';
		result = getDescription('F;S;*7 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; round; 1 stars of 3';
		result = getDescription('vF;cS;R;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; very little/long elongated/extended; suddenly/south brighter middle; 2 north diameter of 3';
		result = getDescription('pB;S;vlE;sbM;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty small; very little/long elongated/extended; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('cF;pS;vlE;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably small; very little/long elongated/extended 90';
		result = getDescription('cB;cS;vlE90');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; resolvable (mottled not resolved); elongated/extended; brighter middle';
		result = getDescription('pB;pS;r;E;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; irregular figure';
		result = getDescription('cF;vS;iF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; irregular round; star of 11th magnitude south preceding';
		result = getDescription('vF;iR;*11 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very small; round; gradually brighter middle';
		result = getDescription('cF;vS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round; stellar';
		result = getDescription('eF;eS;R;stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long brighter middle';
		result = getDescription('vF;vS;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively small; round';
		result = getDescription('eF;eS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended';
		result = getDescription('F;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; little/long elongated/extended';
		result = getDescription('eF;pS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; round; line with 2 bright stars';
		result = getDescription('eF;pS;R;line w 2B*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; considerably small; irregular round; gradually little/long brighter middle';
		result = getDescription('cF;cS;iR;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; round; stars north following; double stars following 24 arcseconds';
		result = getDescription('eeF;S;R;* nf;D*f24\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually brighter middle';
		result = getDescription('vF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; little/long elongated/extended';
		result = getDescription('pB;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; round; gradually brighter middle';
		result = getDescription('pF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; resolvable (mottled not resolved)';
		result = getDescription('vF;S;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; round; gradually much brighter middle; double star following';
		result = getDescription('pB;vS;R;gmbM;**f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; gradually brighter middle';
		result = getDescription('vF;vS;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; resolvable';
		result = getDescription('vF;resolvable');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular resolvable (mottled not resolved) round; brighter middle';
		result = getDescription('vF;vS;irrR;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; pretty suddenly brighter middle';
		result = getDescription('eF;vS;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; pretty large; very difficult';
		result = getDescription('eeF;pL;v diff');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; little/long elongated/extended; very gradually brighter middle';
		result = getDescription('F;pS;lE;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; very little/long elongated/extended; very suddenly/south much brighter middle star of 12th magnitude';
		result = getDescription('pB;pL;vlE;vsmbM*12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar';
		result = getDescription('vF;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended';
		result = getDescription('eF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; (? very faint double stars with faint stars close)';
		result = getDescription('pF;(?vF D* w F* close)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; star of 13th magnitude south following';
		result = getDescription('F;vS;R;*13 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; several very faint stars close';
		result = getDescription('vF;sev vF * close');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; little/long elongated/extended; faint stars near north following';
		result = getDescription('vF;pL;lE;F* nr nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large';
		result = getDescription('pB;L');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; poor with 5175';
		result = getDescription('vF;pL;P w 5175');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; poor with 5174';
		result = getDescription('vF;pL;P w 5174');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'no diameter extremely/excessively scattered resolvable (mottled not resolved)';
		result = getDescription('No descr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'no diameter extremely/excessively scattered resolvable (mottled not resolved)';
		result = getDescription('No descr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; stars in centre';
		result = getDescription('vF;*in centre');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; large; much elongated/extended 129; pretty gradually brighter middle';
		result = getDescription('cF;L;mE129;pgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round';
		result = getDescription('vF;S;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; considerably small; little/long elongated/extended; gradually brighter middle; preceding of 2';
		result = getDescription('F;cS;lE;gbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; irregular round; brighter middle; following of 2';
		result = getDescription('pF;pL;iR;bM;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; star of 9th magnitude following 57 arcseconds';
		result = getDescription('eF;*9f 57\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 12th magnitude in faint nebula';
		result = getDescription('*12 in F neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; round; gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('vF;cS;R;gbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; considerably elongated/extended; star of 11th magnitude attached north preceding';
		result = getDescription('F;S;cE;*11 att np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; pretty suddenly brighter middle; preceding of 2';
		result = getDescription('F;vS;R;psbM;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; stellar; following of 2';
		result = getDescription('F;vS;R;stellar;f of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; pretty suddenly brighter middle Nucleus or to a Nucleus';
		result = getDescription('F;S;R;psbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; pretty suddenly much brighter middle';
		result = getDescription('pB;S;R;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint';
		result = getDescription('eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended';
		result = getDescription('vF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long elongated/extended; 1 stars of 3';
		result = getDescription('vF;S;vlE;1st of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; brighter middle; 2 north diameter of 3';
		result = getDescription('cF;S;R;bM;2nd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; star of 9th magnitude north following';
		result = getDescription('vF;S;*9 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty small; 5221 south preceding';
		result = getDescription('eF;pS;5221 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round';
		result = getDescription('vF;S;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; elongated/extended; very gradually brighter middle; 3 resolvable (mottled not resolved) diameter of 3';
		result = getDescription('F;L;E;vgbM;3rd of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; brighter middle';
		result = getDescription('F;S;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; very little/long elongated/extended; star of 9th magnitude south preceding';
		result = getDescription('vF;pS;vlE;*9 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small';
		result = getDescription('F;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; extremely/excessively small; very faint stars close';
		result = getDescription('pF;eS;vf * close');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; extremely/excessively large';
		result = getDescription('eF;eL');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very large; very gradually; pretty suddenly much brighter middle; large Nucleus or to a Nucleus';
		result = getDescription('cF;vL;vg;psmbM;LN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle';
		result = getDescription('vF;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; pretty much elongated/extended; gradually little/long brighter middle';
		result = getDescription('pB;L;pmE;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; brighter middle; preceding of double nebula';
		result = getDescription('vF;S;R;bM;p of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; irregular round; following of double nebula';
		result = getDescription('F;S;iR;f of Dneb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round; among pretty bright stars';
		result = getDescription('vF;R;am pB st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - extremely/excessively faint; pretty large; round; north bright middle; difficult';
		result = getDescription('13\'\'-eF; pL; R; nBM; difficult');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula; probably stars';
		result = getDescription('neb;probably *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; between 2 stars';
		result = getDescription('eF;S;bet 2*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; round; gradually very little/long brighter middle';
		result = getDescription('eF;vS;R;gvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very large; little/long elongated/extended; very gradually brighter middle';
		result = getDescription('vF;vL;lE;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; resolvable (mottled not resolved)';
		result = getDescription('vF;vS;R;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 12th magnitude in faint nebula';
		result = getDescription('*12 in F neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round; between double stars north following';
		result = getDescription('vF;pS;R;bet D*nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; large; irregular round; brighter middle';
		result = getDescription('cF;L;iR;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; 2 stars preceding';
		result = getDescription('F;pS;R;2st p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; pretty suddenly brighter middle';
		result = getDescription('F;vS;R;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; elongated in position angle 0 degrees; partially resolved some stars seen';
		result = getDescription('vF;S;E0;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; very large; round; little/long brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cF;vL;R;lbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; irregular round';
		result = getDescription('F;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; elongated/extended; pretty faint; 4 arcminutes following double stars';
		result = getDescription('vF;E;pF;4\'f D*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round';
		result = getDescription('vF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; little/long brighter middle';
		result = getDescription('vF;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle';
		result = getDescription('F;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; much elongated/extended north suddenly/south';
		result = getDescription('vF;mE ns');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; very much elongated/extended 17; resolvable (mottled not resolved)';
		result = getDescription('F;pL;vmE17;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended';
		result = getDescription('vF;vS;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; round; pretty suddenly brighter middle; star of 8th magnitude north following';
		result = getDescription('B;pL;R;psbM;*8 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very large; round; very gradually brighter middle';
		result = getDescription('vF;vL;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; large; round; gradually brighter middle';
		result = getDescription('cF;L;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'small; round; star of 9th magnitude distance or distant 2 arcminutes';
		result = getDescription('S;R;*9dist2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar';
		result = getDescription('vF;vS;stell');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; round; very gradually brighter middle; star of 11th magnitude north preceding';
		result = getDescription('cF;pL;R;vgbM;*11 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; stellar; resolvable';
		result = getDescription('vF;vS;stel;resolvable');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; stellar';
		result = getDescription('F;vS;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; binuclear; stellar; resolvable';
		result = getDescription('vF;vS;bi-N;stell;resolvable');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; ray 2 arcminutes';
		result = getDescription('vF;ray 2\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; very gradually brighter middle; north following';
		result = getDescription('F;S;R;vgbM;nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small; round; gradually brighter middle';
		result = getDescription('vF;cS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; considerably small';
		result = getDescription('vF;cS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'star of 12th magnitude in nebula';
		result = getDescription('*12 in neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably large; round; gradually much brighter middle; south preceding of 2';
		result = getDescription('pF;cL;R;gmbM;sp of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably large; round; north following of 2';
		result = getDescription('pF;cL;R;nf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2 near 5427; line with 26; 27';
		result = getDescription('2 nr 5427;line w 26;27');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '2 near 5427; line with 26; 27';
		result = getDescription('2 nr 5427;line w 26;27');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint';
		result = getDescription('vF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; much elongated/extended; cometic';
		result = getDescription('F;pS;mE;com');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; star of 10th magnitude; 11 close faint';
		result = getDescription('vF;*10;11 close F');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; round; resolvable (mottled not resolved)';
		result = getDescription('F;vS;R;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; irregular round';
		result = getDescription('vF;vS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; south preceding 5468';
		result = getDescription('eF;vS;sp 5468');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; very small; south preceding 5468';
		result = getDescription('eF;vS;sp 5468');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; much elongated/extended; very gradually little/long brighter middle';
		result = getDescription('F;mE;vglbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; round; very gradually brighter middle; star of 9th magnitude south following 4 arcminutes';
		result = getDescription('F;L;R;vgbM;*9 sf 4\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; very small; between 2 very faint stars';
		result = getDescription('pF;vS;bet 2 vf *');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; irregular round';
		result = getDescription('F;pS;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; round; gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;pS;R;gbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; round; pretty suddenly much brighter middle stars; star of 18th magnitude involved/involving';
		result = getDescription('pB;vS;R;psmbM*;*18 invl');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very large; elongated/extended north suddenly/south';
		result = getDescription('pB;vL;E ns');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; partially resolved some stars seen';
		result = getDescription('vF;S;rr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; elongated in position angle 20 degrees; little/long brighter middle';
		result = getDescription('pB;L;E20;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; round; stellar';
		result = getDescription('cF;S;R;stellar');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; gradually brighter middle';
		result = getDescription('vF;S;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; round; brighter middle';
		result = getDescription('F;S;R;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'most extremely faint; small; little/long elongated/extended';
		result = getDescription('eeF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; stars involved/involving; star of 12th magnitude north preceding';
		result = getDescription('pF;st inv;*12 np');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round; gradually brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;S;iR;gbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '3 stars in nebula';
		result = getDescription('3*in neby');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small';
		result = getDescription('vF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended; north preceding of 2';
		result = getDescription('eF;S;lE;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; (= 5563 ?)';
		result = getDescription('eF;S;(=5563?)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably large; elongated/extended; gradually brighter middle';
		result = getDescription('pF;cL;E;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; little/long elongated/extended';
		result = getDescription('eF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; very difficult; (= 5563 ?)';
		result = getDescription('eF;S;v diffic;(=5563?)');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty large; round; pretty suddenly brighter middle; resolvable (mottled not resolved); stars following 1. 5 arcminutes';
		result = getDescription('B;pL;R;psbM;r;*f1.5\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; pretty large; round';
		result = getDescription('eF;pL;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; little/long elongated/extended';
		result = getDescription('vF;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; little/long elongated/extended; preceding of 2';
		result = getDescription('pF;pS;lE;p of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; very small; or nebulous star';
		result = getDescription('F;vS;or neb*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; little/long elongated/extended; much brighter middle Nucleus or to a Nucleus';
		result = getDescription('vF;vS;lE;mbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; small; round; very suddenly/south much brighter middle; brightest of 3';
		result = getDescription('B;S;R;vsmbM;brightest of 3');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; very much elongated/extended 53';
		result = getDescription('pF;pL;vmE53');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; much elongated/extended; diffused; gradually little/long brighter middle';
		result = getDescription('F;L;mE;dif;glbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; little/long elongated/extended';
		result = getDescription('F;S;lE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; very gradually brighter middle stars; resolvable (mottled not resolved)';
		result = getDescription('F;pS;R;vgbM*;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small';
		result = getDescription('eF;S');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; very gradually brighter middle';
		result = getDescription('vF;S;R;vgbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula star of 11th magnitude following 150 arcseconds';
		result = getDescription('neb *11f150\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; considerably large; round; gradually brighter middle; well resolved clearly consisting of stars; stars 19th magnitude and fainter...; star of 8th magnitude south following';
		result = getDescription('vB;cL;R;gbM;rrr;st 19...;*8 sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; considerably large; round; north preceding of 2';
		result = getDescription('eF;cL;R;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; round; south following of 2';
		result = getDescription('cB;pL;R;sf of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty large; irregular round; gradually brighter middle';
		result = getDescription('cF;pL;iR;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; round';
		result = getDescription('vF;pS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; very little/long elongated/extended; brighter middle';
		result = getDescription('pB;pL;vlE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula; round; north following';
		result = getDescription('neb;R;nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'nebula; faint; elongated/extended; north following';
		result = getDescription('neb;F;E;nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; irregular elongated/extended';
		result = getDescription('vF;pS;iE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; very little/long elongated/extended; star of 14th magnitude involved/involving';
		result = getDescription('F;pS;vlE;*14 inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; pretty small; round; gradually brighter middle';
		result = getDescription('cF;pS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; star of 12th magnitude attached';
		result = getDescription('vF;S;R;*12 att');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small';
		result = getDescription('vF;vS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; much elongated/extended 138; faint stars attached south following';
		result = getDescription('vF;mE138;F* att sf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small; little/long elongated/extended; gradually brighter middle';
		result = getDescription('pB;pS;lE;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; round; gradually brighter middle';
		result = getDescription('pB;vS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty small; round; much brighter middle; star of 11th magnitude preceding 15 arcseconds';
		result = getDescription('cB;pS;R;mbM;*11p15\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; large; little/long elongated/extended; extremely/excessively faint diffused nebula';
		result = getDescription('eF;L;lE;eF dif neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; pretty large; round; pretty suddenly much brighter middle; resolvable (mottled not resolved)';
		result = getDescription('cB;pL;R;psmbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; very gradually little/long brighter middle; star of 8th magnitude - 9 north following';
		result = getDescription('vF;S;R;vglbM;*8-9 nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; little/long elongated/extended; brighter middle';
		result = getDescription('pF;S;lE;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; disc; star of 15th magnitude suddenly/south 95 arcseconds';
		result = getDescription('vF;S;disc;*15s95\'\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; much elongated/extended';
		result = getDescription('vF;S;mE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty large; elongated/extended preceding following; resolvable (mottled not resolved)';
		result = getDescription('pB;pL;E pf;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; brighter middle';
		result = getDescription('F;S;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; large; irregular round; gradually brighter middle; resolvable (mottled not resolved)';
		result = getDescription('pB;L;iR;gbM;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; large; very much elongated/extended 170; brighter middle; bright Nucleus or to a Nucleus';
		result = getDescription('B;L;vmE170;bM;BN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small; very little/long elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('pF;pS;vlE;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'double nebula; both extremely/excessively faint';
		result = getDescription('Dneb;both eF');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; very little/long elongated/extended; brighter middle; binuclear';
		result = getDescription('cF;S;vlE;bM;bi-N');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty large; round; north preceding of 2';
		result = getDescription('pF;pL;R;np of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; very much elongated/extended 148; gradually very little/long brighter middle';
		result = getDescription('F;pS;vmE148;gvlbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty large; very little/long brighter middle; star of 8th magnitude; 9 south preceding';
		result = getDescription('vF;pL;vlbM;*8;9 sp');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably bright; considerably large; elongated in position angle 165 degrees; suddenly/south brighter middle Nucleus or to a Nucleus';
		result = getDescription('cB;cL;E165;sbMN');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; irregular round';
		result = getDescription('vF;S;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'bright; pretty small; round; pretty suddenly much brighter middle';
		result = getDescription('B;pS;R;psmbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round';
		result = getDescription('vF;vS;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; much brighter middle';
		result = getDescription('pB;S;mbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; pretty small';
		result = getDescription('pB;pS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; pretty small';
		result = getDescription('pF;pS');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; round';
		result = getDescription('vF;R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; irregular round';
		result = getDescription('eF;S;iR');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very bright; pretty large; round; pretty suddenly brighter middle Nucleus or to a Nucleus; faint stars involved/involving small; north of 2';
		result = getDescription('vB;pL;R;psbMN;F* inv S;n of 2');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended';
		result = getDescription('F;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; close double stars south following 7 arcminutes';
		result = getDescription('eF;S;close D* sf 7\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'considerably faint; small; little/long elongated/extended; pretty suddenly brighter middle';
		result = getDescription('cF;S;lE;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; very little/long elongated/extended; little/long brighter middle; among stars';
		result = getDescription('pB;S;vlE;lbM;am st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; small; round; 2 stars north following';
		result = getDescription('eF;S;R;2* nf');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; considerably small; irregular little/long elongated/extended; gradually brighter middle; star of 14th magnitude following';
		result = getDescription('pF;cS;ilE;gbM;*14f');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; irregular elongated/extended';
		result = getDescription('pB;S;iE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; 5869 suddenly/south 3 arcminutes';
		result = getDescription('eF;5869s3\'');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty faint; small; elongated/extended; pretty suddenly brighter middle';
		result = getDescription('pF;S;E;psbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/excessively faint; forms trapezium with 3 preceding';
		result = getDescription('eF;forms trapezium w 3 p');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; very small; round; 2 stars triangle';
		result = getDescription('vF;vS;R;2*triangle');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; pretty small; very little/long elongated/extended 90 degree';
		result = getDescription('vF;pS;vlE 90 deg');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; little/long compressed; 30 stars';
		result = getDescription('Cl;P;lC;30st');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; considerably large; considerably elongated/extended 117 degree; little/long brighter middle';
		result = getDescription('pB;cL;cE 117 deg;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; small; round; pretty much brighter middle; 3 stars 11 north';
		result = getDescription('pB;S;R;pmbM;3* 11 n');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very faint; round; poor with 43; double stars involved/involving middle';
		result = getDescription('Cl;vF;R;P w 43;D* inv M');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty large; very faint; round; poor with 42; double stars involved/involving middle';
		result = getDescription('pL;vF;R;P w 42;D* inv M');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; round; little/long brighter middle';
		result = getDescription('vF;S;R;lbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty small; round; gradually brighter middle';
		result = getDescription('F;pS;R;gbM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'pretty bright; very small; brighter middle';
		result = getDescription('pB;vS;bM');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; little/long compressed';
		result = getDescription('Cl;P;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very large; bright; including 4; 5; 7 Vulpecula';
		result = getDescription('vL; B; incl 4;5;7 Vul');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'round';
		result = getDescription('R');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - extremely/excessively faint; just suspected at 100X on 7/10 night';
		result = getDescription('13\'\'-eF; just suspected at 100X on 7/10 night');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; preceding rich; very little/long compressed; stars 10th magnitude and fainter th magnitude and fainter';
		result = getDescription('Cl;vL;pRi;vlC;st10..');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; very compressed; elongated in position angle 0 degrees; stars 14th magnitude and fainter th to 18th magnitude';
		result = getDescription('Cl;L;vC;E0;st14...18');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - bright; very large; north compressed at 60X; 28 stars';
		result = getDescription('13\'\'-B;vL;nC at 60X; 28*');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'double star in very faint; small nebula';
		result = getDescription('**in vf;S neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; preceding rich; little/long compressed; stars from 10th to 15th magnitude';
		result = getDescription('Cl;vL;pRi;lC;*10..15');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; large; irregular';
		result = getDescription('F;L;Irr');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; considerably rich; elongated/extended; stars 11th magnitude and fainter th to 12th magnitude';
		result = getDescription('Cl;cRi;E;st11...12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - pretty faint; large; elongated/extended 3X1 at 100X with UHC filter; 11 stars involved/involving';
		result = getDescription('13\'\'-pF;L;E 3X1 at 100X with UHC filter;11*inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; elongated/extended; diffused; several stars involved/involving';
		result = getDescription('vF;E;dif;sev st inv');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; large; preceding rich; preceding compressed; stars from 11th to 12th magnitude';
		result = getDescription('Cl;L;pRi;pC;*11...12');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; pretty large; very little/long elongated/extended';
		result = getDescription('F;pL;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'extremely/very remarkable object very bright; very large; binuclear; irregular elongated/extended; Dumbbell nebula';
		result = getDescription('!!vB;vL;bi-N;iE;Dumbbell Neb');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'elongated/extended';
		result = getDescription('E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'double nebula stars; irregular figure; star of 11th magnitude close';
		result = getDescription('Dneb *;iF;* 11 close');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; poor; little/long compressed';
		result = getDescription('Cl;P;lC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very bright; very large; rich; little/long compressed; stars from 6th to 11th magnitude';
		result = getDescription('Cl;vB;vL;Ri;lC;*6..11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; small; very little/long compressed; stars 10th magnitude and fainter th to 11th magnitude';
		result = getDescription('Cl;S;vlC;st10...11');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; elongated/extended';
		result = getDescription('F;S;E');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very bright; very large; very rich; considerably compressed';
		result = getDescription('Cl;vB;vL;vRi;cC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'cluster; very large; poor; very little/long compressed';
		result = getDescription('Cl;vL;P;vlC');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = '13 arcseconds - very faint; large; irregular round; north bright middle at 100X; UHC filter helps';
		result = getDescription('13\'\'-vF;L;irR;nBM at 100X; UHC filter helps');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'faint; small; very little/long elongated/extended; resolvable (mottled not resolved)';
		result = getDescription('F;S;vlE;r');
		assert.equal(result, expected, result + ' should be ' + expected);

		expected = 'very faint; small; very little/long elongated/extended';
		result = getDescription('vF;S;vlE');
		assert.equal(result, expected, result + ' should be ' + expected);
	});
	
	// count of object clusters
	QUnit.test('findClosestObjects analysis', assert => {
		var minCount = 3,
			minNonGalaxyCount,
			maxDistanceDeg = 1,
			minMagnitude = 6,
			minDecDeg,
			allowedTypes,
			result,
			expected = 4;
				
		result = findClosestObjects(minCount, minNonGalaxyCount, maxDistanceDeg, minMagnitude, minDecDeg, allowedTypes).length;
		assert.equal(result, expected, result + ' should be ' + expected);
		
		minMagnitude = 8;
		expected = 14;
		result = findClosestObjects(minCount, minNonGalaxyCount, maxDistanceDeg, minMagnitude, minDecDeg, allowedTypes).length;
		assert.equal(result, expected, result + ' should be ' + expected);

		maxDistanceDeg = 2;
		minMagnitude = 6;
		expected = 8;
		result = findClosestObjects(minCount, minNonGalaxyCount, maxDistanceDeg, minMagnitude, minDecDeg, allowedTypes).length;
		assert.equal(result, expected, result + ' should be ' + expected);
	});		
	
	QUnit.test('findClosestObjects analysis non-galaxies, minimum Dec', assert => {
		var minCount = 3,
			minNonGalaxyCount = 2,
			// brighter objects within 1 deg of each other
			maxDistanceDeg = 1,
			minMagnitude = 8,
			minDecDeg = -45,
			allowedTypes,
			result,
			expected = 10;
				
		result = findClosestObjects(minCount, minNonGalaxyCount, maxDistanceDeg, minMagnitude, minDecDeg, allowedTypes).length;
		assert.equal(result, expected, result + ' should be ' + expected);
	});
	
	QUnit.test('findClosestObjects analysis explicit types', assert => {
		var minCount = 3,
			minNonGalaxyCount,
			maxDistanceDeg = 1.5,
			minMagnitude = 12,
			minDecDeg,
			allowedTypes = ["OPNCL", "GLOCL"], // when setting allowedTypes, be sure to adjust minNonGalaxyCount
			result,
			expected = 56;
				
		result = findClosestObjects(minCount, minNonGalaxyCount, maxDistanceDeg, minMagnitude, minDecDeg, allowedTypes).length;
		assert.equal(result, expected, result + ' should be ' + expected);
	});
	
/*
starting findClosestObjects...
final object cluster list
group 0 (count of 19), (types: GALCL, GALXY,): Abell 2151 / Hercules Galxy Cl / GALCL, Abell 2152 /  / GALCL, NGC 6030 / UGC 10139 / GALXY, NGC 6034 / MCG 3-41- 62 / GALXY, NGC 6039 / NGC 6042 / GALXY, NGC 6040 / UGC 10165 / GALXY, NGC 6041 / UGC 10170 / GALXY, NGC 6042 / NGC 6039 / GALXY, NGC 6043 / MCG 3-41- 86 / GALXY, NGC 6044 / IC 1172 / GALXY, NGC 6045 / UGC 10177 / GALXY, NGC 6047 / MCG 3-41- 87 / GALXY, NGC 6050 / UGC 10186 / GALXY, NGC 6053 / NGC 6057 / GALXY, NGC 6054 / IC 1179 / GALXY, NGC 6055 / UGC 10191 / GALXY, NGC 6056 / IC 1176 / GALXY, NGC 6057 / NGC 6053 / GALXY, NGC 6061 / UGC 10199 / GALXY, 
group 1 (count of 20), (types: GALCL, GALXY,): Abell 2197 /  / GALCL, Abell 2199 /  / GALCL, NGC 6138 / MCG 7-34- 20 / GALXY, NGC 6141 /  / GALXY, NGC 6145 / MCG 7-34- 21 / GALXY, NGC 6146 / UGC 10379 / GALXY, NGC 6147 / MCG 7-34- 22 / GALXY, NGC 6150A / NGC 6150 / GALXY, NGC 6150B / MCG 7-34- 27 / GALXY, NGC 6158 / MCG 7-34- 41 / GALXY, NGC 6160 / UGC 10400 / GALXY, NGC 6166 / UGC 10409 / GALXY, NGC 6166A / MCG 7-34- 50 / GALXY, NGC 6166B / MCG 7-34- 76 / GALXY, NGC 6166C / MCG 7-34- 48 / GALXY, NGC 6166D / MCG 7-34- 56 / GALXY, NGC 6173 / UGC 10421 / GALXY, NGC 6175 / UGC 10422 / GALXY, NGC 6180 / MCG 7-34- 95 / GALXY, NGC 6184 / MCG 7-34-109 / GALXY, 
group 2 (count of 25), (types: GALCL, GALXY, 2STAR,): Abell 426 / Perseus I / GALCL, NGC 1212 / IC 1883 / GALXY, NGC 1224 / UGC 2578 / GALXY, NGC 1250 / UGC 2613 / GALXY, NGC 1257 / ZwG 540 73 / 2STAR, NGC 1259 / ZwG 540 78 / GALXY, NGC 1260 / UGC 2634 / GALXY, NGC 1264 / UGC 2643 / GALXY, NGC 1265 / UGC 2651 / GALXY, NGC 1267 / UGC 2657 / GALXY, NGC 1268 / UGC 2658 / GALXY, NGC 1270 / UGC 2660 / GALXY, NGC 1271 / ZwG 540. 96 / GALXY, NGC 1272 / UGC 2662 / GALXY, NGC 1273 / MCG 7- 7- 59 / GALXY, NGC 1274 / IC 1907 / GALXY, NGC 1275 / 3C84;UGC 2669 / GALXY, NGC 1277 / MCG 7- 7- 64 / GALXY, NGC 1278 / IC 1907 / GALXY, NGC 1279 / PGC 12449 / GALXY, NGC 1281 / MCG 7- 7- 67 / GALXY, NGC 1282 / UGC 2675 / GALXY, NGC 1283 / UGC 2676 / GALXY, NGC 1293 / MCG 7- 7- 75 / GALXY, NGC 1294 / UGC 2694 / GALXY, 
group 3 (count of 10), (types: OPNCL, PLNNB,): Basel 1 / Apriamasvili 1 / OPNCL, NGC 6705 / M 11 / OPNCL, PK 25- 2.1 / Perek 1-15 / PLNNB, PK 26- 1.1 / K4- 5 / PLNNB, PK 26- 1.2 / Perek 2-15 / PLNNB, PK 26- 2.1 / Perek 1-16 / PLNNB, PK 26- 2.3 / Perek 1-19 / PLNNB, PK 27- 2.1 / Perek 1-18 / PLNNB, PK 27- 3.1 / Abell 49 / PLNNB, PK 27- 3.2 / Vy 1-4 / PLNNB, 
group 4 (count of 3), (types: OPNCL,): Basel 10 /  / OPNCL, NGC 869 / OCL 350 / OPNCL, NGC 884 / OCL 353 / OPNCL, 
group 5 (count of 4), (types: OPNCL, PLNNB, BRTNB,): Basel 6 /  / OPNCL, IC 4996 / Cr 418 / OPNCL, NGC 6881 / PK 74+2.1 / PLNNB, NGC 6888 / LBN 203 / BRTNB, 
group 6 (count of 7), (types: OPNCL,): Berk 58 /  / OPNCL, Frolov 1 /  / OPNCL, Harvard 21 /  / OPNCL, King 12 /  / OPNCL, NGC 7788 / OCL 275 / OPNCL, NGC 7790 / OCL 276 / OPNCL, NGC 7795 /  / OPNCL, 
group 7 (count of 3), (types: OPNCL,): Biur 2 /  / OPNCL, NGC 6871 / OCL 148 / OPNCL, NGC 6883 / OCL 148 / OPNCL, 
group 8 (count of 3), (types: OPNCL,): Bochum 2 /  / OPNCL, Do 25 /  / OPNCL, NGC 2301 / OCL 540 / OPNCL, 
group 9 (count of 3), (types: OPNCL,): Bochum 4 /  / OPNCL, Bochum 5 /  / OPNCL, NGC 2409 /  / OPNCL, 
group 10 (count of 5), (types: OPNCL, PLNNB,): Bochum 6 /  / OPNCL, NGC 2383 / OCL 616 / OPNCL, NGC 2384 / OCL 618 / OPNCL, PK 234- 0.1 / M1-15 / PLNNB, PK 235- 1.1 / M1-14 / PLNNB, 
group 11 (count of 4), (types: OPNCL, GALXY, PLNNB,): Cr 196 /  / OPNCL, NGC 2658 / OCL 723 / OPNCL, NGC 2663 / ESO 371-14 / GALXY, PK 254+ 5.1 / M3- 6 / PLNNB, 
group 12 (count of 3), (types: OPNCL,): Cr 197 /  / OPNCL, NGC 2671 / OCL 745 / OPNCL, Tr 10 / Cr 203 / OPNCL, 
group 13 (count of 3), (types: OPNCL, GLOCL,): Cr 302 /  / OPNCL, NGC 6121 / M 4 / GLOCL, NGC 6144 / GCL 42 / GLOCL, 
group 14 (count of 6), (types: OPNCL, PLNNB,): Cr 316 /  / OPNCL, NGC 6227 / ESO 332-**5 / OPNCL, NGC 6231 / Dunlop 520 / OPNCL, PK 342+ 0.1 / Haro 1- 3 / PLNNB, PK 344+ 0.1 / Haro 1- 5 / PLNNB, Tr 24 / Harvard 12 / OPNCL, 
group 15 (count of 3), (types: OPNCL, CL+NB,): Cr 33 /  / OPNCL, Cr 34 /  / OPNCL, IC 1848 / OCL 364 / CL+NB, 
group 16 (count of 16), (types: OPNCL, GLOCL, PLNNB,): Cr 345 /  / OPNCL, NGC 6415 / ESO 393-?18 / OPNCL, NGC 6421 / ESO 393-?22 / OPNCL, NGC 6437 / ESO 393-?28 / OPNCL, NGC 6453 / GCL 79 / GLOCL, NGC 6475 / M 7 / OPNCL, PK 355- 2.1 / M3-14 / PLNNB, PK 355- 2.2 / He2-270 / PLNNB, PK 355- 2.3 / He2-278 / PLNNB, PK 355- 2.4 /  / PLNNB, PK 355- 3.1 / He2-283 / PLNNB, PK 355- 3.3 / He2-228 / PLNNB, PK 355- 4.1 / Hoffleit 2-1 / PLNNB, PK 355- 4.2 / M1-30 / PLNNB, PK 356- 3.3 / He2-300 / PLNNB, PK 356- 4.1 / Cannon 2-1 / PLNNB, 
group 17 (count of 7), (types: OPNCL, CL+NB, PLNNB,): Cr 367 /  / OPNCL, NGC 6514 / M 20 / CL+NB, NGC 6530 / OCL 19 / OPNCL, NGC 6531 / M 21 / OPNCL, NGC 6546 / OCL 24 / OPNCL, PK 6- 2.1 / M1-41 / PLNNB, PK 8- 1.1 / M1-40 / PLNNB, 
group 18 (count of 4), (types: OPNCL, PLNNB,): Cr 399 /  / OPNCL, NGC 6802 / OCL 114 / OPNCL, PK 55+ 2.1 / He2-432 / PLNNB, PK 55+ 2.2 / He1- 1 / PLNNB, 
group 19 (count of 4), (types: OPNCL, BRTNB,): Cr 419 /  / OPNCL, Cr 421 /  / OPNCL, IC 1318 / Sh2-108 / BRTNB, NGC 6910 / OCL 181 / OPNCL, 
group 20 (count of 5), (types: OPNCL, BRTNB,): Cr 428 /  / OPNCL, IC 5070 / IC 5070; LBN 350 / BRTNB, NGC 6996 /  / OPNCL, NGC 6997 / OCL 197 / OPNCL, NGC 7000 / LBN 373 / BRTNB, 
group 21 (count of 5), (types: OPNCL, BRTNB,): Cr 465 /  / OPNCL, Cr 466 /  / OPNCL, NGC 2335 / OCL 562 / OPNCL, NGC 2343 / OCL 565 / OPNCL, PK 223- 2.1 / K1- 8 / BRTNB, 
group 22 (count of 14), (types: OPNCL, GLOCL, PLNNB,): Cr 468 /  / OPNCL, ESO 456-SC38 / Djorgovski 2 / GLOCL, IC 4673 / PK 3-2.3 / PLNNB, NGC 6520 / OCL 10 / OPNCL, NGC 6540 / Djorgovski 3 / GLOCL, PK 2- 2.2 / M3-20 / PLNNB, PK 2- 2.4 / M2-23 / PLNNB, PK 2- 3.2 / Haro 2-37 / PLNNB, PK 2- 3.5 / He2-344 / PLNNB, PK 3- 2.1 / M1-35 / PLNNB, PK 3- 2.2 / M2-26 / PLNNB, PK 4- 3.1 / M2-29 / PLNNB, Ter 9 /  / GLOCL, Tr 31 / Cr 357 / OPNCL, 
group 23 (count of 5), (types: OPNCL, PLNNB,): Cr 469 /  / OPNCL, IC 4715 / M 24 / OPNCL, NGC 6567 / PK 11-0.2 / PLNNB, NGC 6595 / IC 4700 / OPNCL, PK 11- 0.1 / M1-43 / PLNNB, 
group 24 (count of 9), (types: OPNCL, CL+NB, BRTNB,): Cr 97 /  / OPNCL, Cr 104 /  / OPNCL, Cr 106 /  / OPNCL, Cr 107 /  / OPNCL, NGC 2237 / OCL 511 / CL+NB, NGC 2238 / LBN 948 / BRTNB, NGC 2239 / NGC 2244 / OPNCL, NGC 2244 / NGC 2239 / CL+NB, NGC 2252 / OCL 514 / OPNCL, 
group 25 (count of 4), (types: OPNCL, CL+NB,): Czernik 13 /  / OPNCL, IC 1805 / Mel 15 / CL+NB, Mel 15 / Cr 26 / OPNCL, NGC 1027 / OCL 357 / OPNCL, 
group 26 (count of 3), (types: OPNCL,): Czernik 29 /  / OPNCL, Haffner 10 /  / OPNCL, NGC 2414 / OCL 598 / OPNCL, 
group 27 (count of 3), (types: OPNCL,): Czernik 3 / OCL 315 / OPNCL, NGC 366 / OCL 316 / OPNCL, NGC 381 / OCL 317 / OPNCL, 
group 28 (count of 4), (types: OPNCL, GALXY,): Czernik 8 /  / OPNCL, King 4 /  / OPNCL, Maffei 1 /  / GALXY, NGC 957 / OCL 362 / OPNCL, 
group 29 (count of 8), (types: OPNCL, PLNNB, CL+NB,): Haffner 16 /  / OPNCL, Haffner 18 /  / OPNCL, Haffner 19 /  / OPNCL, NGC 2452 / PK 243-1.1 / PLNNB, NGC 2453 / OCL 670 / OPNCL, NGC 2467 / OCL 668 / CL+NB, Ru 32 /  / OPNCL, Ru 36 /  / OPNCL, 
group 30 (count of 6), (types: OPNCL, PLNNB,): Haffner 21 /  / OPNCL, NGC 2520 / NGC 2527 / OPNCL, NGC 2527 / NGC 2520 / OPNCL, PK 245+ 1.1 / M3- 5 / PLNNB, Ru 44 /  / OPNCL, Ru 49 /  / OPNCL, 
group 31 (count of 4), (types: OPNCL,): Haffner 6 /  / OPNCL, Haffner 8 /  / OPNCL, NGC 2374 / OCL 585 / OPNCL, NGC 2396 / OCL 579 / OPNCL, 
group 32 (count of 3), (types: OPNCL, PLNNB,): IC 1369 / Cr 432 / OPNCL, NGC 7026 / PK 89+0.1 / PLNNB, PK 89- 0.1 / Sh1- 89 / PLNNB, 
group 33 (count of 5), (types: OPNCL,): IC 166 / OCL 334 / OPNCL, NGC 654 / OCL 330 / OPNCL, NGC 659 / OCL 332 / OPNCL, NGC 663 / OCL 333 / OPNCL, Tr 1 / Cr 15 / OPNCL, 
group 34 (count of 4), (types: OPNCL,): IC 2157 / Cr 80 / OPNCL, NGC 2129 / OCL 467 / OPNCL, NGC 2158 / OCL 468 / OPNCL, NGC 2168 / M 35 / OPNCL, 
group 35 (count of 4), (types: PLNNB, GLOCL,): IC 4732 / PK 10-6.1 / PLNNB, NGC 6642 / GCL 97 / GLOCL, NGC 6656 / M 22 / GLOCL, PK 10- 6.2 / Perek 1-13 / PLNNB, 
group 36 (count of 6), (types: OPNCL, PLNNB,): King 14 /  / OPNCL, NGC 133 / OCL 296 / OPNCL, NGC 146 / OCL 299 / OPNCL, NGC 225 / OCL 305 / OPNCL, PK 121+ 0.1 /  / PLNNB, Stock 24 / Berk 3 / OPNCL, 
group 37 (count of 6), (types: OPNCL,): Lynga 14 /  / OPNCL, NGC 6216 / NGC 6222 / OPNCL, NGC 6222 / NGC 6216 / OPNCL, NGC 6249 / OCL 994 / OPNCL, NGC 6250 / OCL 991 / OPNCL, NGC 6259 / OCL 996 / OPNCL, 
group 38 (count of 3), (types: CL+NB, BRTNB,): Mel 22 / M 45 / CL+NB, vdB 20 / IC 349 / BRTNB, vdB 23 /  / BRTNB, 
group 39 (count of 3), (types: OPNCL, PLNNB,): Mel 72 / Cr 467 / OPNCL, PK 226+ 5.1 / M1-16 / PLNNB, PK 228+ 5.1 / M1-17 / PLNNB, 
group 40 (count of 4), (types: OPNCL, BRTNB,): Mrk 50 /  / OPNCL, NGC 7510 / OCL 256 / OPNCL, NGC 7635 / LBN 549 / BRTNB, NGC 7654 / M 52 / OPNCL, 
group 41 (count of 4), (types: OPNCL, GALXY, PLNNB,): NGC 1039 / M 34 / OPNCL, NGC 1040 / NGC 1053-1 / GALXY, NGC 1053 / NGC 1040-1 / GALXY, PK 144-15.1 / Abell 4 / PLNNB, 
group 42 (count of 7), (types: BRTNB, CL+NB, OPNCL,): NGC 1973 / Ced 55B / BRTNB, NGC 1975 / Ced 55C / BRTNB, NGC 1976 / M 42 / CL+NB, NGC 1977 / OCL 525 / CL+NB, NGC 1980 / OCL 529 / CL+NB, NGC 1981 / OCL 525 / OPNCL, NGC 1982 / M 43 / BRTNB, 
group 43 (count of 3), (types: OPNCL,): NGC 2299 / NGC 2302 / OPNCL, NGC 2302 / NGC 2302 / OPNCL, NGC 2309 / OCL 557 / OPNCL, 
group 44 (count of 3), (types: OPNCL,): NGC 2422 / M 47 / OPNCL, NGC 2423 / OCL 592 / OPNCL, NGC 2478 / NGC 2422 / OPNCL, 
group 45 (count of 3), (types: OPNCL, PLNNB,): NGC 2437 / M 46 / OPNCL, NGC 2438 / PK 231+4.2 / PLNNB, PK 231+ 4.1 / M1-18 / PLNNB, 
group 46 (count of 4), (types: OPNCL, CL+NB,): NGC 2546 / OCL 726 / OPNCL, NGC 2568 / OCL 727 / OPNCL, NGC 2579 / OCL 724 / CL+NB, Pismis 1 /  / OPNCL, 
group 47 (count of 4), (types: OPNCL,): NGC 2567 / OCL 708 / OPNCL, NGC 2571 / OCL 701 / OPNCL, NGC 2580 / OCL 709 / OPNCL, NGC 2587 / OCL 706 / OPNCL, 
group 48 (count of 8), (types: GALXY, GLOCL,): NGC 4048 / UGC 7023 / GALXY, NGC 4049 / UGC 7027 / GALXY, NGC 4064 / UGC 7054 / GALXY, NGC 4110 / UGC 7102 / GALXY, NGC 4147 / NGC 4153 / GLOCL, NGC 4153 / NGC 4147 / GLOCL, NGC 4155 / UGC 7172 / GALXY, UGC 7170 / PGC 38748 / GALXY, 
group 49 (count of 3), (types: GALXY, GLOCL,): NGC 4978 / UGC 8212 / GALXY, NGC 5024 / M 53 / GLOCL, NGC 5053 / GCL 23 / GLOCL, 
group 50 (count of 3), (types: GLOCL, PLNNB,): NGC 6266 / M 62 / GLOCL, PK 353+ 6.1 / M2- 7 / PLNNB, PK 353+ 6.2 / M2- 6 / PLNNB, 
group 51 (count of 3), (types: GLOCL, PLNNB,): NGC 6293 / GCL 55 / GLOCL, PK 357+ 7.1 / M4- 3 / PLNNB, PK 358+ 7.1 / M3-36 / PLNNB, 
group 52 (count of 3), (types: PLNNB,): NGC 6369 / PK 2+5.1;H IV 11 / PLNNB, PK 1+ 5.1 / Haro 1-14 / PLNNB, PK 1+ 5.2 / Haro 1-15 / PLNNB, 
group 53 (count of 5), (types: GLOCL, PLNNB,): NGC 6380 / Ton 1 / GLOCL, PK 349- 4.1 / Longmore 16 / PLNNB, PK 350- 2.1 / He2-241 / PLNNB, PK 350- 3.1 / Haro 1-26 / PLNNB, Ton 2 /  / GLOCL, 
group 54 (count of 4), (types: GLOCL, PLNNB,): NGC 6401 / GCL 73 / GLOCL, PK 3+ 2.1 / Hubble 4 / PLNNB, PK 3+ 3.1 / ESO 520-14 / PLNNB, PK 3+ 3.2 / He2-267 / PLNNB, 
group 55 (count of 15), (types: OPNCL, CL+NB, PLNNB, GLOCL,): NGC 6425 / OCL 1033 / OPNCL, NGC 6451 / OCL 1035 / OPNCL, NGC 6480 / ESO 456-?13 / CL+NB, PK 0- 1.1 / ESO 455-48 / PLNNB, PK 0- 1.5 / M2-19 / PLNNB, PK 358- 0.2 / M1-26 / PLNNB, PK 358- 1.1 / ESO 455-34 / PLNNB, PK 358- 2.1 / M4- 7 / PLNNB, PK 359- 0.1 / Hubble 5 / PLNNB, PK 359- 1.1 / M1-29 / PLNNB, PK 359- 1.2 / M3-44 / PLNNB, PK 359- 1.3 / M3-45 / PLNNB, PK 359- 2.2 / M3-16 / PLNNB, PK 359- 2.3 / Haro 1-40 / PLNNB, Ter 6 /  / GLOCL, 
group 56 (count of 3), (types: OPNCL, PLNNB,): NGC 6494 / M 23 / OPNCL, NGC 6507 / OCL 32 / OPNCL, PK 10+ 3.1 / The 4-10 / PLNNB, 
group 57 (count of 6), (types: GLOCL, PLNNB,): NGC 6626 / M 28 / GLOCL, NGC 6629 / PK 9-5.1;H II 204 / PLNNB, PK 7- 3.1 / M2-34 / PLNNB, PK 7- 4.1 / ESO 522-18 / PLNNB, PK 8- 4.1 / ESO 522-20 / PLNNB, PK 8- 4.2 / M2-42 / PLNNB, 
group 58 (count of 3), (types: PLNNB,): NGC 6629 / PK 9-5.1;H II 204 / PLNNB, PK 9- 4.1 / Haro 1-67 / PLNNB, PK 11- 5.1 / M1-47 / PLNNB, 
group 59 (count of 3), (types: GLOCL, PLNNB,): NGC 6637 / M 69 / GLOCL, NGC 6652 / GCL 98 / GLOCL, PK 2- 9.1 / Cannon 1-5 / PLNNB, 
group 60 (count of 4), (types: GLOCL, PLNNB,): NGC 6638 / GCL 95 / GLOCL, NGC 6644 / PK 8-7.2 / PLNNB, PK 7- 6.2 / Vy 2-1 / PLNNB, PK 8- 7.1 / ESO 522-31 / PLNNB, 
group 61 (count of 6), (types: OPNCL, PLNNB,): NGC 6645 / OCL 48 / OPNCL, NGC 6647 / OCL 45 / OPNCL, PK 14- 4.1 / M1-50 / PLNNB, PK 15- 3.1 / Abell 44 / PLNNB, PK 15- 4.1 / M1-53 / PLNNB, PK 16- 4.1 / M1-54 / PLNNB, 
group 62 (count of 4), (types: OPNCL, PLNNB,): NGC 6649 / OCL 66 / OPNCL, PK 20- 0.1 / Abell 45 / PLNNB, PK 21- 0.1 / M3-28 / PLNNB, PK 21- 1.1 / M1-51 / PLNNB, 
group 63 (count of 4), (types: OPNCL, PLNNB,): NGC 6694 / M 26 / OPNCL, PK 23- 2.1 / M1-59 / PLNNB, PK 24- 3.1 / Perek 1-17 / PLNNB, Tr 34 / Cr 387 / OPNCL, 
group 64 (count of 3), (types: GLOCL, BRTNB, PLNNB,): NGC 6749 / GCL 107 / GLOCL, PK 35- 0.1 / AP 2-1 / BRTNB, PK 36- 1.1 / Sh2- 71 / PLNNB, 
group 65 (count of 4), (types: PLNNB,): NGC 6803 / PK 46-4.1 / PLNNB, NGC 6804 / PK 45-4.1 / PLNNB, PK 46- 3.1 / Peimbert 9 / PLNNB, PK 47- 4.1 / Abell 62 / PLNNB, 
group 66 (count of 3), (types: OPNCL, PLNNB,): NGC 6830 / OCL 125 / OPNCL, PK 57- 1.1 / He2-447 / PLNNB, PK 59- 1.1 / He1- 3 / PLNNB, 
group 67 (count of 3), (types: OPNCL, PLNNB,): NGC 6834 / OCL 134 / OPNCL, NGC 6842 / PK 65+0.1 / PLNNB, NGC 6846 / OCL 139 / OPNCL, 
group 68 (count of 4), (types: OPNCL, PLNNB,): NGC 6866 / OCL 183 / OPNCL, PK 79+ 5.1 / M4-17 / PLNNB, PK 79+ 6.1 / K3-56 / PLNNB, PK 84+ 9.1 / K3-74 / PLNNB, 
group 69 (count of 5), (types: OPNCL, PLNNB,): NGC 7234 / Cr 447 / OPNCL, NGC 7235 / OCL 229 / OPNCL, NGC 7261 / OCL 237 / OPNCL, PK 103+ 0.1 / M2-51 / PLNNB, PK 103+ 0.2 / M2-52 / PLNNB, 
group 70 (count of 15), (types: GALXY, 1STAR,): NGC 79 / MCG 4- 2- 3 / GALXY, NGC 80 / UGC 203 / GALXY, NGC 81 / NPM1G +22 016 / GALXY, NGC 82 /  / 1STAR, NGC 83 / UGC 206 / GALXY, NGC 84 /  / 1STAR, NGC 85A / NGC 85 / GALXY, NGC 85B / IC 1546 / GALXY, NGC 86 / MCG 4- 2- 9 / GALXY, NGC 90 / UGC 208 / GALXY, NGC 91 /  / 1STAR, NGC 93 / UGC 209 / GALXY, NGC 94 / ZwG 479. 17 / GALXY, NGC 96 / MCG 4- 2- 14 / GALXY, NGC 109 / UGC 251 / GALXY, 
group 71 (count of 4), (types: PLNNB, GLOCL,): PK 0+ 3.1 / He2-250 / PLNNB, PK 1+ 1.1 / ESO 520-16 / PLNNB, PK 1+ 2.1 / He2-262 / PLNNB, Pal 6 /  / GLOCL, 
group 72 (count of 4), (types: PLNNB, GLOCL,): PK 12- 7.1 /  / PLNNB, PK 13- 7.1 / Peimbert 21 / PLNNB, PK 14- 7.1 / M3-31 / PLNNB, Pal 8 /  / GLOCL, 
group 73 (count of 6), (types: PLNNB,): PK 3+ 5.1 / Haro 2-15 / PLNNB, PK 4+ 4.1 / M1-25 / PLNNB, PK 4+ 6.2 / Haro 1-24 / PLNNB, PK 5+ 4.1 / Haro 1-27 / PLNNB, PK 5+ 5.1 / M3-12 / PLNNB, PK 5+ 5.2 / Haro 2-16 / PLNNB, 
group 74 (count of 4), (types: PLNNB,): PK 350+ 4.1 / Haro 2- 1 / PLNNB, PK 351+ 4.1 / M1-19 / PLNNB, PK 351+ 5.1 / M2- 5 / PLNNB, PK 352+ 5.1 / M2- 8 / PLNNB, 
group 75 (count of 12), (types: PLNNB, OPNCL,): PK 357+ 2.4 / Haro 1-18 / PLNNB, PK 357+ 3.1 / M3- 7 / PLNNB, PK 357+ 3.4 / M3-42 / PLNNB, PK 357+ 4.1 / Haro 2- 7 / PLNNB, PK 358+ 3.1 / M3-10 / PLNNB, PK 358+ 3.2 / He2-226 / PLNNB, PK 358+ 3.4 / He2-237 / PLNNB, PK 358+ 3.6 / Haro 1-20 / PLNNB, PK 358+ 3.7 / He2-233 / PLNNB, PK 358+ 3.8 / The 3-26 / PLNNB, PK 358+ 4.1 / M3- 8 / PLNNB, Tr 26 / Cr 331 / OPNCL, 
group 76 (count of 4), (types: PLNNB,): PK 37- 3.2 / Abell 56 / PLNNB, PK 38- 3.2 / M1-69 / PLNNB, PK 38- 3.3 / K2-11 / PLNNB, PK 39- 2.1 / M2-47 / PLNNB, 
group 77 (count of 4), (types: PLNNB,): PK 51- 3.1 / M1-73 / PLNNB, PK 51- 4.1 / Ap 22 / PLNNB, PK 52- 2.2 / Merrill 1-1 / PLNNB, PK 52- 4.1 / M1-74 / PLNNB, 
group 78 (count of 4), (types: PLNNB,): PK 7+ 6.1 / M1-23 / PLNNB, PK 7+ 6.2 / M1-24 / PLNNB, PK 7+ 7.1 / M1-22 / PLNNB, PK 8+ 6.1 / He2-260 / PLNNB, 
...ending findClosestObjects
*/
	QUnit.test.skip('findClosestObjects analysis 30 inch [long running]', assert => {
	//QUnit.test('findClosestObjects non-galaxies analysis 30 inch [long running]', assert => {
		var minCount = 3,
			minNonGalaxyCount = 2,
			maxDistanceDeg = 1.25,
			minMagnitude = 18,
			minDecDeg = -45,
			allowedTypes,
			result,
			expected = 79;
				
		result = findClosestObjects(minCount, minNonGalaxyCount, maxDistanceDeg, minMagnitude, minDecDeg, allowedTypes).length;
		assert.equal(result, expected, result + ' should be ' + expected);
	});	

/*
starting findClosestObjects...
final object cluster list
group 0 (count of 6), (types: GLOCL,): ESO 456-SC38 / Djorgovski 2 / GLOCL, NGC 6540 / Djorgovski 3 / GLOCL, NGC 6544 / GCL 87 / GLOCL, NGC 6553 / GCL 88 / GLOCL, Ter 9 /  / GLOCL, Ter 10 /  / GLOCL, 
group 1 (count of 3), (types: GLOCL,): HP 1 /  / GLOCL, Ter 1 /  / GLOCL, Ter 2 /  / GLOCL, 
group 2 (count of 3), (types: GLOCL,): IC 1276 / Pal 7 / GLOCL, NGC 6517 / GCL 81 / GLOCL, NGC 6539 / GCL 85 / GLOCL, 
group 3 (count of 3), (types: GLOCL,): NGC 6273 / M 19 / GLOCL, NGC 6284 / GCL 53 / GLOCL, NGC 6293 / GCL 55 / GLOCL, 
group 4 (count of 3), (types: GLOCL,): NGC 6333 / M 9 / GLOCL, NGC 6342 / GCL 61 / GLOCL, NGC 6356 / GCL 62 / GLOCL, 
group 5 (count of 3), (types: GLOCL,): NGC 6637 / M 69 / GLOCL, NGC 6652 / GCL 98 / GLOCL, NGC 6681 / M 70 / GLOCL, 
...ending findClosestObjects
*/
	QUnit.test('findClosestObjects analysis globular clusters [long running]', assert => {
		var minCount = 3,
			minNonGalaxyCount,
			maxDistanceDeg = 2,
			minMagnitude = 18,
			minDecDeg = -45,
			allowedTypes = ["GLOCL"], // when setting allowedTypes, be sure to adjust minNonGalaxyCount
			result,
			expected = 6;
				
		result = findClosestObjects(minCount, minNonGalaxyCount, maxDistanceDeg, minMagnitude, minDecDeg, allowedTypes).length;
		assert.equal(result, expected, result + ' should be ' + expected);
	});	

/*
starting findClosestObjects...
final object cluster list
group 0 (count of 3), (types: GLOCL,): ESO 456-SC38 / Djorgovski 2 / GLOCL, NGC 6540 / Djorgovski 3 / GLOCL, Ter 9 /  / GLOCL, 
group 1 (count of 3), (types: GLOCL,): HP 1 /  / GLOCL, Ter 1 /  / GLOCL, Ter 2 /  / GLOCL, 
group 2 (count of 2), (types: GLOCL,): NGC 4147 / NGC 4153 / GLOCL, NGC 4153 / NGC 4147 / GLOCL, 
group 3 (count of 2), (types: GLOCL,): NGC 5024 / M 53 / GLOCL, NGC 5053 / GCL 23 / GLOCL, 
group 4 (count of 2), (types: GLOCL,): NGC 5824 / NGC 5834 / GLOCL, NGC 5834 / ESO 387-SC001 / GLOCL, 
group 5 (count of 2), (types: GLOCL,): NGC 6121 / M 4 / GLOCL, NGC 6144 / GCL 42 / GLOCL, 
group 6 (count of 2), (types: GLOCL,): NGC 6333 / M 9 / GLOCL, NGC 6342 / GCL 61 / GLOCL, 
group 7 (count of 2), (types: GLOCL,): NGC 6380 / Ton 1 / GLOCL, Ton 2 /  / GLOCL, 
group 8 (count of 2), (types: GLOCL,): NGC 6522 / GCL 82 / GLOCL, NGC 6528 / GCL 84 / GLOCL, 
group 9 (count of 2), (types: GLOCL,): NGC 6544 / GCL 87 / GLOCL, NGC 6553 / GCL 88 / GLOCL, 
group 10 (count of 2), (types: GLOCL,): NGC 6558 / GCL 89 / GLOCL, NGC 6569 / GCL 91 / GLOCL, 
group 11 (count of 2), (types: GLOCL,): NGC 6637 / M 69 / GLOCL, NGC 6652 / GCL 98 / GLOCL, 
group 12 (count of 2), (types: GLOCL,): NGC 6642 / GCL 97 / GLOCL, NGC 6656 / M 22 / GLOCL, 
...ending findClosestObjects*/
	QUnit.test('findClosestObjects analysis 30 inch globular clusters [long running]', assert => {
		var minCount = 2,
			minNonGalaxyCount,
			maxDistanceDeg = 1.25,
			minMagnitude = 18,
			minDecDeg = -45,
			allowedTypes = ["GLOCL"], // when setting allowedTypes, be sure to adjust minNonGalaxyCount
			result,
			expected = 13;
				
		result = findClosestObjects(minCount, minNonGalaxyCount, maxDistanceDeg, minMagnitude, minDecDeg, allowedTypes).length;
		assert.equal(result, expected, result + ' should be ' + expected);
	});	
});

</script>
</html>