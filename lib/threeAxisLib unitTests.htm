<!DOCTYPE HTML>
<html>
<head>
	<title>QUnit test for threeAxisLib.js</title>
	
	<!--
	<link rel='stylesheet' href='http://code.jquery.com/qunit/qunit-1.16.0.css' />
	<script src='http://code.jquery.com/jquery-1.11.0.min.js'></script>
	<script src='http://code.jquery.com/qunit/qunit-1.16.0.js'></script>

	<script>window.jQuery || document.write('<script src='local-source.js'><\/script>')</script>
	-->
	
	<link rel='stylesheet' href='qunit/qunit-1.16.0.css' />
	<script src='jquery/jquery-2.1.1.min.js'></script>
	<script src='qunit/qunit-1.16.0.js'></script>

	<script src='sharedLib.js'></script>
	<script src='coordLib.js'></script>
	<script src='threeAxisLib.js'></script>
</head>
<body>
	<div id="qunit"></div>
	<div id="qunit-fixture"></div>
</body>

<script>$(document).ready(function () {
	'use strict';
	var withinRange = MLB.sharedLib.withinRange,
	    uom = MLB.sharedLib.uom,
		validRev = MLB.coordLib.validRev,
		validHalfRev = MLB.coordLib.validHalfRev,
		validDec = MLB.coordLib.validDec,
		model = MLB.threeAxisLib.model,
		altazToA3 = MLB.threeAxisLib.altazToA3;

	QUnit.module('convert from one axis system to another');
	
	// test values from three axis mount simulation by Steve Joiner:
	// alt: 56.4, az: 208.1, HA: 15.3, Dec 9.3, FR 353.5, a1: 57.3, a2 -8.2, a3: 195.6, Lat: 40.0

	QUnit.test('validRev', function () {
		var allowedErrorDeg = 0.1,
		    modelAltDeg = 56.4,
			modelAzDeg = 208.1,
			modelHADeg = 15.3,
			modelDecDeg = 9.3,
			modelFRDeg = 353.5,
			modelA1Deg = 57.3,
			modelA2Deg = -8.2,
			modelA3Deg = 195.6,
			modelLatDeg = 40.0,
			result;
		
		// test for model's existence
		equal(model !== 'undefined' && model !== null, true, 'model should be something');
		
		// test get/set
		model.lat = modelLatDeg * uom.degToRad;
		result = model.lat / uom.degToRad;		
		equal(withinRange(result, modelLatDeg, allowedErrorDeg), true, 'latitude should be ' + modelLatDeg + ', is ' + result);
		
		// test altaz coords changed
		model.az = modelAzDeg * uom.degToRad;
		model.alt = modelAltDeg * uom.degToRad;
		model.FR = modelFRDeg * uom.degToRad;
		altazToA3();
		result = model.a1 / uom.degToRad;
		equal(withinRange(result, modelA1Deg, allowedErrorDeg), true, 'altazChanged: a1 should be ' + modelA1Deg + ', is ' + result);
		result = model.a2 / uom.degToRad;
		equal(withinRange(result, modelA2Deg, allowedErrorDeg), true, 'altazChanged: a2 should be ' + modelA2Deg + ', is ' + result);
		result = model.a3 / uom.degToRad;
		equal(withinRange(result, modelA3Deg, allowedErrorDeg), true, 'altazChanged: a3 should be ' + modelA3Deg + ', is ' + result);
		result = model.FR / uom.degToRad;
		equal(withinRange(result, modelFRDeg, allowedErrorDeg), true, 'altazChanged: FR should be ' + modelFRDeg + ', is ' + result);
		result = model.HA / uom.degToRad;
		equal(withinRange(result, modelHADeg, allowedErrorDeg), true, 'altazChanged: HA should be ' + modelHADeg + ', is ' + result);
		result = model.Dec / uom.degToRad;
		equal(withinRange(result, modelDecDeg, allowedErrorDeg), true, 'altazChanged: Dec should be ' + modelDecDeg + ', is ' + result);
		
	});

});

</script>
</html>
